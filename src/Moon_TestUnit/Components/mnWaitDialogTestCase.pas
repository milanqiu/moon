unit mnWaitDialogTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, mnWaitDialog;

type
  TmnWaitDialogTestCase = class(TTestCase)
  strict private
    WaitDialog: mnTWaitDialog;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testWorkload;
    procedure testProgress;
    procedure testAddProgress;
    procedure testCancelSeries;
  end;

implementation

uses mnDebug, SysUtils;

{ TmnWaitDialogTestCase }

procedure TmnWaitDialogTestCase.SetUp;
begin
  WaitDialog := mnTWaitDialog.Create(nil);
end;

procedure TmnWaitDialogTestCase.TearDown;
begin
  WaitDialog.Free;
end;

procedure TmnWaitDialogTestCase.testWorkload;
begin
  CheckEquals(WaitDialog.Workload, 0);
  WaitDialog.Progress := 10;
  WaitDialog.Workload := 100;
  CheckEquals(WaitDialog.Workload, 100);
  CheckEquals(WaitDialog.Progress, 0);
end;

procedure TmnWaitDialogTestCase.testProgress;
begin
  CheckEquals(WaitDialog.Progress, 0);
  WaitDialog.Workload := 100;
  WaitDialog.Progress := 10;
  CheckEquals(WaitDialog.Progress, 10);
end;

procedure TmnWaitDialogTestCase.testAddProgress;
begin
  CheckEquals(WaitDialog.Progress, 0);
  WaitDialog.AddProgress(10);
  CheckEquals(WaitDialog.Progress, 10);
  WaitDialog.AddProgress;
  CheckEquals(WaitDialog.Progress, 11);
end;

procedure TmnWaitDialogTestCase.testCancelSeries;
begin
  CheckFalse(WaitDialog.Cancelled);

  WaitDialog.Cancel;
  Check(WaitDialog.Cancelled);

  try
    WaitDialog.CheckCancelled;
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.ClassType, EWaitDialogCancelledException);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnWaitDialogTestCase.Suite);
end.