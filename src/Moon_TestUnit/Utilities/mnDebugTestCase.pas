unit mnDebugTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnDebugTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testNeverGoesHere;
    procedure testAssert;
    procedure testLog;
  end;

implementation

uses mnDebug, mnResStrsU, SysUtils, cxMemo, mnSystem, Forms, mnFile;

{ TmnDebugTestCase }

procedure TmnDebugTestCase.SetUp;
begin
end;

procedure TmnDebugTestCase.TearDown;
begin
end;

procedure TmnDebugTestCase.testNeverGoesHere;
begin
  try
    mnNeverGoesHere;
  except
    on E: Exception do
    begin
      CheckEquals(E.ClassType, ENeverGoesHereException);
      CheckEquals(E.Message, SGoesToNeverGoesHere);
    end;
  end;
end;

procedure TmnDebugTestCase.testAssert;
begin
  // overload form 1
  mnAssert(1=1);

  try
    mnAssert(1=2);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SAssertionFailed);
  end;

  // overload form 2
  try
    mnAssert(1=2, 'how could 1 equals to 2?!');
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(SAssertionFailedWithDesc, ['how could 1 equals to 2?!']));
  end;
end;

procedure TmnDebugTestCase.testLog;
var
  Log: mnTLog;
  Strs: mnTStrList;
  Form: TForm;
  Memo: TcxMemo;
begin
  Log := mnTLog.Create;
  Strs := mnTStrList.Create;
  Form := TForm.Create(nil);
  Memo := TcxMemo.Create(Form);
  Memo.Parent := Form;
  try
    Log.BindToStrs(Strs);
    Log.BindToFile(mnTProjectConvention.GetTestTempPathSub('Log.txt'));
    Log.BindToMemo(Memo);

    Log.Append('abc');
    Log.Append('abc%s', ['de']);
    Log.Sync;

    CheckEquals(Log.Content.Text, 'abc'#13#10'abcde'#13#10);
    Check(Strs.Equals(Log.Content));
    Check(mnLoadStrFromFile(mnTProjectConvention.GetTestTempPathSub('Log.txt')) = Log.Content.Text);
    Check(Memo.Lines.Equals(Log.Content));

    Log.MaxStrsLines := 1;
    Log.MaxMemoLines := 1;
    Log.Sync;

    CheckEquals(Log.Content.Text, 'abc'#13#10'abcde'#13#10);
    Check(Strs.Text = 'abcde'#13#10);
    Check(mnLoadStrFromFile(mnTProjectConvention.GetTestTempPathSub('Log.txt')) = Log.Content.Text);
    Check(Memo.Lines.Text = 'abcde'#13#10);

    Log.MaxStrsLines := 4;
    Log.MaxMemoLines := 4;
    Log.Sync;

    CheckEquals(Log.Content.Text, 'abc'#13#10'abcde'#13#10);
    Check(Strs.Equals(Log.Content));
    Check(mnLoadStrFromFile(mnTProjectConvention.GetTestTempPathSub('Log.txt')) = Log.Content.Text);
    Check(Memo.Lines.Equals(Log.Content));

    Check(mnDeleteFile(mnTProjectConvention.GetTestTempPathSub('Log.txt')));
  finally
    Memo.Free;
    Form.Free;
    Strs.Free;
    Log.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnDebugTestCase.Suite);
end.

