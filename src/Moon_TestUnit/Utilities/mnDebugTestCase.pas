unit mnDebugTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnDebugTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testNeverGoesHere;
    procedure testAssert;
  end;

implementation

uses mnDebug, mnResStrsU, SysUtils;

{ TmnDebugTestCase }

procedure TmnDebugTestCase.SetUp;
begin
end;

procedure TmnDebugTestCase.TearDown;
begin
end;

procedure TmnDebugTestCase.testNeverGoesHere;
begin
  try
    mnNeverGoesHere;
  except
    on E: Exception do
    begin
      CheckEquals(E.ClassType, ENeverGoesHereException);
      CheckEquals(E.Message, SGoesToNeverGoesHere);
    end;
  end;
end;

procedure TmnDebugTestCase.testAssert;
begin
  // overload form 1
  mnAssert(1=1);

  try
    mnAssert(1=2);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SAssertionFailed);
  end;

  // overload form 2
  try
    mnAssert(1=2, 'how could 1 equals to 2?!');
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(SAssertionFailedWithDesc, ['how could 1 equals to 2?!']));
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnDebugTestCase.Suite);
end.

