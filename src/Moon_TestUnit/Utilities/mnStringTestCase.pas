unit mnStringTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnStringTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testDBCSBCConvertors;
    procedure testFirstLastSeries;
    procedure testAnsiPosEx;
    procedure testSettleByte;
    procedure testIsASCIISeries;
    procedure testContainDelimiters;
    procedure testStartsEndsStr;
    procedure testStartsEndsStrCount;
    procedure testInsertStr;
    procedure testDeleteStr;
    procedure testTruncLeftRightSeries;
    procedure testTruncMiddleSeries;
    procedure testLeftRightStrToSeries;
    procedure testTruncLeftRightOverSeries;
    procedure testCutLeftRightBySeries;
    procedure testRemoveLeftRightSeries;
    procedure testEnsureLeftRightSeries;
    procedure testAppendLeftRightIfNotEmptySeries;
    procedure testCountSeries;
    procedure testDiscardSeries;
    procedure testShrinkSeries;
    procedure testTrimSeries;
    procedure testExpandLeftRight;
    procedure testExpandInt;
    procedure testCompareStr;
    procedure testCompareStrInNumberStyle;
    procedure testReplaceStr;
    procedure testReplaceStrWholeWord;
    procedure testReplaceStrOnce;
    procedure testFindStrBetween;
    procedure testReplaceStrBetween;




    procedure testSplit;
    procedure testSplitBetween;
    procedure testSplitByLen;

    procedure testStringPattern_ParsePattern;
    procedure testStringPattern_AnsiParsePattern;
    procedure testStringPattern_LoadPatternFromFile;
    procedure testStringPattern_GetParamValueSeries;
    procedure testStringPattern_ClearParamPairs;
    procedure testStringPattern_Match;
    procedure testStringPattern_AnsiMatch;
    procedure testStringPattern_MatchSubAndNextSub;
    procedure testStringPattern_AnsiMatchSubAndNextSub;
    procedure testStringPattern_PrepareSubSequence;
    procedure testStringPattern_Realize;
    procedure testStringPattern_AnsiRealize;

    procedure testGetTextEncoding;
    procedure testExpressWideString;
    procedure testRandomStr;
    procedure testRandomDigitStr;
    procedure testRandomDigletStr;
    procedure testRandomUpperDigletStr;
    procedure testRandomLowerDigletStr;
    procedure testEncodeDecodeSeries;
    procedure testHideRevealSeries;
  end;

implementation

uses mnString, mnDebug, SysUtils, mnResStrsU, mnSystem, mnFile, UTestConsts,
  mnMath;

{--------------------------------
  Hint:
  '一二三' = #210#187#182#254#200#253
  '欢' = #187#182
  '痘' = #182#187
 --------------------------------}

{ TmnStringTestCase }

procedure TmnStringTestCase.SetUp;
begin
end;

procedure TmnStringTestCase.TearDown;
begin
end;

procedure TmnStringTestCase.testDBCSBCConvertors;
const
  DBC = ' 012789一abcxyz二ABCXYZ三!@#$%^&*()[]{}<>;:''",./?\'#13#10;
  SBC = '　０１２７８９一ａｂｃｘｙｚ二ＡＢＣＸＹＺ三！＠＃￥％＾＆＊（）［］｛｝＜＞；：＇＂，．／？＼'#13#10;
begin
  CheckEquals(mnDBCToSBC(DBC), SBC);
  CheckEquals(mnSBCToDBC(SBC), DBC);
end;

procedure TmnStringTestCase.testFirstLastSeries;
begin
  // mnLastChar
  CheckEquals(mnLastChar('.', 'C:\aaa.txt'), 7);
  CheckEquals(mnLastChar('A', 'aaa'), 0);
  CheckEquals(mnLastChar('a', 'aaa'), 3);
  CheckEquals(mnLastChar(#182, '一二三'), 0);
  CheckEquals(mnLastChar(#254, '一二三'), 0);

  // mnFirstChar
  CheckEquals(mnFirstChar('.', 'C:\aaa.txt'), 7);
  CheckEquals(mnFirstChar('A', 'aaa'), 0);
  CheckEquals(mnFirstChar('a', 'aaa'), 1);
  CheckEquals(mnFirstChar(#182, '一二三'), 0);
  CheckEquals(mnFirstChar(#254, '一二三'), 0);

  // mnLastDelimiter
  CheckEquals(mnLastDelimiter(':.', 'C:\aaa.txt'), 7);
  CheckEquals(mnLastDelimiter(':.A', 'aaa'), 0);
  CheckEquals(mnLastDelimiter(':.a', 'aaa'), 3);
  CheckEquals(mnLastDelimiter(#182, '一二三'), 0);
  CheckEquals(mnLastDelimiter(#254, '一二三'), 0);

  // mnFirstDelimiter
  CheckEquals(mnFirstDelimiter(':.', 'C:\aaa.txt'), 2);
  CheckEquals(mnFirstDelimiter(':.A', 'aaa'), 0);
  CheckEquals(mnFirstDelimiter(':.a', 'aaa'), 1);
  CheckEquals(mnFirstDelimiter(#182, '一二三'), 0);
  CheckEquals(mnFirstDelimiter(#254, '一二三'), 0);

  // mnLastPos
  CheckEquals(mnLastPos('ab', 'abcabcabc'), 7);
  CheckEquals(mnLastPos('A', 'abcabcabc'), 0);
  CheckEquals(mnLastPos('一二', '一二三一二三一二三'), 13);
  CheckEquals(mnLastPos('欢', '一二三一二三一二三'), 14);
  CheckEquals(mnLastPos('111', '1111111'), 5);

  // mnAnsiLastPos
  CheckEquals(mnAnsiLastPos('ab', 'abcabcabc'), 7);
  CheckEquals(mnAnsiLastPos('A', 'abcabcabc'), 0);
  CheckEquals(mnAnsiLastPos('一二', '一二三一二三一二三'), 13);
  CheckEquals(mnAnsiLastPos('欢', '一二三一二三一二三'), 0);
  CheckEquals(mnAnsiLastPos('aaa', 'aaaaaaa'), 5);
end;

procedure TmnStringTestCase.testAnsiPosEx;
begin
  CheckEquals(mnAnsiPosEx('bc', 'abcabcabc', 0), 0);
  CheckEquals(mnAnsiPosEx('bc', 'abcabcabc', 100), 0);
  CheckEquals(mnAnsiPosEx('bc', 'abcabcabc', 3), 5);
  CheckEquals(mnAnsiPosEx('BC', 'abcabcabc', 3), 0);
  CheckEquals(mnAnsiPosEx('欢', '一二三一二三', 3), 0);
  CheckEquals(mnAnsiPosEx('一', '一二三一二三', 3), 7);
  try
    mnAnsiPosEx('一', '一二三一二三', 2);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(SAnsiPosOffsetOnTrailByte, [2, '一二三一二三']));
  end;
end;

procedure TmnStringTestCase.testSettleByte;
begin
  CheckEquals(mnSettleByte('a一b', 1), 1);
  CheckEquals(mnSettleByte('a一b', 2), 3);
  CheckEquals(mnSettleByte('a一b', 3), 3);
  CheckEquals(mnSettleByte('a一b', 4), 4);
end;

procedure TmnStringTestCase.testIsASCIISeries;
begin
  // mnIsASCIIChar
  Check(mnIsASCIIChar(#0));
  Check(mnIsASCIIChar(#127));
  CheckFalse(mnIsASCIIChar(#128));
  CheckFalse(mnIsASCIIChar(#255));

  // mnIsASCIIStr
  Check(mnIsASCIIStr(#0#127));
  CheckFalse(mnIsASCIIStr(#0#127#128));
  CheckFalse(mnIsASCIIStr(#255#0#127));
end;

procedure TmnStringTestCase.testContainDelimiters;
begin
  Check(mnContainDelimiters('', 'abcdefg'));
  Check(mnContainDelimiters('ace', 'abcdefg'));
  Check(not mnContainDelimiters('aceh', 'abcdefg'));
  Check(not mnContainDelimiters('#182', '一二三一二三'));
end;

procedure TmnStringTestCase.testStartsEndsStr;
begin
  // mnStartsStr
  Check(mnStartsStr('', 'abcdefg'));
  Check(mnStartsStr('abc', 'abcdefg'));
  CheckFalse(mnStartsStr('abd', 'abcdefg'));
  CheckFalse(mnStartsStr('abcde', 'abc'));

  // mnEndsStr
  Check(mnEndsStr('', 'abcdefg'));
  Check(mnEndsStr('efg', 'abcdefg'));
  CheckFalse(mnEndsStr('dfg', 'abcdefg'));
  CheckFalse(mnEndsStr('abcde', 'cde'));
end;

procedure TmnStringTestCase.testStartsEndsStrCount;
begin
  // mnStartsStrCount
  CheckEquals(mnStartsStrCount('', 'abcdefg'), 0);
  CheckEquals(mnStartsStrCount('abc', 'abcdefg'), 1);
  CheckEquals(mnStartsStrCount('abc', 'abcabcdefg'), 2);
  CheckEquals(mnStartsStrCount('abc', 'abcabcabcdefg'), 3);
  CheckEquals(mnStartsStrCount('abd', 'abcdefg'), 0);

  // mnEndsStrCount
  CheckEquals(mnEndsStrCount('', 'abcdefg'), 0);
  CheckEquals(mnEndsStrCount('efg', 'abcdefg'), 1);
  CheckEquals(mnEndsStrCount('efg', 'abcdefgefg'), 2);
  CheckEquals(mnEndsStrCount('efg', 'abcdefgefgefg'), 3);
  CheckEquals(mnEndsStrCount('dfg', 'abcdefg'), 0);
end;

procedure TmnStringTestCase.testInsertStr;
begin
  CheckEquals(mnInsertStr('aaa', 'bbbbb', 3), 'bbaaabbb');
  CheckEquals(mnInsertStr('aaa', 'bbbbb', 0), 'aaabbbbb');
  CheckEquals(mnInsertStr('aaa', 'bbbbb', 6), 'bbbbbaaa');
end;

procedure TmnStringTestCase.testDeleteStr;
begin
  CheckEquals(mnDeleteStr('abcde', 3, 2), 'abe');
  CheckEquals(mnDeleteStr('abcde', 3, 7), 'ab');
  CheckEquals(mnDeleteStr('abcde', 0, 2), 'abcde');
  CheckEquals(mnDeleteStr('abcde', 6, 2), 'abcde');
  CheckEquals(mnDeleteStr('一2三4五', 3, 2), '一'#253'4五');
end;

procedure TmnStringTestCase.testTruncLeftRightSeries;
begin
  // mnTruncLeft
  CheckEquals(mnTruncLeft('12345', 2), '345');
  CheckEquals(mnTruncLeft('一2三4五', 2), '三4五');
  CheckEquals(mnTruncLeft('12345', 7), '');

  // mnTruncRight
  CheckEquals(mnTruncRight('12345', 2), '123');
  CheckEquals(mnTruncRight('一2三4五', 2), '一2三');
  CheckEquals(mnTruncRight('12345', 7), '');

  // mnTruncBLeft
  CheckEquals(mnTruncBLeft('12345', 2), '345');
  CheckEquals(mnTruncBLeft('一2三4五', 2), '2三4五');
  CheckEquals(mnTruncBLeft('12345', 7), '');

  // mnTruncBRight
  CheckEquals(mnTruncBRight('12345', 2), '123');
  CheckEquals(mnTruncBRight('一2三4五', 2), '一2三4');
  CheckEquals(mnTruncBRight('12345', 7), '');
end;

procedure TmnStringTestCase.testTruncMiddleSeries;
begin
  // mnTruncMiddle
  CheckEquals(mnTruncMiddle('12345', 3, 2), '125');
  CheckEquals(mnTruncMiddle('一2三4五', 3, 2), '一4五');
  CheckEquals(mnTruncMiddle('12345', 3, 7), '12');
  try
    mnTruncMiddle('12345', 6, 1);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(STruncMiddleIndexError, [6, 5]));
  end;

  // mnTruncBMiddle
  CheckEquals(mnTruncBMiddle('12345', 3, 2), '125');
  CheckEquals(mnTruncBMiddle('一2三4五', 3, 2), '一'#253'4五');
  CheckEquals(mnTruncBMiddle('12345', 3, 7), '12');
  try
    mnTruncBMiddle('12345', 6, 1);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(STruncBMiddleIndexError, [6, 5]));
  end;
end;

procedure TmnStringTestCase.testLeftRightStrToSeries;
begin
  // mnLeftStrToChar
  CheckEquals(mnLeftStrToChar(':', 'C:\aaa.txt'), 'C');
  CheckEquals(mnLeftStrToChar('A', 'aaa'), '');
  CheckEquals(mnLeftStrToChar('a', 'aaa'), '');

  // mnRightStrToChar
  CheckEquals(mnRightStrToChar(':', 'C:\aaa.txt'), '\aaa.txt');
  CheckEquals(mnRightStrToChar('A', 'aaa'), '');
  CheckEquals(mnRightStrToChar('a', 'aaa'), '');

  // mnLeftStrToDelimiter
  CheckEquals(mnLeftStrToDelimiter(':.', 'C:\aaa.txt'), 'C');
  CheckEquals(mnLeftStrToDelimiter('A', 'aaa'), '');
  CheckEquals(mnLeftStrToDelimiter('a', 'aaa'), '');

  // mnRightStrToDelimiter
  CheckEquals(mnRightStrToDelimiter(':.', 'C:\aaa.txt'), 'txt');
  CheckEquals(mnRightStrToDelimiter('A', 'aaa'), '');
  CheckEquals(mnRightStrToDelimiter('a', 'aaa'), '');

  // mnLeftStrTo
  CheckEquals(mnLeftStrTo('bc', 'abcabcabc'), 'a');
  CheckEquals(mnLeftStrTo('BC', 'abcabcabc'), '');
  CheckEquals(mnLeftStrTo('一二', '一二三一二三一二三'), '');
  CheckEquals(mnLeftStrTo('欢', '一二三一二三一二三'), #210);

  // mnRightStrTo
  CheckEquals(mnRightStrTo('ab', 'abcabcabc'), 'c');
  CheckEquals(mnRightStrTo('AB', 'abcabcabc'), '');
  CheckEquals(mnRightStrTo('一二', '一二三一二三一二三'), '三');
  CheckEquals(mnRightStrTo('欢', '一二三一二三一二三'), #254'三');

  // mnAnsiLeftStrTo
  CheckEquals(mnAnsiLeftStrTo('bc', 'abcabcabc'), 'a');
  CheckEquals(mnAnsiLeftStrTo('BC', 'abcabcabc'), '');
  CheckEquals(mnAnsiLeftStrTo('一二', '一二三一二三一二三'), '');
  CheckEquals(mnAnsiLeftStrTo('欢', '一二三一二三一二三'), '');

  // mnAnsiRightStrTo
  CheckEquals(mnAnsiRightStrTo('ab', 'abcabcabc'), 'c');
  CheckEquals(mnAnsiRightStrTo('AB', 'abcabcabc'), '');
  CheckEquals(mnAnsiRightStrTo('一二', '一二三一二三一二三'), '三');
  CheckEquals(mnAnsiRightStrTo('欢', '一二三一二三一二三'), '');
end;

procedure TmnStringTestCase.testTruncLeftRightOverSeries;
begin
  // mnTruncLeftOverChar
  CheckEquals(mnTruncLeftOverChar(':', 'C:\aaa.txt'), '\aaa.txt');
  CheckEquals(mnTruncLeftOverChar('A', 'aaa'), 'aaa');
  CheckEquals(mnTruncLeftOverChar('a', 'aaa'), 'aa');

  // mnTruncRightOverChar
  CheckEquals(mnTruncRightOverChar(':', 'C:\aaa.txt'), 'C');
  CheckEquals(mnTruncRightOverChar('A', 'aaa'), 'aaa');
  CheckEquals(mnTruncRightOverChar('a', 'aaa'), 'aa');

  // mnTruncLeftOverDelimiter
  CheckEquals(mnTruncLeftOverDelimiter(':.', 'C:\aaa.txt'), '\aaa.txt');
  CheckEquals(mnTruncLeftOverDelimiter('A', 'aaa'), 'aaa');
  CheckEquals(mnTruncLeftOverDelimiter('a', 'aaa'), 'aa');

  // mnTruncRightOverDelimiter
  CheckEquals(mnTruncRightOverDelimiter(':.', 'C:\aaa.txt'), 'C:\aaa');
  CheckEquals(mnTruncRightOverDelimiter('A', 'aaa'), 'aaa');
  CheckEquals(mnTruncRightOverDelimiter('a', 'aaa'), 'aa');

  // mnTruncLeftOver
  CheckEquals(mnTruncLeftOver('bc', 'abcabcabc'), 'abcabc');
  CheckEquals(mnTruncLeftOver('BC', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnTruncLeftOver('一二', '一二三一二三一二三'), '三一二三一二三');
  CheckEquals(mnTruncLeftOver('欢', '一二三一二三一二三'), #254'三一二三一二三');

  // mnTruncRightOver
  CheckEquals(mnTruncRightOver('ab', 'abcabcabc'), 'abcabc');
  CheckEquals(mnTruncRightOver('AB', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnTruncRightOver('一二', '一二三一二三一二三'), '一二三一二三');
  CheckEquals(mnTruncRightOver('欢', '一二三一二三一二三'), '一二三一二三'#210);

  // mnAnsiTruncLeftOver
  CheckEquals(mnAnsiTruncLeftOver('bc', 'abcabcabc'), 'abcabc');
  CheckEquals(mnAnsiTruncLeftOver('BC', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiTruncLeftOver('一二', '一二三一二三一二三'), '三一二三一二三');
  CheckEquals(mnAnsiTruncLeftOver('欢', '一二三一二三一二三'), '一二三一二三一二三');

  // mnAnsiTruncRightOver
  CheckEquals(mnAnsiTruncRightOver('ab', 'abcabcabc'), 'abcabc');
  CheckEquals(mnAnsiTruncRightOver('AB', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiTruncRightOver('一二', '一二三一二三一二三'), '一二三一二三');
  CheckEquals(mnAnsiTruncRightOver('欢', '一二三一二三一二三'), '一二三一二三一二三');
end;

procedure TmnStringTestCase.testCutLeftRightBySeries;
var
  str: string;
begin
  // mnCutLeftByChar
  str := 'C:\aaa.txt';
  CheckEquals(mnCutLeftByChar(':', str), 'C');
  CheckEquals(str, '\aaa.txt');
  str := 'aaa';
  CheckEquals(mnCutLeftByChar('A', str), '');
  CheckEquals(str, 'aaa');
  str := 'aaa';
  CheckEquals(mnCutLeftByChar('a', str), '');
  CheckEquals(str, 'aa');

  // mnCutRightByChar
  str := 'C:\aaa.txt';
  CheckEquals(mnCutRightByChar(':', str), '\aaa.txt');
  CheckEquals(str, 'C');
  str := 'aaa';
  CheckEquals(mnCutRightByChar('A', str), '');
  CheckEquals(str, 'aaa');
  str := 'aaa';
  CheckEquals(mnCutRightByChar('a', str), '');
  CheckEquals(str, 'aa');

  // mnCutLeftByDelimiter
  str := 'C:\aaa.txt';
  CheckEquals(mnCutLeftByDelimiter(':.', str), 'C');
  CheckEquals(str, '\aaa.txt');
  str := 'aaa';
  CheckEquals(mnCutLeftByDelimiter('A', str), '');
  CheckEquals(str, 'aaa');
  str := 'aaa';
  CheckEquals(mnCutLeftByDelimiter('a', str), '');
  CheckEquals(str, 'aa');

  // mnCutRightByDelimiter
  str := 'C:\aaa.txt';
  CheckEquals(mnCutRightByDelimiter(':.', str), 'txt');
  CheckEquals(str, 'C:\aaa');
  str := 'aaa';
  CheckEquals(mnCutRightByDelimiter('A', str), '');
  CheckEquals(str, 'aaa');
  str := 'aaa';
  CheckEquals(mnCutRightByDelimiter('a', str), '');
  CheckEquals(str, 'aa');

  // mnCutLeftBy
  str := 'abcabcabc';
  CheckEquals(mnCutLeftBy('bc', str), 'a');
  CheckEquals(str, 'abcabc');
  str := 'abcabcabc';
  CheckEquals(mnCutLeftBy('BC', str), '');
  CheckEquals(str, 'abcabcabc');
  str := '一二三一二三一二三';
  CheckEquals(mnCutLeftBy('一二', str), '');
  CheckEquals(str, '三一二三一二三');
  str := '一二三一二三一二三';
  CheckEquals(mnCutLeftBy('欢', str), #210);
  CheckEquals(str, #254'三一二三一二三');

  // mnCutRightBy
  str := 'abcabcabc';
  CheckEquals(mnCutRightBy('ab', str), 'c');
  CheckEquals(str, 'abcabc');
  str := 'abcabcabc';
  CheckEquals(mnCutRightBy('AB', str), '');
  CheckEquals(str, 'abcabcabc');
  str := '一二三一二三一二三';
  CheckEquals(mnCutRightBy('一二', str), '三');
  CheckEquals(str, '一二三一二三');
  str := '一二三一二三一二三';
  CheckEquals(mnCutRightBy('欢', str), #254'三');
  CheckEquals(str, '一二三一二三'#210);

  // mnAnsiCutLeftBy
  str := 'abcabcabc';
  CheckEquals(mnAnsiCutLeftBy('bc', str), 'a');
  CheckEquals(str, 'abcabc');
  str := 'abcabcabc';
  CheckEquals(mnAnsiCutLeftBy('BC', str), '');
  CheckEquals(str, 'abcabcabc');
  str := '一二三一二三一二三';
  CheckEquals(mnAnsiCutLeftBy('一二', str), '');
  CheckEquals(str, '三一二三一二三');
  str := '一二三一二三一二三';
  CheckEquals(mnAnsiCutLeftBy('欢', str), '');
  CheckEquals(str, '一二三一二三一二三');

  // mnAnsiCutRightBy
  str := 'abcabcabc';
  CheckEquals(mnAnsiCutRightBy('ab', str), 'c');
  CheckEquals(str, 'abcabc');
  str := 'abcabcabc';
  CheckEquals(mnAnsiCutRightBy('AB', str), '');
  CheckEquals(str, 'abcabcabc');
  str := '一二三一二三一二三';
  CheckEquals(mnAnsiCutRightBy('一二', str), '三');
  CheckEquals(str, '一二三一二三');
  str := '一二三一二三一二三';
  CheckEquals(mnAnsiCutRightBy('欢', str), '');
  CheckEquals(str, '一二三一二三一二三');
end;

procedure TmnStringTestCase.testRemoveLeftRightSeries;
begin
  // mnRemoveLeftChar
  CheckEquals(mnRemoveLeftChar('#', ''), '');
  CheckEquals(mnRemoveLeftChar(':', ':\aaa.'), '\aaa.');
  CheckEquals(mnRemoveLeftChar('A', 'aaa'), 'aaa');
  CheckEquals(mnRemoveLeftChar('a', 'aaa'), 'aa');

  // mnRemoveRightChar
  CheckEquals(mnRemoveRightChar('#', ''), '');
  CheckEquals(mnRemoveRightChar('.', ':\aaa.'), ':\aaa');
  CheckEquals(mnRemoveRightChar('A', 'aaa'), 'aaa');
  CheckEquals(mnRemoveRightChar('a', 'aaa'), 'aa');

  // mnRemoveLeftDelimiter
  CheckEquals(mnRemoveLeftDelimiter('#', ''), '');
  CheckEquals(mnRemoveLeftDelimiter(':.', ':\aaa.'), '\aaa.');
  CheckEquals(mnRemoveLeftDelimiter('A', 'aaa'), 'aaa');
  CheckEquals(mnRemoveLeftDelimiter('a', 'aaa'), 'aa');

  // mnRemoveRightDelimiter
  CheckEquals(mnRemoveRightDelimiter('#', ''), '');
  CheckEquals(mnRemoveRightDelimiter(':.', ':\aaa.'), ':\aaa');
  CheckEquals(mnRemoveRightDelimiter('A', 'aaa'), 'aaa');
  CheckEquals(mnRemoveRightDelimiter('a', 'aaa'), 'aa');

  // mnRemoveLeft
  CheckEquals(mnRemoveLeft('#', ''), '');
  CheckEquals(mnRemoveLeft('abc', 'abcabcabc'), 'abcabc');
  CheckEquals(mnRemoveLeft('ABC', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnRemoveLeft('一二', '一二三一二三一二三'), '三一二三一二三');
  CheckEquals(mnRemoveLeft(#210, '一二三一二三一二三'), #187'二三一二三一二三');

  // mnRemoveRight
  CheckEquals(mnRemoveRight('#', ''), '');
  CheckEquals(mnRemoveRight('abc', 'abcabcabc'), 'abcabc');
  CheckEquals(mnRemoveRight('ABC', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnRemoveRight('二三', '一二三一二三一二三'), '一二三一二三一');
  CheckEquals(mnRemoveRight(#253, '一二三一二三一二三'), '一二三一二三一二'#200);

  // mnAnsiRemoveLeft
  CheckEquals(mnAnsiRemoveLeft('#', ''), '');
  CheckEquals(mnAnsiRemoveLeft('abc', 'abcabcabc'), 'abcabc');
  CheckEquals(mnAnsiRemoveLeft('ABC', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiRemoveLeft('一二', '一二三一二三一二三'), '三一二三一二三');
  CheckEquals(mnAnsiRemoveLeft(#210, '一二三一二三一二三'), #187'二三一二三一二三');

  // mnAnsiRemoveRight
  CheckEquals(mnAnsiRemoveRight('#', ''), '');
  CheckEquals(mnAnsiRemoveRight('abc', 'abcabcabc'), 'abcabc');
  CheckEquals(mnAnsiRemoveRight('ABC', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiRemoveRight('二三', '一二三一二三一二三'), '一二三一二三一');
  CheckEquals(mnAnsiRemoveRight(#253, '一二三一二三一二三'), '一二三一二三一二三');
end;

procedure TmnStringTestCase.testEnsureLeftRightSeries;
begin
  // mnEnsureLeftChar
  CheckEquals(mnEnsureLeftChar('#', ''), '#');
  CheckEquals(mnEnsureLeftChar(':', ':\aaa.'), ':\aaa.');
  CheckEquals(mnEnsureLeftChar('A', 'aaa'), 'Aaaa');
  CheckEquals(mnEnsureLeftChar('a', 'aaa'), 'aaa');

  // mnEnsureRightChar
  CheckEquals(mnEnsureRightChar('#', ''), '#');
  CheckEquals(mnEnsureRightChar('.', ':\aaa.'), ':\aaa.');
  CheckEquals(mnEnsureRightChar('A', 'aaa'), 'aaaA');
  CheckEquals(mnEnsureRightChar('a', 'aaa'), 'aaa');

  // mnEnsureLeft
  CheckEquals(mnEnsureLeft('#', ''), '#');
  CheckEquals(mnEnsureLeft('abc', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnEnsureLeft('ABC', 'abcabcabc'), 'ABCabcabcabc');
  CheckEquals(mnEnsureLeft('一二', '一二三一二三一二三'), '一二三一二三一二三');
  CheckEquals(mnEnsureLeft(#210, '一二三一二三一二三'), '一二三一二三一二三');

  // mnEnsureRight
  CheckEquals(mnEnsureRight('#', ''), '#');
  CheckEquals(mnEnsureRight('abc', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnEnsureRight('ABC', 'abcabcabc'), 'abcabcabcABC');
  CheckEquals(mnEnsureRight('二三', '一二三一二三一二三'), '一二三一二三一二三');
  CheckEquals(mnEnsureRight(#253, '一二三一二三一二三'), '一二三一二三一二三');

  // mnAnsiEnsureLeft
  CheckEquals(mnAnsiEnsureLeft('#', ''), '#');
  CheckEquals(mnAnsiEnsureLeft('abc', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiEnsureLeft('ABC', 'abcabcabc'), 'ABCabcabcabc');
  CheckEquals(mnAnsiEnsureLeft('一二', '一二三一二三一二三'), '一二三一二三一二三');
  CheckEquals(mnAnsiEnsureLeft(#210, '一二三一二三一二三'), '一二三一二三一二三');

  // mnAnsiEnsureRight
  CheckEquals(mnAnsiEnsureRight('#', ''), '#');
  CheckEquals(mnAnsiEnsureRight('abc', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiEnsureRight('ABC', 'abcabcabc'), 'abcabcabcABC');
  CheckEquals(mnAnsiEnsureRight('二三', '一二三一二三一二三'), '一二三一二三一二三');
  CheckEquals(mnAnsiEnsureRight(#253, '一二三一二三一二三'), '一二三一二三一二三'#253);
end;

procedure TmnStringTestCase.testAppendLeftRightIfNotEmptySeries;
begin
  // mnAppendLeftCharIfNotEmpty
  CheckEquals(mnAppendLeftCharIfNotEmpty('#', ''), '');
  CheckEquals(mnAppendLeftCharIfNotEmpty('#', 'aaa'), '#aaa');

  // mnAppendRightCharIfNotEmpty
  CheckEquals(mnAppendRightCharIfNotEmpty('#', ''), '');
  CheckEquals(mnAppendRightCharIfNotEmpty('#', 'aaa'), 'aaa#');

  // mnAppendLeftIfNotEmpty
  CheckEquals(mnAppendLeftIfNotEmpty('bc', ''), '');
  CheckEquals(mnAppendLeftIfNotEmpty('bc', 'aaa'), 'bcaaa');

  // mnAppendRightIfNotEmpty
  CheckEquals(mnAppendRightIfNotEmpty('bc', ''), '');
  CheckEquals(mnAppendRightIfNotEmpty('bc', 'aaa'), 'aaabc');
end;

procedure TmnStringTestCase.testCountSeries;
begin
  // mnCountChar
  CheckEquals(mnCountChar(':', 'C:\aaa.txt'), 1);
  CheckEquals(mnCountChar('A', 'aaa'), 0);
  CheckEquals(mnCountChar('a', 'aaa'), 3);

  // mnCountDelimiter
  CheckEquals(mnCountDelimiter(':.', 'C:\aaa.txt'), 2);
  CheckEquals(mnCountDelimiter('A', 'aaa'), 0);
  CheckEquals(mnCountDelimiter('a', 'aaa'), 3);

  // mnCount
  CheckEquals(mnCount('bc', 'abcabcabc'), 3);
  CheckEquals(mnCount('e', 'abcabcabc'), 0);
  CheckEquals(mnCount('二三', '一二三一二三一二三'), 3);
  CheckEquals(mnCount('欢', '一二三一二三一二三'), 3);

  // mnAnsiCount
  CheckEquals(mnAnsiCount('bc', 'abcabcabc'), 3);
  CheckEquals(mnAnsiCount('e', 'abcabcabc'), 0);
  CheckEquals(mnAnsiCount('二三', '一二三一二三一二三'), 3);
  CheckEquals(mnAnsiCount('欢', '一二三一二三一二三'), 0);
end;

procedure TmnStringTestCase.testDiscardSeries;
begin
  // mnDiscardChar
  CheckEquals(mnDiscardChar(':', 'C:\aaa.txt'), 'C\aaa.txt');
  CheckEquals(mnDiscardChar('A', 'aaa'), 'aaa');
  CheckEquals(mnDiscardChar('a', 'aaa'), '');

  // mnDiscardDelimiter
  CheckEquals(mnDiscardDelimiter(':.', 'C:\aaa.txt'), 'C\aaatxt');
  CheckEquals(mnDiscardDelimiter('A', 'aaa'), 'aaa');
  CheckEquals(mnDiscardDelimiter('a', 'aaa'), '');

  // mnDiscard
  CheckEquals(mnDiscard('bc', 'abcabcabc'), 'aaa');
  CheckEquals(mnDiscard('e', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnDiscard('二三', '一二三一二三一二三'), '一一一');
  CheckEquals(mnDiscard('欢', '一二三一二三一二三'), #210#254'三'#210#254'三'#210#254'三');

  // mnAnsiDiscard
  CheckEquals(mnAnsiDiscard('bc', 'abcabcabc'), 'aaa');
  CheckEquals(mnAnsiDiscard('e', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiDiscard('二三', '一二三一二三一二三'), '一一一');
  CheckEquals(mnAnsiDiscard('欢', '一二三一二三一二三'), '一二三一二三一二三');
end;

procedure TmnStringTestCase.testShrinkSeries;
begin
  // mnShrinkChar
  CheckEquals(mnShrinkChar('a', 'C:\aaa.txt'), 'C:\a.txt');
  CheckEquals(mnShrinkChar('A', 'aaa'), 'aaa');
  CheckEquals(mnShrinkChar('a', 'aaa'), 'a');

  // mnShrinkDelimiter
  CheckEquals(mnShrinkDelimiter(':.a', 'C:\aaa.txt'), 'C:\atxt');
  CheckEquals(mnShrinkDelimiter('A', 'aaa'), 'aaa');
  CheckEquals(mnShrinkDelimiter('a', 'aaa'), 'a');

  // mnShrink
  CheckEquals(mnShrink('bc', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnShrink('abc', 'abcabcabc'), 'abc');
  CheckEquals(mnShrink('e', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnShrink('二三', '一二三二三一二三'), '一二三一二三');
  CheckEquals(mnShrink('欢', '一痘痘痘二三'), '一二三');

  // mnAnsiShrink
  CheckEquals(mnAnsiShrink('bc', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiShrink('abc', 'abcabcabc'), 'abc');
  CheckEquals(mnAnsiShrink('e', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnAnsiShrink('二三', '一二三二三一二三'), '一二三一二三');
  CheckEquals(mnAnsiShrink('欢', '一痘痘痘二三'), '一痘痘痘二三');
end;

procedure TmnStringTestCase.testTrimSeries;
begin
  // mnTrim
  CheckEquals(mnTrim('a', 'aaabcabcabcaa'), 'bcabcabc');
  CheckEquals(mnTrim('bc', 'abcabcabcbc'), 'abcabca');
  CheckEquals(mnTrim('e', 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnTrim('二三', '一二三二三一二三'), '一二三二三一');
  CheckEquals(mnTrim(#210, '一二三二三一二三'), #187'二三二三一二三');

  // mnTrimStrs
  CheckEquals(mnTrimStrs(['a'], 'aaabcabcabcaa'), 'bcabcabc');
  CheckEquals(mnTrimStrs(['a', 'bc'], 'abcabcabc'), '');
  CheckEquals(mnTrimStrs(['a', 'bc', 'e'], 'abcabzcabc'), 'bzc');
  CheckEquals(mnTrimStrs(['e'], 'abcabcabc'), 'abcabcabc');
  CheckEquals(mnTrimStrs(['二三'], '一二三二三一二三'), '一二三二三一');
  CheckEquals(mnTrimStrs([#210], '一二三二三一二三'), #187'二三二三一二三');
end;

procedure TmnStringTestCase.testExpandLeftRight;
begin
  // mnExpandLeft
  CheckEquals(mnExpandLeft('123', 5, ' '), '  123');
  CheckEquals(mnExpandLeft('123', 2, ' '), '123');

  // mnExpandRight
  CheckEquals(mnExpandRight('123', 5, '0'), '12300');
  CheckEquals(mnExpandRight('123', 2, '0'), '123');
end;

procedure TmnStringTestCase.testExpandInt;
begin
  CheckEquals(mnExpandInt(123, 5), '00123');
  CheckEquals(mnExpandInt(123, 2), '123');
end;

procedure TmnStringTestCase.testCompareStr;
begin
  Check(mnCompareStr('一二三', '一二三', [scoCaseSensitive, scoWholdWordOnly]));
  CheckFalse(mnCompareStr('一二三', '二', [scoCaseSensitive, scoWholdWordOnly]));
  CheckFalse(mnCompareStr('一二三', '欢', [scoCaseSensitive, scoWholdWordOnly]));
  Check(mnCompareStr('aaa', 'aaa', [scoCaseSensitive, scoWholdWordOnly]));
  CheckFalse(mnCompareStr('AAA', 'aaa', [scoCaseSensitive, scoWholdWordOnly]));

  Check(mnCompareStr('一二三', '一二三', [scoCaseSensitive]));
  Check(mnCompareStr('一二三', '二', [scoCaseSensitive]));
  CheckFalse(mnCompareStr('一二三', '欢', [scoCaseSensitive]));
  Check(mnCompareStr('aaa', 'aaa', [scoCaseSensitive]));
  CheckFalse(mnCompareStr('AAA', 'aaa', [scoCaseSensitive]));

  Check(mnCompareStr('一二三', '一二三', [scoWholdWordOnly]));
  CheckFalse(mnCompareStr('一二三', '二', [scoWholdWordOnly]));
  CheckFalse(mnCompareStr('一二三', '欢', [scoWholdWordOnly]));
  Check(mnCompareStr('aaa', 'aaa', [scoWholdWordOnly]));
  Check(mnCompareStr('AAA', 'aaa', [scoWholdWordOnly]));

  Check(mnCompareStr('一二三', '一二三', []));
  Check(mnCompareStr('一二三', '二', []));
  CheckFalse(mnCompareStr('一二三', '欢', []));
  Check(mnCompareStr('aaa', 'aaa', []));
  Check(mnCompareStr('AAA', 'aaa', []));
end;

procedure TmnStringTestCase.testCompareStrInNumberStyle;
begin
  CheckEquals(mnCompareStrInNumberStyle('1aaa', '2aaa'), -1);
  CheckEquals(mnCompareStrInNumberStyle('10aaa', '2aaa'), 1);
  CheckEquals(mnCompareStrInNumberStyle('1aaa', 'aaa'), -1);
  CheckEquals(mnCompareStrInNumberStyle('aaa', '2aaa'), 1);
  CheckEquals(mnCompareStrInNumberStyle('aaa', 'bbb'), -1);
end;

procedure TmnStringTestCase.testReplaceStr;
begin
  CheckEquals(mnReplaceStr('abcabcabc', 'bc', 'xx'), 'axxaxxaxx');
  CheckEquals(mnReplaceStr('abcabcabc', 'e', 'xx'), 'abcabcabc');
  CheckEquals(mnReplaceStr('一二三一二三一二三', '二三', '我'), '一我一我一我');
  CheckEquals(mnReplaceStr('一二三一二三一二三', '欢', '我'), #210'我'#254'三'#210'我'#254'三'#210'我'#254'三');

  CheckEquals(mnReplaceStr('abcc', 'bc', 'b'), 'abc');
end;

procedure TmnStringTestCase.testReplaceStrWholeWord;
begin
  CheckEquals(mnReplaceStrWholeWord('bc a bc a bc', 'bc', 'xx'), 'xx a xx a xx');
  CheckEquals(mnReplaceStrWholeWord('_bc abc bca bc_', 'bc', 'xx'), '_bc abc bca bc_');
  CheckEquals(mnReplaceStrWholeWord('_bc. abc. bc.a bc._', 'bc.', 'xx.'), '_bc. abc. xx.a xx._');
  CheckEquals(mnReplaceStrWholeWord('_.bc a.bc .bca .bc_', '.bc', '.xx'), '_.xx a.xx .bca .bc_');

  CheckEquals(mnReplaceStrWholeWord('abcabcabc', 'bc', 'xx'), 'abcabcabc');
  CheckEquals(mnReplaceStrWholeWord('abcabcabc', 'e', 'xx'), 'abcabcabc');
  CheckEquals(mnReplaceStrWholeWord('一二三一二三一二三', '二三', '我'), '一我一我一我');
  CheckEquals(mnReplaceStrWholeWord('一二三一二三一二三', '欢', '我'), #210'我'#254'三'#210'我'#254'三'#210'我'#254'三');

  CheckEquals(mnReplaceStrWholeWord('a.bc.c.', 'bc.', 'b'), 'a.bc.');
end;

procedure TmnStringTestCase.testReplaceStrOnce;
begin
  CheckEquals(mnReplaceStrOnce('abcabcabc', 'bc', 'xx'), 'axxabcabc');
  CheckEquals(mnReplaceStrOnce('abcabcabc', 'e', 'xx'), 'abcabcabc');
  CheckEquals(mnReplaceStrOnce('一二三一二三一二三', '二三', '我'), '一我一二三一二三');
  CheckEquals(mnReplaceStrOnce('一二三一二三一二三', '欢', '我'), #210'我'#254'三一二三一二三');
end;

procedure TmnStringTestCase.testFindStrBetween;
var
  SubstrHeadPos, SubstrTailPos: Integer;
  SubStrBody: string;
begin
  // mnFindStrBetween, overload form 1
  Check(mnFindStrBetween('abcabcabc', 'a', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckEquals(SubstrHeadPos, 1);
  CheckEquals(SubstrTailPos, 4);
  CheckEquals(SubStrBody, 'b');

  Check(mnFindStrBetween('abcabcabc', 'b', 'a', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckEquals(SubstrHeadPos, 2);
  CheckEquals(SubstrTailPos, 5);
  CheckEquals(SubStrBody, 'c');

  Check(mnFindStrBetween('abcabcabc', 'b', 'a', SubstrHeadPos, SubstrTailPos, SubStrBody, 4));
  CheckEquals(SubstrHeadPos, 5);
  CheckEquals(SubstrTailPos, 8);
  CheckEquals(SubStrBody, 'c');

  CheckFalse(mnFindStrBetween('abcabcabc', 'c', 'd', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckFalse(mnFindStrBetween('abcabcabc', 'd', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckFalse(mnFindStrBetween('abcabcabc', 'a', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody, 0));
  CheckFalse(mnFindStrBetween('abcabcabc', 'a', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody, 10));

  Check(mnFindStrBetween('一二三一二三', '欢', '三', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckEquals(SubstrHeadPos, 2);
  CheckEquals(SubstrTailPos, 7);
  CheckEquals(SubStrBody, #254);

  // mnFindStrBetween, overload form 2
  Check(mnFindStrBetween('abcabcabc', 'a', 'c', SubStrBody));
  CheckEquals(SubStrBody, 'b');

  // mnAnsiFindStrBetween, overload form 1
  Check(mnAnsiFindStrBetween('abcabcabc', 'a', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckEquals(SubstrHeadPos, 1);
  CheckEquals(SubstrTailPos, 4);
  CheckEquals(SubStrBody, 'b');

  Check(mnAnsiFindStrBetween('abcabcabc', 'b', 'a', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckEquals(SubstrHeadPos, 2);
  CheckEquals(SubstrTailPos, 5);
  CheckEquals(SubStrBody, 'c');

  Check(mnAnsiFindStrBetween('abcabcabc', 'b', 'a', SubstrHeadPos, SubstrTailPos, SubStrBody, 4));
  CheckEquals(SubstrHeadPos, 5);
  CheckEquals(SubstrTailPos, 8);
  CheckEquals(SubStrBody, 'c');

  CheckFalse(mnAnsiFindStrBetween('abcabcabc', 'c', 'd', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckFalse(mnAnsiFindStrBetween('abcabcabc', 'd', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody));
  CheckFalse(mnAnsiFindStrBetween('abcabcabc', 'a', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody, 0));
  CheckFalse(mnAnsiFindStrBetween('abcabcabc', 'a', 'c', SubstrHeadPos, SubstrTailPos, SubStrBody, 10));

  CheckFalse(mnAnsiFindStrBetween('一二三一二三', '欢', '三', SubstrHeadPos, SubstrTailPos, SubStrBody));

  // mnAnsiFindStrBetween, overload form 2
  Check(mnAnsiFindStrBetween('abcabcabc', 'a', 'c', SubStrBody));
  CheckEquals(SubStrBody, 'b');
end;

procedure TmnStringTestCase.testReplaceStrBetween;
var
  strs: mnTStrList;
begin
  // mnReplaceStrBetween, overload form 1 and 3
  CheckEquals(mnReplaceStrBetween('abcabcabc', 'a', 'c', 'e'), 'eee');
  CheckEquals(mnReplaceStrBetween('dabcdabcdabcd', 'a', 'c', 'e'), 'dededed');
  CheckEquals(mnReplaceStrBetween('abcabcd', 'abc', 'bc', 'e'), 'ed');
  CheckEquals(mnReplaceStrBetween('abcabcAbC', 'A', 'C', 'e'), 'abcabce');
  CheckEquals(mnReplaceStrBetween('abcabcabc', 'c', 'd', 'e'), 'abcabcabc');
  CheckEquals(mnReplaceStrBetween('一二三一二三', '欢', '三', 'e'), #210'e'#210'e');
  CheckEquals(mnReplaceStrBetween('a```b```c', 'e'), 'aec');

  // mnReplaceStrBetween, overload form 2 and 4
  strs := mnTStrList.Create;
  try
    strs.Text := 'b=3';
    CheckEquals(mnReplaceStrBetween('abcabcabc', 'a', 'c', strs), '333');
    strs.Text := 'a=3';
    CheckEquals(mnReplaceStrBetween('abcabcd', 'abc', 'bc', strs), '3d');
    strs.Text := 'x=3';
    CheckEquals(mnReplaceStrBetween('abcabcd', 'abc', 'bc', strs), 'd');
    strs.Text := 'B=3';
    CheckEquals(mnReplaceStrBetween('abcabcabc', 'a', 'c', strs), '333');
    strs.Text := 'b=3';
    CheckEquals(mnReplaceStrBetween('abcabcabc', 'c', 'd', strs), 'abcabcabc');
    strs.Text := 'b=e';
    CheckEquals(mnReplaceStrBetween('a```b```c', strs), 'aec');
  finally
    strs.Free;
  end;

  // mnAnsiReplaceStrBetween, overload form 1 and 3
  CheckEquals(mnAnsiReplaceStrBetween('abcabcabc', 'a', 'c', 'e'), 'eee');
  CheckEquals(mnAnsiReplaceStrBetween('dabcdabcdabcd', 'a', 'c', 'e'), 'dededed');
  CheckEquals(mnAnsiReplaceStrBetween('abcabcd', 'abc', 'bc', 'e'), 'ed');
  CheckEquals(mnAnsiReplaceStrBetween('abcabcAbC', 'A', 'C', 'e'), 'abcabce');
  CheckEquals(mnAnsiReplaceStrBetween('abcabcabc', 'c', 'd', 'e'), 'abcabcabc');
  CheckEquals(mnAnsiReplaceStrBetween('一二三一二三', '欢', '三', 'e'), '一二三一二三');
  CheckEquals(mnAnsiReplaceStrBetween('a```b```c', 'e'), 'aec');

  // mnAnsiReplaceStrBetween, overload form 2 and 4
  strs := mnTStrList.Create;
  try
    strs.Text := 'b=3';
    CheckEquals(mnAnsiReplaceStrBetween('abcabcabc', 'a', 'c', strs), '333');
    strs.Text := 'a=3';
    CheckEquals(mnAnsiReplaceStrBetween('abcabcd', 'abc', 'bc', strs), '3d');
    strs.Text := 'x=3';
    CheckEquals(mnAnsiReplaceStrBetween('abcabcd', 'abc', 'bc', strs), 'd');
    strs.Text := 'B=3';
    CheckEquals(mnAnsiReplaceStrBetween('abcabcabc', 'a', 'c', strs), '333');
    strs.Text := 'b=3';
    CheckEquals(mnAnsiReplaceStrBetween('abcabcabc', 'c', 'd', strs), 'abcabcabc');
    strs.Text := 'b=e';
    CheckEquals(mnAnsiReplaceStrBetween('a```b```c', strs), 'aec');
  finally
    strs.Free;
  end;
end;

procedure TmnStringTestCase.testSplit;
var
  strs: mnTStrList;
begin
  strs := mnTStrList.Create;
  try
    // mnSplit
    CheckEquals(mnSplit('bcabc', strs, 'a'), 2);
    CheckEquals(strs.Count, 2);
    CheckEquals(strs[0], 'bc');
    CheckEquals(strs[1], 'bc');

    strs.Clear;
    CheckEquals(mnSplit('abcabca', strs, 'a', True), 2);
    CheckEquals(strs.Count, 2);
    CheckEquals(strs[0], 'bc');
    CheckEquals(strs[1], 'bc');

    strs.Clear;
    CheckEquals(mnSplit('一二三一二三', strs, '欢'), 3);
    CheckEquals(strs.Count, 3);
    CheckEquals(strs[0], #210);
    CheckEquals(strs[1], #254'三'#210);
    CheckEquals(strs[2], #254'三');

    strs.Clear;
    CheckEquals(mnSplit('', strs, 'a'), 1);
    CheckEquals(strs.Count, 1);
    CheckEquals(strs[0], '');

    strs.Clear;
    CheckEquals(mnSplit('aa', strs, 'a', True), 1);
    CheckEquals(strs.Count, 1);
    CheckEquals(strs[0], '');

    try
      mnSplit('abc', strs, 'a', True);
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SSplitWithoutBorder, ['abc']));
    end;

    // mnAnsiSplit
    strs.Clear;
    CheckEquals(mnAnsiSplit('bcabc', strs, 'a'), 2);
    CheckEquals(strs.Count, 2);
    CheckEquals(strs[0], 'bc');
    CheckEquals(strs[1], 'bc');

    strs.Clear;
    CheckEquals(mnAnsiSplit('abcabca', strs, 'a', True), 2);
    CheckEquals(strs.Count, 2);
    CheckEquals(strs[0], 'bc');
    CheckEquals(strs[1], 'bc');

    strs.Clear;
    CheckEquals(mnAnsiSplit('一二三一二三', strs, '欢'), 1);
    CheckEquals(strs.Count, 1);
    CheckEquals(strs[0], '一二三一二三');

    try
      mnAnsiSplit('abc', strs, 'a', True);
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SSplitWithoutBorder, ['abc']));
    end;
  finally
    strs.Free;
  end;
end;

procedure TmnStringTestCase.testSplitBetween;
var
  SplitedStrs, SeparatorBodies: mnTStrList;
begin
  SplitedStrs := mnTStrList.Create;
  SeparatorBodies := mnTStrList.Create;
  try
    // mnSplitBetween
    CheckEquals(mnSplitBetween('abcdefg', SplitedStrs, SeparatorBodies, 'bc', 'ef'), 2);
    CheckEquals(SplitedStrs.Count, 2);
    CheckEquals(SplitedStrs[0], 'a');
    CheckEquals(SplitedStrs[1], 'g');
    CheckEquals(SeparatorBodies.Count, 1);
    CheckEquals(SeparatorBodies[0], 'd');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnSplitBetween('abcaec', SplitedStrs, SeparatorBodies, 'a', 'c'), 3);
    CheckEquals(SplitedStrs.Count, 3);
    CheckEquals(SplitedStrs[0], '');
    CheckEquals(SplitedStrs[1], '');
    CheckEquals(SplitedStrs[2], '');
    CheckEquals(SeparatorBodies.Count, 2);
    CheckEquals(SeparatorBodies[0], 'b');
    CheckEquals(SeparatorBodies[1], 'e');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnSplitBetween('abcabcd', SplitedStrs, SeparatorBodies, 'bc', 'bc'), 2);
    CheckEquals(SplitedStrs.Count, 2);
    CheckEquals(SplitedStrs[0], 'a');
    CheckEquals(SplitedStrs[1], 'd');
    CheckEquals(SeparatorBodies.Count, 1);
    CheckEquals(SeparatorBodies[0], 'a');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnSplitBetween('一二三一二三一二三', SplitedStrs, SeparatorBodies, '欢', '二'), 2);
    CheckEquals(SplitedStrs.Count, 2);
    CheckEquals(SplitedStrs[0], #210);
    CheckEquals(SplitedStrs[1], '三一二三');
    CheckEquals(SeparatorBodies.Count, 1);
    CheckEquals(SeparatorBodies[0], #254'三一');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnSplitBetween('abcdefg', SplitedStrs, SeparatorBodies, 'bc', 'hi'), 1);
    CheckEquals(SplitedStrs.Count, 1);
    CheckEquals(SplitedStrs[0], 'abcdefg');
    CheckEquals(SeparatorBodies.Count, 0);

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnSplitBetween('', SplitedStrs, SeparatorBodies, 'a', 'b'), 1);
    CheckEquals(SplitedStrs.Count, 1);
    CheckEquals(SplitedStrs[0], '');
    CheckEquals(SeparatorBodies.Count, 0);

    // mnAnsiSplitBetween
    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnAnsiSplitBetween('abcdefg', SplitedStrs, SeparatorBodies, 'bc', 'ef'), 2);
    CheckEquals(SplitedStrs.Count, 2);
    CheckEquals(SplitedStrs[0], 'a');
    CheckEquals(SplitedStrs[1], 'g');
    CheckEquals(SeparatorBodies.Count, 1);
    CheckEquals(SeparatorBodies[0], 'd');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnAnsiSplitBetween('abcaec', SplitedStrs, SeparatorBodies, 'a', 'c'), 3);
    CheckEquals(SplitedStrs.Count, 3);
    CheckEquals(SplitedStrs[0], '');
    CheckEquals(SplitedStrs[1], '');
    CheckEquals(SplitedStrs[2], '');
    CheckEquals(SeparatorBodies.Count, 2);
    CheckEquals(SeparatorBodies[0], 'b');
    CheckEquals(SeparatorBodies[1], 'e');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnAnsiSplitBetween('abcabcd', SplitedStrs, SeparatorBodies, 'bc', 'bc'), 2);
    CheckEquals(SplitedStrs.Count, 2);
    CheckEquals(SplitedStrs[0], 'a');
    CheckEquals(SplitedStrs[1], 'd');
    CheckEquals(SeparatorBodies.Count, 1);
    CheckEquals(SeparatorBodies[0], 'a');

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnAnsiSplitBetween('一二三一二三一二三', SplitedStrs, SeparatorBodies, '欢', '二'), 1);
    CheckEquals(SplitedStrs.Count, 1);
    CheckEquals(SplitedStrs[0], '一二三一二三一二三');
    CheckEquals(SeparatorBodies.Count, 0);

    SplitedStrs.Clear;
    SeparatorBodies.Clear;
    CheckEquals(mnAnsiSplitBetween('abcdefg', SplitedStrs, SeparatorBodies, 'bc', 'hi'), 1);
    CheckEquals(SplitedStrs.Count, 1);
    CheckEquals(SplitedStrs[0], 'abcdefg');
    CheckEquals(SeparatorBodies.Count, 0);
  finally
    SplitedStrs.Free;
    SeparatorBodies.Free;
  end;
end;

procedure TmnStringTestCase.testSplitByLen;
var
  strs: mnTStrList;
begin
  strs := mnTStrList.Create;
  try
    CheckEquals(mnSplitByLen('abcdef', strs, 3), 2);
    CheckEquals(strs[0], 'abc');
    CheckEquals(strs[1], 'def');

    strs.Clear;
    CheckEquals(mnSplitByLen('abcde', strs, 2), 3);
    CheckEquals(strs[0], 'ab');
    CheckEquals(strs[1], 'cd');
    CheckEquals(strs[2], 'e');

    strs.Clear;
    CheckEquals(mnSplitByLen('欢', strs, 1), 2);
    CheckEquals(strs[0], #187);
    CheckEquals(strs[1], #182);

    strs.Clear;
    CheckEquals(mnSplitByLen('欢', strs, 3), 1);
    CheckEquals(strs[0], '欢');

    strs.Clear;
    CheckEquals(mnSplitByLen('', strs, 3), 1);
    CheckEquals(strs[0], '');

    try
      mnSplitByLen('abcde', strs, 0);
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SSplittedLenNegative, [0]));
    end;
  finally
    strs.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_ParsePattern;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    CheckEquals('', StringPattern.Pattern);
    CheckEquals(0, StringPattern.PatternSections.Count);
    CheckEquals(0, StringPattern.PatternParams.Count);
    CheckFalse(StringPattern.PatternParsed);

    StringPattern.Pattern := '1```ParamA```2```ParamB```3```ParamC```';
    StringPattern.ParsePattern;
    CheckEquals('1```ParamA```2```ParamB```3```ParamC```', StringPattern.Pattern);
    CheckEquals(4, StringPattern.PatternSections.Count);
    CheckEquals('1', StringPattern.PatternSections[0]);
    CheckEquals('2', StringPattern.PatternSections[1]);
    CheckEquals('3', StringPattern.PatternSections[2]);
    CheckEquals('', StringPattern.PatternSections[3]);
    CheckEquals(3, StringPattern.PatternParams.Count);
    CheckEquals('ParamA', StringPattern.PatternParams[0]);
    CheckEquals('ParamB', StringPattern.PatternParams[1]);
    CheckEquals('ParamC', StringPattern.PatternParams[2]);
    CheckTrue(StringPattern.PatternParsed);
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_AnsiParsePattern;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    CheckEquals('', StringPattern.Pattern);
    CheckEquals(0, StringPattern.PatternSections.Count);
    CheckEquals(0, StringPattern.PatternParams.Count);
    CheckFalse(StringPattern.PatternParsed);

    StringPattern.Pattern := '一二三欢ParamA欢一二三欢ParamB欢一二三欢ParamC欢';
    StringPattern.ParamHead := '欢';
    StringPattern.ParamTail := '欢';
    StringPattern.AnsiParsePattern;
    CheckEquals('一二三欢ParamA欢一二三欢ParamB欢一二三欢ParamC欢', StringPattern.Pattern);
    CheckEquals(4, StringPattern.PatternSections.Count);
    CheckEquals('一二三', StringPattern.PatternSections[0]);
    CheckEquals('一二三', StringPattern.PatternSections[1]);
    CheckEquals('一二三', StringPattern.PatternSections[2]);
    CheckEquals('', StringPattern.PatternSections[3]);
    CheckEquals(3, StringPattern.PatternParams.Count);
    CheckEquals('ParamA', StringPattern.PatternParams[0]);
    CheckEquals('ParamB', StringPattern.PatternParams[1]);
    CheckEquals('ParamC', StringPattern.PatternParams[2]);
    CheckTrue(StringPattern.PatternParsed);
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_LoadPatternFromFile;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    mnSaveStrToFile('```Param```', mnTProjectConvention.GetTestTempPathSub('StringPattern.txt'));
    StringPattern.LoadPatternFromFile(mnTProjectConvention.GetTestTempPathSub('StringPattern.txt'));
    CheckEquals('```Param```', StringPattern.Pattern);
    mnDeleteFile(mnTProjectConvention.GetTestTempPathSub('StringPattern.txt'));
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_GetParamValueSeries;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := '```ParamStr```,```ParamInt```,```ParamFloat```,```ParamDT```,```ParamCurr```';
    Check(StringPattern.Match(Str_0 + ',' + Str_Of_Int_0 + ',' + Str_Of_Float_0 + ',' + Str_Of_DT_0 + ',' + Str_Of_Curr_0));
    CheckEquals(StringPattern.ParamPairs.Count, 5);
    CheckEquals(StringPattern.ParamValue['ParamStr'], Str_0);
    CheckEquals(StringPattern.ParamValueAsInt['ParamInt'], Int_0);
    CheckEquals(StringPattern.ParamValueAsFloat['ParamFloat'], Float_0);
    CheckEquals(StringPattern.ParamValueAsDT['ParamDT'], DT_0, mnParticle);
    CheckEquals(StringPattern.ParamValueAsCurr['ParamCurr'], Curr_0);
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_ClearParamPairs;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := '```Param```';
    Check(StringPattern.Match('a'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'Param=a');
    StringPattern.ClearParamPairs;
    CheckEquals(StringPattern.ParamPairs.Count, 0);
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_Match;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := 'i am a %mykind%, and he is a %hiskind%.';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    Check(StringPattern.Match('i am a dog, and he is a rabbit.'));
    CheckEquals(StringPattern.PatternSections.Count, 3);
    CheckEquals(StringPattern.PatternSections[0], 'i am a ');
    CheckEquals(StringPattern.PatternSections[1], ', and he is a ');
    CheckEquals(StringPattern.PatternSections[2], '.');
    CheckEquals(StringPattern.PatternParams.Count, 2);
    CheckEquals(StringPattern.PatternParams[0], 'mykind');
    CheckEquals(StringPattern.PatternParams[1], 'hiskind');
    CheckEquals(StringPattern.PatternParsed, True);
    CheckEquals(StringPattern.WorkStr, 'i am a dog, and he is a rabbit.');
    CheckEquals(StringPattern.ParamPairs.Count, 2);
    CheckEquals(StringPattern.ParamPairs[0], 'mykind=dog');
    CheckEquals(StringPattern.ParamPairs[1], 'hiskind=rabbit');

    StringPattern.Pattern := '我是<我的名字>，他是<他的名字>。';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    Check(StringPattern.Match('我是张三，他是李四。'));
    CheckEquals(StringPattern.PatternSections.Count, 3);
    CheckEquals(StringPattern.PatternSections[0], '我是');
    CheckEquals(StringPattern.PatternSections[1], '，他是');
    CheckEquals(StringPattern.PatternSections[2], '。');
    CheckEquals(StringPattern.PatternParams.Count, 2);
    CheckEquals(StringPattern.PatternParams[0], '我的名字');
    CheckEquals(StringPattern.PatternParams[1], '他的名字');
    CheckEquals(StringPattern.PatternParsed, True);
    CheckEquals(StringPattern.WorkStr, '我是张三，他是李四。');
    CheckEquals(StringPattern.ParamPairs.Count, 2);
    CheckEquals(StringPattern.ParamPairs[0], '我的名字=张三');
    CheckEquals(StringPattern.ParamPairs[1], '他的名字=李四');

    StringPattern.AutoClearPairs := False;
    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.Match('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.Match('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.Match('abcde'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    CheckFalse(StringPattern.Match('abcdefg'));

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.Match('abcdefg'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=fg');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    Check(StringPattern.Match('xd'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'a=x');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcd';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'd';
    Check(StringPattern.Match('!@#$%'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'bc=!@#$%');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a```Param```e';
    StringPattern.ParamHead := mnStdSeparator1;
    StringPattern.ParamTail := mnStdSeparator1;
    Check(StringPattern.Match('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'Param=bcd');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a<1>b<2>c<3>d';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    CheckFalse(StringPattern.Match('a1b2d'));

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := '<1>欢<2>';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    Check(StringPattern.Match('一二三'));
    CheckEquals(StringPattern.ParamPairs.Count, 2);
    CheckEquals(StringPattern.ParamPairs[0], '1='#210);
    CheckEquals(StringPattern.ParamPairs[1], '2='#254'三');

    try
      StringPattern.Pattern := 'a%x%%y%c';
      StringPattern.ParamHead := '%';
      StringPattern.ParamTail := '%';
      Check(StringPattern.Match('abc'));
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SContinuousTwoParams, ['a%x%%y%c']));
    end;
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_AnsiMatch;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := 'i am a %mykind%, and he is a %hiskind%.';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    Check(StringPattern.AnsiMatch('i am a dog, and he is a rabbit.'));
    CheckEquals(StringPattern.PatternSections.Count, 3);
    CheckEquals(StringPattern.PatternSections[0], 'i am a ');
    CheckEquals(StringPattern.PatternSections[1], ', and he is a ');
    CheckEquals(StringPattern.PatternSections[2], '.');
    CheckEquals(StringPattern.PatternParams.Count, 2);
    CheckEquals(StringPattern.PatternParams[0], 'mykind');
    CheckEquals(StringPattern.PatternParams[1], 'hiskind');
    CheckEquals(StringPattern.PatternParsed, True);
    CheckEquals(StringPattern.WorkStr, 'i am a dog, and he is a rabbit.');
    CheckEquals(StringPattern.ParamPairs.Count, 2);
    CheckEquals(StringPattern.ParamPairs[0], 'mykind=dog');
    CheckEquals(StringPattern.ParamPairs[1], 'hiskind=rabbit');

    StringPattern.Pattern := '我是<我的名字>，他是<他的名字>。';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    Check(StringPattern.AnsiMatch('我是张三，他是李四。'));
    CheckEquals(StringPattern.PatternSections.Count, 3);
    CheckEquals(StringPattern.PatternSections[0], '我是');
    CheckEquals(StringPattern.PatternSections[1], '，他是');
    CheckEquals(StringPattern.PatternSections[2], '。');
    CheckEquals(StringPattern.PatternParams.Count, 2);
    CheckEquals(StringPattern.PatternParams[0], '我的名字');
    CheckEquals(StringPattern.PatternParams[1], '他的名字');
    CheckEquals(StringPattern.PatternParsed, True);
    CheckEquals(StringPattern.WorkStr, '我是张三，他是李四。');
    CheckEquals(StringPattern.ParamPairs.Count, 2);
    CheckEquals(StringPattern.ParamPairs[0], '我的名字=张三');
    CheckEquals(StringPattern.ParamPairs[1], '他的名字=李四');

    StringPattern.AutoClearPairs := False;
    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.AnsiMatch('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.AnsiMatch('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.AnsiMatch('abcde'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    CheckFalse(StringPattern.AnsiMatch('abcdefg'));

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.AnsiMatch('abcdefg'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=fg');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    Check(StringPattern.AnsiMatch('xd'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'a=x');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcd';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'd';
    Check(StringPattern.AnsiMatch('!@#$%'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'bc=!@#$%');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a```Param```e';
    StringPattern.ParamHead := mnStdSeparator1;
    StringPattern.ParamTail := mnStdSeparator1;
    Check(StringPattern.AnsiMatch('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'Param=bcd');

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a<1>b<2>c<3>d';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    CheckFalse(StringPattern.AnsiMatch('a1b2d'));

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := '<1>欢<2>';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    CheckFalse(StringPattern.AnsiMatch('一二三'));

    try
      StringPattern.Pattern := 'a%x%%y%c';
      StringPattern.ParamHead := '%';
      StringPattern.ParamTail := '%';
      Check(StringPattern.AnsiMatch('abc'));
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SContinuousTwoParams, ['a%x%%y%c']));
    end;
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_MatchSubAndNextSub;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := '<%goodsname% price="%price%" quantity="%quantity%">';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    Check(StringPattern.MatchSub('<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">'));
    CheckEquals(StringPattern.PatternSections.Count, 4);
    CheckEquals(StringPattern.PatternSections[0], '<');
    CheckEquals(StringPattern.PatternSections[1], ' price="');
    CheckEquals(StringPattern.PatternSections[2], '" quantity="');
    CheckEquals(StringPattern.PatternSections[3], '">');
    CheckEquals(StringPattern.PatternParams.Count, 3);
    CheckEquals(StringPattern.PatternParams[0], 'goodsname');
    CheckEquals(StringPattern.PatternParams[1], 'price');
    CheckEquals(StringPattern.PatternParams[2], 'quantity');
    CheckEquals(StringPattern.PatternParsed, True);
    CheckEquals(StringPattern.WorkStr, '<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">');
    CheckEquals(StringPattern.ParamPairs.Count, 3);
    CheckEquals(StringPattern.ParamPairs[0], 'goodsname=cocacola');
    CheckEquals(StringPattern.ParamPairs[1], 'price=1.25');
    CheckEquals(StringPattern.ParamPairs[2], 'quantity=50');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, Length('<cocacola price="1.25" quantity="50">') + 1);

    Check(StringPattern.MatchNextSub);
    CheckEquals(StringPattern.ParamPairs.Count, 3);
    CheckEquals(StringPattern.ParamPairs[0], 'goodsname=adidas');
    CheckEquals(StringPattern.ParamPairs[1], 'price=340');
    CheckEquals(StringPattern.ParamPairs[2], 'quantity=4');
    CheckEquals(StringPattern.PartBeginPos, Length('<cocacola price="1.25" quantity="50">') + 1);
    CheckEquals(StringPattern.PartEndPos, Length('<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">') + 1);

    CheckFalse(StringPattern.MatchNextSub);

    StringPattern.Pattern := 'b%c%d';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    Check(StringPattern.MatchSub('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'c=c');
    CheckEquals(StringPattern.PartBeginPos, 2);
    CheckEquals(StringPattern.PartEndPos, 5);

    StringPattern.AutoClearPairs := False;
    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.MatchSub('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.MatchSub('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.MatchSub('abcde'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.MatchSub('abcdefg'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.MatchSub('abcdefg'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=fg');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 8);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    Check(StringPattern.MatchSub('xd'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'a=x');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 3);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcd';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'd';
    Check(StringPattern.MatchSub('!@#$%'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'bc=!@#$%');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a```Param```e';
    StringPattern.ParamHead := mnStdSeparator1;
    StringPattern.ParamTail := mnStdSeparator1;
    Check(StringPattern.MatchSub('!abcde@'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'Param=bcd');
    CheckEquals(StringPattern.PartBeginPos, 2);
    CheckEquals(StringPattern.PartEndPos, 7);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a<1>b<2>c<3>d';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    CheckFalse(StringPattern.MatchSub('a1b2d'));

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := '<1>欢<2>';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    Check(StringPattern.MatchSub('一二三'));
    CheckEquals(StringPattern.ParamPairs.Count, 2);
    CheckEquals(StringPattern.ParamPairs[0], '1='#210);
    CheckEquals(StringPattern.ParamPairs[1], '2='#254'三');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 7);

    try
      StringPattern.Pattern := 'a%x%%y%c';
      StringPattern.ParamHead := '%';
      StringPattern.ParamTail := '%';
      Check(StringPattern.MatchSub('abc'));
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SContinuousTwoParams, ['a%x%%y%c']));
    end;
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_AnsiMatchSubAndNextSub;
var
  StringPattern: mnTStringPattern;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := '<%goodsname% price="%price%" quantity="%quantity%">';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    Check(StringPattern.AnsiMatchSub('<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">'));
    CheckEquals(StringPattern.PatternSections.Count, 4);
    CheckEquals(StringPattern.PatternSections[0], '<');
    CheckEquals(StringPattern.PatternSections[1], ' price="');
    CheckEquals(StringPattern.PatternSections[2], '" quantity="');
    CheckEquals(StringPattern.PatternSections[3], '">');
    CheckEquals(StringPattern.PatternParams.Count, 3);
    CheckEquals(StringPattern.PatternParams[0], 'goodsname');
    CheckEquals(StringPattern.PatternParams[1], 'price');
    CheckEquals(StringPattern.PatternParams[2], 'quantity');
    CheckEquals(StringPattern.PatternParsed, True);
    CheckEquals(StringPattern.WorkStr, '<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">');
    CheckEquals(StringPattern.ParamPairs.Count, 3);
    CheckEquals(StringPattern.ParamPairs[0], 'goodsname=cocacola');
    CheckEquals(StringPattern.ParamPairs[1], 'price=1.25');
    CheckEquals(StringPattern.ParamPairs[2], 'quantity=50');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, Length('<cocacola price="1.25" quantity="50">') + 1);

    Check(StringPattern.AnsiMatchNextSub);
    CheckEquals(StringPattern.ParamPairs.Count, 3);
    CheckEquals(StringPattern.ParamPairs[0], 'goodsname=adidas');
    CheckEquals(StringPattern.ParamPairs[1], 'price=340');
    CheckEquals(StringPattern.ParamPairs[2], 'quantity=4');
    CheckEquals(StringPattern.PartBeginPos, Length('<cocacola price="1.25" quantity="50">') + 1);
    CheckEquals(StringPattern.PartEndPos, Length('<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">') + 1);

    CheckFalse(StringPattern.AnsiMatchNextSub);

    StringPattern.AutoClearPairs := False;
    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'b%c%d';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    Check(StringPattern.AnsiMatchSub('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'c=c');
    CheckEquals(StringPattern.PartBeginPos, 2);
    CheckEquals(StringPattern.PartEndPos, 5);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.AnsiMatchSub('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.AnsiMatchSub('abcde'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.AnsiMatchSub('abcde'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcde';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    Check(StringPattern.AnsiMatchSub('abcdefg'));
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcdefg';
    StringPattern.ParamHead := 'f';
    StringPattern.ParamTail := 'g';
    StringPattern.IgnoreUnnamedParams := False;
    Check(StringPattern.AnsiMatchSub('abcdefg'));
    StringPattern.IgnoreUnnamedParams := True;
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], '=fg');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 8);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    Check(StringPattern.AnsiMatchSub('xd'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'a=x');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 3);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'abcd';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'd';
    Check(StringPattern.AnsiMatchSub('!@#$%'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'bc=!@#$%');
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 6);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a```Param```e';
    StringPattern.ParamHead := mnStdSeparator1;
    StringPattern.ParamTail := mnStdSeparator1;
    Check(StringPattern.AnsiMatchSub('!abcde@'));
    CheckEquals(StringPattern.ParamPairs.Count, 1);
    CheckEquals(StringPattern.ParamPairs[0], 'Param=bcd');
    CheckEquals(StringPattern.PartBeginPos, 2);
    CheckEquals(StringPattern.PartEndPos, 7);

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := 'a<1>b<2>c<3>d';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    CheckFalse(StringPattern.AnsiMatchSub('a1b2d'));

    StringPattern.ClearParamPairs;
    StringPattern.Pattern := '<1>欢<2>';
    StringPattern.ParamHead := '<';
    StringPattern.ParamTail := '>';
    CheckFalse(StringPattern.AnsiMatchSub('一二三'));

    try
      StringPattern.Pattern := 'a%x%%y%c';
      StringPattern.ParamHead := '%';
      StringPattern.ParamTail := '%';
      Check(StringPattern.AnsiMatchSub('abc'));
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, Format(SContinuousTwoParams, ['a%x%%y%c']));
    end;
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_PrepareSubSequence;
var
  StringPattern: mnTStringPattern;
  Index: Integer;
begin
  StringPattern := mnTStringPattern.Create;
  try
    StringPattern.Pattern := '<%goodsname% price="%price%" quantity="%quantity%">';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';

    StringPattern.PrepareSubSequence('<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">');
    CheckEquals(StringPattern.WorkStr, '<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">');
    CheckEquals(StringPattern.ParamPairs.Count, 0);
    CheckEquals(StringPattern.PartBeginPos, 1);
    CheckEquals(StringPattern.PartEndPos, 1);
    Index := 0;

    while StringPattern.MatchNextSub do
    begin
      if Index = 0 then
      begin
        CheckEquals(StringPattern.PatternSections.Count, 4);
        CheckEquals(StringPattern.PatternSections[0], '<');
        CheckEquals(StringPattern.PatternSections[1], ' price="');
        CheckEquals(StringPattern.PatternSections[2], '" quantity="');
        CheckEquals(StringPattern.PatternSections[3], '">');
        CheckEquals(StringPattern.PatternParams.Count, 3);
        CheckEquals(StringPattern.PatternParams[0], 'goodsname');
        CheckEquals(StringPattern.PatternParams[1], 'price');
        CheckEquals(StringPattern.PatternParams[2], 'quantity');
        CheckEquals(StringPattern.PatternParsed, True);
        CheckEquals(StringPattern.ParamPairs.Count, 3);
        CheckEquals(StringPattern.ParamPairs[0], 'goodsname=cocacola');
        CheckEquals(StringPattern.ParamPairs[1], 'price=1.25');
        CheckEquals(StringPattern.ParamPairs[2], 'quantity=50');
        CheckEquals(StringPattern.PartBeginPos, 1);
        CheckEquals(StringPattern.PartEndPos, Length('<cocacola price="1.25" quantity="50">') + 1);
      end
      else if Index = 1 then
      begin
        CheckEquals(StringPattern.ParamPairs.Count, 3);
        CheckEquals(StringPattern.ParamPairs[0], 'goodsname=adidas');
        CheckEquals(StringPattern.ParamPairs[1], 'price=340');
        CheckEquals(StringPattern.ParamPairs[2], 'quantity=4');
        CheckEquals(StringPattern.PartBeginPos, Length('<cocacola price="1.25" quantity="50">') + 1);
        CheckEquals(StringPattern.PartEndPos, Length('<cocacola price="1.25" quantity="50"><adidas price="340" quantity="4">') + 1);
      end;

      Inc(Index);
    end;
    CheckEquals(Index, 2);
  finally
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_Realize;
var
  StringPattern: mnTStringPattern;
  NameValuePairs: mnTStrList;
begin
  StringPattern := mnTStringPattern.Create;
  NameValuePairs := mnTStrList.Create;
  try
    StringPattern.Pattern := 'i am a %mykind%, and he is a %hiskind%.';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    NameValuePairs.Clear;
    NameValuePairs.Append('mykind=dog');
    NameValuePairs.Append('hiskind=rabbit');
    CheckEquals(StringPattern.Realize(NameValuePairs), 'i am a dog, and he is a rabbit.');

    NameValuePairs.Text := 'b=3';
    StringPattern.Pattern := 'abcabcabc';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'c';
    CheckEquals(StringPattern.Realize(NameValuePairs), '333');

    NameValuePairs.Text := 'a=3';
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    CheckEquals(StringPattern.Realize(NameValuePairs), '3d');

    NameValuePairs.Text := 'x=3';
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    CheckEquals(StringPattern.Realize(NameValuePairs), 'd');

    NameValuePairs.Text := 'B=3';
    StringPattern.Pattern := 'abcabcabc';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'c';
    CheckEquals(StringPattern.Realize(NameValuePairs), '333');

    NameValuePairs.Text := 'b=3';
    StringPattern.Pattern := 'abcabcabc';
    StringPattern.ParamHead := 'c';
    StringPattern.ParamTail := 'd';
    CheckEquals(StringPattern.Realize(NameValuePairs), 'abcabcabc');

    NameValuePairs.Text := 'b=e';
    StringPattern.Pattern := 'a```b```c';
    StringPattern.ParamHead := mnStdSeparator1;
    StringPattern.ParamTail := mnStdSeparator1;
    CheckEquals(StringPattern.Realize(NameValuePairs), 'aec');
  finally
    NameValuePairs.Free;
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testStringPattern_AnsiRealize;
var
  StringPattern: mnTStringPattern;
  NameValuePairs: mnTStrList;
begin
  StringPattern := mnTStringPattern.Create;
  NameValuePairs := mnTStrList.Create;
  try
    StringPattern.Pattern := 'i am a %mykind%, and he is a %hiskind%.';
    StringPattern.ParamHead := '%';
    StringPattern.ParamTail := '%';
    NameValuePairs.Clear;
    NameValuePairs.Append('mykind=dog');
    NameValuePairs.Append('hiskind=rabbit');
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), 'i am a dog, and he is a rabbit.');

    NameValuePairs.Text := 'b=3';
    StringPattern.Pattern := 'abcabcabc';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'c';
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), '333');

    NameValuePairs.Text := 'a=3';
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), '3d');

    NameValuePairs.Text := 'x=3';
    StringPattern.Pattern := 'abcabcd';
    StringPattern.ParamHead := 'abc';
    StringPattern.ParamTail := 'bc';
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), 'd');

    NameValuePairs.Text := 'B=3';
    StringPattern.Pattern := 'abcabcabc';
    StringPattern.ParamHead := 'a';
    StringPattern.ParamTail := 'c';
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), '333');

    NameValuePairs.Text := 'b=3';
    StringPattern.Pattern := 'abcabcabc';
    StringPattern.ParamHead := 'c';
    StringPattern.ParamTail := 'd';
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), 'abcabcabc');

    NameValuePairs.Text := 'b=e';
    StringPattern.Pattern := 'a```b```c';
    StringPattern.ParamHead := mnStdSeparator1;
    StringPattern.ParamTail := mnStdSeparator1;
    CheckEquals(StringPattern.AnsiRealize(NameValuePairs), 'aec');
  finally
    NameValuePairs.Free;
    StringPattern.Free;
  end;
end;

procedure TmnStringTestCase.testGetTextEncoding;
begin
  Check(mnGetTextEncoding(Text_Ansi) = teAnsi);
  Check(mnGetTextEncoding(Text_UnicodeLE_WithBOM) = teUnicodeLE);
  Check(mnGetTextEncoding(Text_UnicodeBE_WithBOM) = teUnicodeBE);
  Check(mnGetTextEncoding(Text_UTF8_WithBOM) = teUTF8);
end;

procedure TmnStringTestCase.testExpressWideString;
var
  WS: WideString;
begin
  WS := 'qiugc';
  CheckEquals(mnExpressWideString(WS), 'q'#0 + 'i'#0 + 'u'#0 + 'g'#0 + 'c'#0);

  WS := '';
  CheckEquals(mnExpressWideString(WS), '');

  WS := 'æəŋɔ';
  CheckEquals(mnExpressWideString(WS), #$E6#$00 + #$59#$02 + #$4B#$01 + #$54#$02);

  WS := '米兰';
  CheckEquals(mnExpressWideString(WS), #$73#$7C + #$70#$51);
end;

procedure TmnStringTestCase.testRandomStr;
var
  str: string;
  ch: Char;
begin
  str := mnRandomStr(1000);
  CheckEquals(Length(str), 1000);

  str := mnRandomStr(1000, 'shidf892r234#$@f');
  CheckEquals(Length(str), 1000);
  for ch in str do
    Check(Pos(ch, 'shidf892r234#$@f') > 0);
end;

procedure TmnStringTestCase.testRandomDigitStr;
var
  str: string;
  ch: Char;
begin
  str := mnRandomDigitStr(1000);
  CheckEquals(Length(str), 1000);
  for ch in str do
    Check(mnIsDigit(ch));
end;

procedure TmnStringTestCase.testRandomDigletStr;
var
  str: string;
  ch: Char;
begin
  str := mnRandomDigletStr(1000);
  CheckEquals(Length(str), 1000);
  for ch in str do
    Check(mnIsLetterOrDigit(ch));
end;

procedure TmnStringTestCase.testRandomUpperDigletStr;
var
  str: string;
  ch: Char;
begin
  str := mnRandomUpperDigletStr(1000);
  CheckEquals(Length(str), 1000);
  for ch in str do
    Check(mnIsDigit(ch) or mnIsUpperCase(ch));
end;

procedure TmnStringTestCase.testRandomLowerDigletStr;
var
  str: string;
  ch: Char;
begin
  str := mnRandomLowerDigletStr(1000);
  CheckEquals(Length(str), 1000);
  for ch in str do
    Check(mnIsDigit(ch) or mnIsLowerCase(ch));
end;

procedure TmnStringTestCase.testEncodeDecodeSeries;
var
  str1, str2: string;
  i: Integer;
  ch: Char;
begin
  str1 := '';
  for i := 0 to 255 do
    str1 := str1 + Chr(i);

  // mnEncodeToDigitStr and mnDecodeFromDigitStr
  str2 := mnEncodeToDigitStr(str1);
  Check(Length(str2) = 256*3);
  Check(mnStartsStr('000001002003004005', str2));
  Check(mnEndsStr('372373374375376377', str2));
  CheckEquals(str1, mnDecodeFromDigitStr(str2));
  for ch in str2 do
    Check(mnIsDigit(ch));

  // mnEncodeToDigletStr and mnDecodeFromDigletStr
  str2 := mnEncodeToDigletStr(str1, True);
  Check(Length(str2) = 256*2);
  Check(mnStartsStr('000102030405', str2));
  Check(mnEndsStr('FAFBFCFDFEFF', str2));
  CheckEquals(str1, mnDecodeFromDigletStr(str2));
  for ch in str2 do
    Check(mnIsDigit(ch) or mnIsUpperCase(ch));

  str2 := mnEncodeToDigletStr(str1, False);
  Check(Length(str2) = 256*2);
  Check(mnStartsStr('0001020304', str2));
  Check(mnEndsStr('fafbfcfdfeff', str2));
  CheckEquals(str1, mnDecodeFromDigletStr(str2));
  for ch in str2 do
    Check(mnIsDigit(ch) or mnIsLowerCase(ch));
end;

procedure TmnStringTestCase.testHideRevealSeries;
var
  str1, str2: string;
  i: Integer;
begin
  str1 := '';
  for i := 0 to 255 do
    str1 := str1 + Chr(i);

  // mnHideStr and mnRevealStr
  str2 := mnHideStr(str1, 5);
  CheckEquals(Length(str2), 256*(5+1)+5);
  CheckEquals(str2[6], #0);
  CheckEquals(str2[12], #1);
  CheckEquals(str2[18], #2);
  CheckEquals(str2[1524], #253);
  CheckEquals(str2[1530], #254);
  CheckEquals(str2[1536], #255);
  CheckEquals(str1, mnRevealStr(str2, 5));

  // mnHideDigitStr and mnRevealStr
  str2 := mnHideDigitStr(str1, 5);
  CheckEquals(Length(str2), 256*(5+1)+5);
  CheckEquals(str2[6], #0);
  CheckEquals(str2[12], #1);
  CheckEquals(str2[18], #2);
  CheckEquals(str2[1524], #253);
  CheckEquals(str2[1530], #254);
  CheckEquals(str2[1536], #255);
  CheckEquals(str1, mnRevealStr(str2, 5));
  for i := 1 to Length(str2) do
    if i mod 6 <> 0 then
      Check(mnIsDigit(str2[i]));

  // mnHideDigletStr and mnRevealStr
  str2 := mnHideDigletStr(str1, True, 5);
  CheckEquals(Length(str2), 256*(5+1)+5);
  CheckEquals(str2[6], #0);
  CheckEquals(str2[12], #1);
  CheckEquals(str2[18], #2);
  CheckEquals(str2[1524], #253);
  CheckEquals(str2[1530], #254);
  CheckEquals(str2[1536], #255);
  CheckEquals(str1, mnRevealStr(str2, 5));
  for i := 1 to Length(str2) do
    if i mod 6 <> 0 then
      Check(mnIsDigit(str2[i]) or mnIsUpperCase(str2[i]));

  str2 := mnHideDigletStr(str1, False, 5);
  CheckEquals(Length(str2), 256*(5+1)+5);
  CheckEquals(str2[6], #0);
  CheckEquals(str2[12], #1);
  CheckEquals(str2[18], #2);
  CheckEquals(str2[1524], #253);
  CheckEquals(str2[1530], #254);
  CheckEquals(str2[1536], #255);
  CheckEquals(str1, mnRevealStr(str2, 5));
  for i := 1 to Length(str2) do
    if i mod 6 <> 0 then
      Check(mnIsDigit(str2[i]) or mnIsLowerCase(str2[i]));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnStringTestCase.Suite);
end.