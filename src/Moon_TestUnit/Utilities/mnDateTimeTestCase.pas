unit mnDateTimeTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnDateTimeTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testIncompleteDateToStr;
    procedure testToDuration;
    procedure testDurationToStr;
    procedure testDurationFormatOnHour;
    procedure testStdDateTimeFormatSeries;
    procedure testDateTimeToStdStr;
    procedure testDateToStdStr;
    procedure testDateTimeAsFileNameFormatSeries;
    procedure testDateTimeToStrAsFileName;
    procedure testDateToStrAsFileName;
    procedure testFileTimeToDateTimeSeries;
    procedure testStartEndOfDateTimeSeries;
    procedure testStartEndOfWeekQuarterSeries;
    procedure testDateToLunar;
    procedure testLunarToDate;
    procedure testDateToLunarToDate;
    procedure testDateToConstellation12;
    procedure testDateToAnimal12;
  end;

implementation

uses mnDateTime, DateUtils, mnSystem, SysUtils, mnDebug, mnResStrsU, mnMath, mnDialog,
  Windows;

{ TmnDateTimeTestCase }

procedure TmnDateTimeTestCase.SetUp;
begin
end;

procedure TmnDateTimeTestCase.TearDown;
begin
end;

procedure TmnDateTimeTestCase.testIncompleteDateToStr;
begin
  CheckEquals(mnIncompleteDateToStr(0, 0, 0),     '');
  CheckEquals(mnIncompleteDateToStr(0, 0, 29),    '       -29');
  CheckEquals(mnIncompleteDateToStr(0, 8, 0),     '     08-  ');
  CheckEquals(mnIncompleteDateToStr(0, 8, 29),    '     08-29');
  CheckEquals(mnIncompleteDateToStr(1982, 0, 0),  '1982      ');
  CheckEquals(mnIncompleteDateToStr(1982, 0, 29), '1982-  -29');
  CheckEquals(mnIncompleteDateToStr(1982, 8, 0),  '1982-08   ');
  CheckEquals(mnIncompleteDateToStr(1982, 8, 29), '1982-08-29');
end;

procedure TmnDateTimeTestCase.testToDuration;
begin
  CheckEquals(mnToDuration(2, tuYear),   2 * 365.25,       mnParticle);
  CheckEquals(mnToDuration(2, tuMonth),  2 * 30.4375,      mnParticle);
  CheckEquals(mnToDuration(2, tuDay),    2,                mnParticle);
  CheckEquals(mnToDuration(2, tuHour),   2 / 24,           mnParticle);
  CheckEquals(mnToDuration(2, tuMinute), 2 / 24 / 60,      mnParticle);
  CheckEquals(mnToDuration(2, tuSecond), 2 / 24 / 60 / 60, mnParticle);
end;

procedure TmnDateTimeTestCase.testDurationToStr;
var
  Duration: mnTDuration;
begin
  Duration := EncodeDateTime(2002, 8, 9, 10, 11, 12, 13) - EncodeDateTime(2001, 6, 6, 6, 6, 6, 6);

  CheckEquals(mnDurationToStr('%d-%d-%d-%d-%d-%d-%d', Duration, tuYear),   '1-2-3-4-5-6-7');
  CheckEquals(mnDurationToStr('%d-%d-%d-%d-%d-%d',    Duration, tuMonth),  '14-3-4-5-6-7');
  CheckEquals(mnDurationToStr('%d-%d-%d-%d-%d',       Duration, tuDay),    '429-4-5-6-7');
  CheckEquals(mnDurationToStr('%d-%d-%d-%d',          Duration, tuHour),   '10300-5-6-7');
  CheckEquals(mnDurationToStr('%d-%d-%d',             Duration, tuMinute), '618005-6-7');
  CheckEquals(mnDurationToStr('%d-%d',                Duration, tuSecond), '37080306-7');
end;

procedure TmnDateTimeTestCase.testDurationFormatOnHour;
var
  Duration: mnTDuration;
begin
  Duration := EncodeDateTime(2002, 8, 9, 10, 11, 12, 13) - EncodeDateTime(2001, 6, 6, 6, 6, 6, 6);

  CheckEquals(mnDurationToStr(mnDurationFormatOnHour, Duration, tuHour), '10300:05''06"007');
end;

procedure TmnDateTimeTestCase.testStdDateTimeFormatSeries;
begin
  CheckEquals(FormatDateTime(mnStdDateFormat, EncodeDate(1982, 8, 29)), '1982-08-29');
  CheckEquals(FormatDateTime(mnStdTimeFormat, EncodeTime(8, 50, 0, 0)), '08:50:00');
  CheckEquals(FormatDateTime(mnStdTimeFormatHM, EncodeTime(8, 50, 0, 0)), '08:50');
  CheckEquals(FormatDateTime(mnStdDateTimeFormat, EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)), '1982-08-29 08:50:00');
  CheckEquals(FormatDateTime(mnStdDateTimeFormatHM, EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)), '1982-08-29 08:50');
end;

procedure TmnDateTimeTestCase.testDateTimeToStdStr;
begin
  CheckEquals(mnDateTimeToStdStr(EncodeDate(1982, 8, 29)),               '1982-08-29 00:00:00');
  CheckEquals(mnDateTimeToStdStr(EncodeDate(1982, 8, 29), True,  False), '1982-08-29');
  CheckEquals(mnDateTimeToStdStr(EncodeDate(1982, 8, 29), False, True),  '1982-08-29 00:00');
  CheckEquals(mnDateTimeToStdStr(EncodeDate(1982, 8, 29), True,  True),  '1982-08-29');

  CheckEquals(mnDateTimeToStdStr(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)),               '1982-08-29 08:50:00');
  CheckEquals(mnDateTimeToStdStr(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0), True,  False), '1982-08-29 08:50:00');
  CheckEquals(mnDateTimeToStdStr(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0), False, True),  '1982-08-29 08:50');
  CheckEquals(mnDateTimeToStdStr(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0), True,  True),  '1982-08-29 08:50');
end;

procedure TmnDateTimeTestCase.testDateToStdStr;
begin
  CheckEquals(mnDateToStdStr(EncodeDate(1982, 8, 29)), '1982-08-29');
  CheckEquals(mnDateToStdStr(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)), '1982-08-29');
end;

procedure TmnDateTimeTestCase.testDateTimeAsFileNameFormatSeries;
begin
  CheckEquals(FormatDateTime(mnDateAsFileNameFormat, EncodeDate(1982, 8, 29)), '1982-08-29');
  CheckEquals(FormatDateTime(mnTimeAsFileNameFormat, EncodeTime(8, 50, 0, 0)), '08.50.00');
  CheckEquals(FormatDateTime(mnTimeAsFileNameFormatHM, EncodeTime(8, 50, 0, 0)), '08.50');
  CheckEquals(FormatDateTime(mnDateTimeAsFileNameFormat, EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)), '1982-08-29_08.50.00');
  CheckEquals(FormatDateTime(mnDateTimeAsFileNameFormatHM, EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)), '1982-08-29_08.50');
end;

procedure TmnDateTimeTestCase.testDateTimeToStrAsFileName;
begin
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDate(1982, 8, 29)),               '1982-08-29_00.00.00');
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDate(1982, 8, 29), True,  False), '1982-08-29');
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDate(1982, 8, 29), False, True),  '1982-08-29_00.00');
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDate(1982, 8, 29), True,  True),  '1982-08-29');

  CheckEquals(mnDateTimeToStrAsFileName(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)),               '1982-08-29_08.50.00');
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0), True,  False), '1982-08-29_08.50.00');
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0), False, True),  '1982-08-29_08.50');
  CheckEquals(mnDateTimeToStrAsFileName(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0), True,  True),  '1982-08-29_08.50');
end;

procedure TmnDateTimeTestCase.testDateToStrAsFileName;
begin
  CheckEquals(mnDateToStrAsFileName(EncodeDate(1982, 8, 29)), '1982-08-29');
  CheckEquals(mnDateToStrAsFileName(EncodeDateTime(1982, 8, 29, 8, 50, 0, 0)), '1982-08-29');
end;

procedure TmnDateTimeTestCase.testFileTimeToDateTimeSeries;
var
  FileTime: TFileTime;
  tzi: TTimeZoneInformation;
begin
  GetTimeZoneInformation(tzi);

  FileTime.dwHighDateTime := 0;
  FileTime.dwLowDateTime := 0;
  CheckEquals(1601, YearOf  (mnFileTimeToDateTime(FileTime)));
  CheckEquals(1,    MonthOf (mnFileTimeToDateTime(FileTime)));
  CheckEquals(1,    DayOf   (mnFileTimeToDateTime(FileTime)));
  CheckEquals(0,    HourOf  (mnFileTimeToDateTime(FileTime)));
  CheckEquals(0,    MinuteOf(mnFileTimeToDateTime(FileTime)));
  CheckEquals(0,    SecondOf(mnFileTimeToDateTime(FileTime)));
  CheckEquals(1601,             YearOf  (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(1,                MonthOf (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(1,                DayOf   (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(-tzi.Bias div 60, HourOf  (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(-tzi.Bias mod 60, MinuteOf(mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(0,                SecondOf(mnFileTimeToLocalToDateTime(FileTime)));

  FileTime.dwHighDateTime := 0;
  FileTime.dwLowDateTime := 10*1000*1000*191;
  CheckEquals(1601, YearOf  (mnFileTimeToDateTime(FileTime)));
  CheckEquals(1,    MonthOf (mnFileTimeToDateTime(FileTime)));
  CheckEquals(1,    DayOf   (mnFileTimeToDateTime(FileTime)));
  CheckEquals(0,    HourOf  (mnFileTimeToDateTime(FileTime)));
  CheckEquals(3,    MinuteOf(mnFileTimeToDateTime(FileTime)));
  CheckEquals(11,    SecondOf(mnFileTimeToDateTime(FileTime)));
  CheckEquals(1601,              YearOf  (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(1,                 MonthOf (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(1,                 DayOf   (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(-tzi.Bias div 60,  HourOf  (mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(3-tzi.Bias mod 60, MinuteOf(mnFileTimeToLocalToDateTime(FileTime)));
  CheckEquals(11,                SecondOf(mnFileTimeToLocalToDateTime(FileTime)));
end;

procedure TmnDateTimeTestCase.testStartEndOfDateTimeSeries;
var
  ADateTime: TDateTime;
  YearStart, MonthStart, DayStart, HourStart, MinuteStart, SecondStart: TDateTime;
  YearEnd, MonthEnd, DayEnd, HourEnd, MinuteEnd, SecondEnd: TDateTime;
  LastYearStart, LastMonthStart, LastDayStart, LastHourStart, LastMinuteStart, LastSecondStart: TDateTime;
  LastYearEnd, LastMonthEnd, LastDayEnd, LastHourEnd, LastMinuteEnd, LastSecondEnd: TDateTime;
  NextYearStart, NextMonthStart, NextDayStart, NextHourStart, NextMinuteStart, NextSecondStart: TDateTime;
  NextYearEnd, NextMonthEnd, NextDayEnd, NextHourEnd, NextMinuteEnd, NextSecondEnd: TDateTime;
  i: Integer;
begin
  ADateTime := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 42, 821);

  YearStart   := EncodeDate(2004, 1, 1);
  MonthStart  := EncodeDate(2004, 2, 1);
  DayStart    := EncodeDate(2004, 2, 14);
  HourStart   := EncodeDate(2004, 2, 14) + EncodeTime(11, 0, 0, 0);
  MinuteStart := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 0, 0);
  SecondStart := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 42, 0);
  YearEnd     := EncodeDate(2004, 12, 31) + EncodeTime(23, 59, 59, 999);
  MonthEnd    := EncodeDate(2004, 2, 29) + EncodeTime(23, 59, 59, 999);
  DayEnd      := EncodeDate(2004, 2, 14) + EncodeTime(23, 59, 59, 999);
  HourEnd     := EncodeDate(2004, 2, 14) + EncodeTime(11, 59, 59, 999);
  MinuteEnd   := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 59, 999);
  SecondEnd   := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 42, 999);

  LastYearStart   := EncodeDate(2003, 1, 1);
  LastMonthStart  := EncodeDate(2004, 1, 1);
  LastDayStart    := EncodeDate(2004, 2, 13);
  LastHourStart   := EncodeDate(2004, 2, 14) + EncodeTime(10, 0, 0, 0);
  LastMinuteStart := EncodeDate(2004, 2, 14) + EncodeTime(11, 24, 0, 0);
  LastSecondStart := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 41, 0);
  LastYearEnd     := EncodeDate(2003, 12, 31) + EncodeTime(23, 59, 59, 999);
  LastMonthEnd    := EncodeDate(2004, 1, 31) + EncodeTime(23, 59, 59, 999);
  LastDayEnd      := EncodeDate(2004, 2, 13) + EncodeTime(23, 59, 59, 999);
  LastHourEnd     := EncodeDate(2004, 2, 14) + EncodeTime(10, 59, 59, 999);
  LastMinuteEnd   := EncodeDate(2004, 2, 14) + EncodeTime(11, 24, 59, 999);
  LastSecondEnd   := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 41, 999);

  NextYearStart   := EncodeDate(2005, 1, 1);
  NextMonthStart  := EncodeDate(2004, 3, 1);
  NextDayStart    := EncodeDate(2004, 2, 15);
  NextHourStart   := EncodeDate(2004, 2, 14) + EncodeTime(12, 0, 0, 0);
  NextMinuteStart := EncodeDate(2004, 2, 14) + EncodeTime(11, 26, 0, 0);
  NextSecondStart := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 43, 0);
  NextYearEnd     := EncodeDate(2005, 12, 31) + EncodeTime(23, 59, 59, 999);
  NextMonthEnd    := EncodeDate(2004, 3, 31) + EncodeTime(23, 59, 59, 999);
  NextDayEnd      := EncodeDate(2004, 2, 15) + EncodeTime(23, 59, 59, 999);
  NextHourEnd     := EncodeDate(2004, 2, 14) + EncodeTime(12, 59, 59, 999);
  NextMinuteEnd   := EncodeDate(2004, 2, 14) + EncodeTime(11, 26, 59, 999);
  NextSecondEnd   := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 43, 999);

  // mnStartOf and mnEndOf
  CheckEquals(YearStart,   mnStartOf(ADateTime, tuYear));
  CheckEquals(MonthStart,  mnStartOf(ADateTime, tuMonth));
  CheckEquals(DayStart,    mnStartOf(ADateTime, tuDay));
  CheckEquals(HourStart,   mnStartOf(ADateTime, tuHour));
  CheckEquals(MinuteStart, mnStartOf(ADateTime, tuMinute));
  CheckEquals(SecondStart, mnStartOf(ADateTime, tuSecond));
  CheckEquals(YearEnd,     mnEndOf(ADateTime, tuYear));
  CheckEquals(MonthEnd,    mnEndOf(ADateTime, tuMonth));
  CheckEquals(DayEnd,      mnEndOf(ADateTime, tuDay));
  CheckEquals(HourEnd,     mnEndOf(ADateTime, tuHour));
  CheckEquals(MinuteEnd,   mnEndOf(ADateTime, tuMinute));
  CheckEquals(SecondEnd,   mnEndOf(ADateTime, tuSecond));

  // mnStartOfLast and mnEndOfLast
  CheckEquals(LastYearStart,   mnStartOfLast(ADateTime, tuYear));
  CheckEquals(LastMonthStart,  mnStartOfLast(ADateTime, tuMonth));
  CheckEquals(LastDayStart,    mnStartOfLast(ADateTime, tuDay));
  CheckEquals(LastHourStart,   mnStartOfLast(ADateTime, tuHour));
  CheckEquals(LastMinuteStart, mnStartOfLast(ADateTime, tuMinute));
  CheckEquals(LastSecondStart, mnStartOfLast(ADateTime, tuSecond));
  CheckEquals(LastYearEnd,     mnEndOfLast(ADateTime, tuYear));
  CheckEquals(LastMonthEnd,    mnEndOfLast(ADateTime, tuMonth));
  CheckEquals(LastDayEnd,      mnEndOfLast(ADateTime, tuDay));
  CheckEquals(LastHourEnd,     mnEndOfLast(ADateTime, tuHour));
  CheckEquals(LastMinuteEnd,   mnEndOfLast(ADateTime, tuMinute));
  CheckEquals(LastSecondEnd,   mnEndOfLast(ADateTime, tuSecond));

  // mnStartOfNext and mnEndOfNext
  CheckEquals(NextYearStart,   mnStartOfNext(ADateTime, tuYear));
  CheckEquals(NextMonthStart,  mnStartOfNext(ADateTime, tuMonth));
  CheckEquals(NextDayStart,    mnStartOfNext(ADateTime, tuDay));
  CheckEquals(NextHourStart,   mnStartOfNext(ADateTime, tuHour));
  CheckEquals(NextMinuteStart, mnStartOfNext(ADateTime, tuMinute));
  CheckEquals(NextSecondStart, mnStartOfNext(ADateTime, tuSecond));
  CheckEquals(NextYearEnd,     mnEndOfNext(ADateTime, tuYear));
  CheckEquals(NextMonthEnd,    mnEndOfNext(ADateTime, tuMonth));
  CheckEquals(NextDayEnd,      mnEndOfNext(ADateTime, tuDay));
  CheckEquals(NextHourEnd,     mnEndOfNext(ADateTime, tuHour));
  CheckEquals(NextMinuteEnd,   mnEndOfNext(ADateTime, tuMinute));
  CheckEquals(NextSecondEnd,   mnEndOfNext(ADateTime, tuSecond));

  // all mnStartOfXXX, mnStartOfNextXXX and mnStartOfLastXXX
  ADateTime := EncodeDateTime(1997, 9, 5, 11, 25, 42, 821);
  for i := 1 to 10000 do
  begin
    CheckEquals(YearOf(StartOfTheYear(ADateTime)),        YearOf(EndOfTheYear(ADateTime)));
    CheckEquals(YearOf(StartOfTheMonth(ADateTime)),       YearOf(EndOfTheMonth(ADateTime)));
    CheckEquals(MonthOf(StartOfTheMonth(ADateTime)),      MonthOf(EndOfTheMonth(ADateTime)));
    CheckEquals(YearOf(StartOfTheDay(ADateTime)),         YearOf(EndOfTheDay(ADateTime)));
    CheckEquals(MonthOf(StartOfTheDay(ADateTime)),        MonthOf(EndOfTheDay(ADateTime)));
    CheckEquals(DayOf(StartOfTheDay(ADateTime)),          DayOf(EndOfTheDay(ADateTime)));
    CheckEquals(YearOf(mnStartOfTheHour(ADateTime)),      YearOf(mnEndOfTheHour(ADateTime)));
    CheckEquals(MonthOf(mnStartOfTheHour(ADateTime)),     MonthOf(mnEndOfTheHour(ADateTime)));
    CheckEquals(DayOf(mnStartOfTheHour(ADateTime)),       DayOf(mnEndOfTheHour(ADateTime)));
    CheckEquals(HourOf(mnStartOfTheHour(ADateTime)),      HourOf(mnEndOfTheHour(ADateTime)));
    CheckEquals(YearOf(mnStartOfTheMinute(ADateTime)),    YearOf(mnEndOfTheMinute(ADateTime)));
    CheckEquals(MonthOf(mnStartOfTheMinute(ADateTime)),   MonthOf(mnEndOfTheMinute(ADateTime)));
    CheckEquals(DayOf(mnStartOfTheMinute(ADateTime)),     DayOf(mnEndOfTheMinute(ADateTime)));
    CheckEquals(HourOf(mnStartOfTheMinute(ADateTime)),    HourOf(mnEndOfTheMinute(ADateTime)));
    CheckEquals(MinuteOf(mnStartOfTheMinute(ADateTime)),  MinuteOf(mnEndOfTheMinute(ADateTime)));
    CheckEquals(YearOf(mnStartOfTheSecond(ADateTime)),    YearOf(mnEndOfTheSecond(ADateTime)));
    CheckEquals(MonthOf(mnStartOfTheSecond(ADateTime)),   MonthOf(mnEndOfTheSecond(ADateTime)));
    CheckEquals(DayOf(mnStartOfTheSecond(ADateTime)),     DayOf(mnEndOfTheSecond(ADateTime)));
    CheckEquals(HourOf(mnStartOfTheSecond(ADateTime)),    HourOf(mnEndOfTheSecond(ADateTime)));
    CheckEquals(MinuteOf(mnStartOfTheSecond(ADateTime)),  MinuteOf(mnEndOfTheSecond(ADateTime)));
    CheckEquals(SecondOf(mnStartOfTheSecond(ADateTime)),  SecondOf(mnEndOfTheSecond(ADateTime)));

    CheckEquals(YearOf(mnStartOfLastYear(ADateTime)),     YearOf(mnEndOfLastYear(ADateTime)));
    CheckEquals(YearOf(mnStartOfLastMonth(ADateTime)),    YearOf(mnEndOfLastMonth(ADateTime)));
    CheckEquals(MonthOf(mnStartOfLastMonth(ADateTime)),   MonthOf(mnEndOfLastMonth(ADateTime)));
    CheckEquals(YearOf(mnStartOfLastDay(ADateTime)),      YearOf(mnEndOfLastDay(ADateTime)));
    CheckEquals(MonthOf(mnStartOfLastDay(ADateTime)),     MonthOf(mnEndOfLastDay(ADateTime)));
    CheckEquals(DayOf(mnStartOfLastDay(ADateTime)),       DayOf(mnEndOfLastDay(ADateTime)));
    CheckEquals(YearOf(mnStartOfLastHour(ADateTime)),     YearOf(mnEndOfLastHour(ADateTime)));
    CheckEquals(MonthOf(mnStartOfLastHour(ADateTime)),    MonthOf(mnEndOfLastHour(ADateTime)));
    CheckEquals(DayOf(mnStartOfLastHour(ADateTime)),      DayOf(mnEndOfLastHour(ADateTime)));
    CheckEquals(HourOf(mnStartOfLastHour(ADateTime)),     HourOf(mnEndOfLastHour(ADateTime)));
    CheckEquals(YearOf(mnStartOfLastMinute(ADateTime)),   YearOf(mnEndOfLastMinute(ADateTime)));
    CheckEquals(MonthOf(mnStartOfLastMinute(ADateTime)),  MonthOf(mnEndOfLastMinute(ADateTime)));
    CheckEquals(DayOf(mnStartOfLastMinute(ADateTime)),    DayOf(mnEndOfLastMinute(ADateTime)));
    CheckEquals(HourOf(mnStartOfLastMinute(ADateTime)),   HourOf(mnEndOfLastMinute(ADateTime)));
    CheckEquals(MinuteOf(mnStartOfLastMinute(ADateTime)), MinuteOf(mnEndOfLastMinute(ADateTime)));
    CheckEquals(YearOf(mnStartOfLastSecond(ADateTime)),   YearOf(mnEndOfLastSecond(ADateTime)));
    CheckEquals(MonthOf(mnStartOfLastSecond(ADateTime)),  MonthOf(mnEndOfLastSecond(ADateTime)));
    CheckEquals(DayOf(mnStartOfLastSecond(ADateTime)),    DayOf(mnEndOfLastSecond(ADateTime)));
    CheckEquals(HourOf(mnStartOfLastSecond(ADateTime)),   HourOf(mnEndOfLastSecond(ADateTime)));
    CheckEquals(MinuteOf(mnStartOfLastSecond(ADateTime)), MinuteOf(mnEndOfLastSecond(ADateTime)));
    CheckEquals(SecondOf(mnStartOfLastSecond(ADateTime)), SecondOf(mnEndOfLastSecond(ADateTime)));

    CheckEquals(YearOf(mnStartOfNextYear(ADateTime)),     YearOf(mnEndOfNextYear(ADateTime)));
    CheckEquals(YearOf(mnStartOfNextMonth(ADateTime)),    YearOf(mnEndOfNextMonth(ADateTime)));
    CheckEquals(MonthOf(mnStartOfNextMonth(ADateTime)),   MonthOf(mnEndOfNextMonth(ADateTime)));
    CheckEquals(YearOf(mnStartOfNextDay(ADateTime)),      YearOf(mnEndOfNextDay(ADateTime)));
    CheckEquals(MonthOf(mnStartOfNextDay(ADateTime)),     MonthOf(mnEndOfNextDay(ADateTime)));
    CheckEquals(DayOf(mnStartOfNextDay(ADateTime)),       DayOf(mnEndOfNextDay(ADateTime)));
    CheckEquals(YearOf(mnStartOfNextHour(ADateTime)),     YearOf(mnEndOfNextHour(ADateTime)));
    CheckEquals(MonthOf(mnStartOfNextHour(ADateTime)),    MonthOf(mnEndOfNextHour(ADateTime)));
    CheckEquals(DayOf(mnStartOfNextHour(ADateTime)),      DayOf(mnEndOfNextHour(ADateTime)));
    CheckEquals(HourOf(mnStartOfNextHour(ADateTime)),     HourOf(mnEndOfNextHour(ADateTime)));
    CheckEquals(YearOf(mnStartOfNextMinute(ADateTime)),   YearOf(mnEndOfNextMinute(ADateTime)));
    CheckEquals(MonthOf(mnStartOfNextMinute(ADateTime)),  MonthOf(mnEndOfNextMinute(ADateTime)));
    CheckEquals(DayOf(mnStartOfNextMinute(ADateTime)),    DayOf(mnEndOfNextMinute(ADateTime)));
    CheckEquals(HourOf(mnStartOfNextMinute(ADateTime)),   HourOf(mnEndOfNextMinute(ADateTime)));
    CheckEquals(MinuteOf(mnStartOfNextMinute(ADateTime)), MinuteOf(mnEndOfNextMinute(ADateTime)));
    CheckEquals(YearOf(mnStartOfNextSecond(ADateTime)),   YearOf(mnEndOfNextSecond(ADateTime)));
    CheckEquals(MonthOf(mnStartOfNextSecond(ADateTime)),  MonthOf(mnEndOfNextSecond(ADateTime)));
    CheckEquals(DayOf(mnStartOfNextSecond(ADateTime)),    DayOf(mnEndOfNextSecond(ADateTime)));
    CheckEquals(HourOf(mnStartOfNextSecond(ADateTime)),   HourOf(mnEndOfNextSecond(ADateTime)));
    CheckEquals(MinuteOf(mnStartOfNextSecond(ADateTime)), MinuteOf(mnEndOfNextSecond(ADateTime)));
    CheckEquals(SecondOf(mnStartOfNextSecond(ADateTime)), SecondOf(mnEndOfNextSecond(ADateTime)));

    IncSecond(ADateTime, Random(3600));
  end;
end;

procedure TmnDateTimeTestCase.testStartEndOfWeekQuarterSeries;
var
  ADateTime: TDateTime;
begin
  ADateTime := EncodeDate(2004, 2, 14) + EncodeTime(11, 25, 42, 821);

  CheckEquals(mnStartOfTheQuarter(ADateTime), EncodeDate(2004, 1, 1));
  CheckEquals(mnEndOfTheQuarter(ADateTime), EncodeDate(2004, 3, 31) + EncodeTime(23, 59, 59, 999), mnParticle);

  CheckEquals(mnStartOfLastWeek(ADateTime), EncodeDate(2004, 2, 2));
  CheckEquals(mnEndOfLastWeek(ADateTime), EncodeDate(2004, 2, 8) + EncodeTime(23, 59, 59, 999), mnParticle);

  CheckEquals(mnStartOfLastQuarter(ADateTime), EncodeDate(2003, 10, 1));
  CheckEquals(mnEndOfLastQuarter(ADateTime), EncodeDate(2003, 12, 31) + EncodeTime(23, 59, 59, 999), mnParticle);
end;

const
  Dates: array [1..49] of array [1..7] of Word = (
    // Year, Month, Day, LunarYear, LunarMonth, LunarDay, LunarIsLeapMonth
    (1982,  8, 29, 1982,  7, 11, 0),

    (1901, 12, 31, 1901, 11, 21, 0),
    (2050,  1,  1, 2049, 12,  8, 0),
    (2050, 12, 31, 2050, 11, 18, 0),

    (1911, 12, 31, 1911, 11, 12, 0),
    (1912, 12, 31, 1912, 11, 23, 0),
    (1913, 12, 31, 1913, 12,  5, 0),
    (1914, 12, 31, 1914, 11, 15, 0),
    (1915, 12, 31, 1915, 11, 25, 0),
    (1916, 12, 31, 1916, 12,  7, 0),
    (1917, 12, 31, 1917, 11, 18, 0),
    (1918, 12, 31, 1918, 11, 29, 0),
    (1919, 12, 31, 1919, 11, 10, 0),
    (1920, 12, 31, 1920, 11, 22, 0),
    (2031, 12, 31, 2031, 11, 18, 0),
    (2032, 12, 31, 2032, 11, 29, 0),
    (2033, 12, 31, 2033, 11, 10, 0),
    (2034, 12, 31, 2034, 11, 21, 0),
    (2035, 12, 31, 2035, 12,  3, 0),
    (2036, 12, 31, 2036, 11, 15, 0),
    (2037, 12, 31, 2037, 11, 25, 0),
    (2038, 12, 31, 2038, 12,  6, 0),
    (2039, 12, 31, 2039, 11, 16, 0),
    (2040, 12, 31, 2040, 11, 28, 0),

    (1903,  1, 28, 1902, 12, 30, 0),
    (1903,  1, 29, 1903,  1,  1, 0),
    (1903,  2, 26, 1903,  1, 29, 0),
    (1903,  2, 27, 1903,  2,  1, 0),
    (1903,  3, 28, 1903,  2, 30, 0),
    (1903,  3, 29, 1903,  3,  1, 0),
    (1903,  4, 26, 1903,  3, 29, 0),
    (1903,  4, 27, 1903,  4,  1, 0),
    (1903,  5, 26, 1903,  4, 30, 0),
    (1903,  5, 27, 1903,  5,  1, 0),
    (1903,  6, 24, 1903,  5, 29, 0),
    (1903,  6, 25, 1903,  5,  1, 1),
    (1903,  7, 23, 1903,  5, 29, 1),
    (1903,  7, 24, 1903,  6,  1, 0),
    (1903,  8, 22, 1903,  6, 30, 0),
    (1903,  8, 23, 1903,  7,  1, 0),
    (1903,  9, 20, 1903,  7, 29, 0),
    (1903,  9, 21, 1903,  8,  1, 0),
    (1903, 10, 19, 1903,  8, 29, 0),
    (1903, 10, 20, 1903,  9,  1, 0),
    (1903, 11, 18, 1903,  9, 30, 0),
    (1903, 11, 19, 1903, 10,  1, 0),
    (1903, 12, 18, 1903, 10, 30, 0),
    (1903, 12, 19, 1903, 11,  1, 0),
    (1903, 12, 31, 1903, 11, 13, 0)
  );

procedure TmnDateTimeTestCase.testDateToLunar;
var
  i: Integer;
  LunarDate: mnTLunarDate;
begin
  try
    mnDateToLunar(EncodeDate(1900, 12, 31));
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SDateToLunarOutOfRange);
  end;

  try
    mnDateToLunar(EncodeDate(2051, 1, 1));
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SDateToLunarOutOfRange);
  end;

  for i := Low(Dates) to High(Dates) do
  begin
    LunarDate := mnDateToLunar(EncodeDate(Dates[i, 1], Dates[i, 2], Dates[i, 3]));
    CheckEquals(LunarDate.Year,  Dates[i, 4]);
    CheckEquals(LunarDate.Month, Dates[i, 5]);
    CheckEquals(LunarDate.Day,   Dates[i, 6]);
    CheckEquals(LunarDate.IsLeapMonth, mnIntToBool(Dates[i, 7]));
  end;
end;

procedure TmnDateTimeTestCase.testLunarToDate;
var
  i: Integer;
  LunarDate: mnTLunarDate;
  Date: TDateTime;
begin
  try
    LunarDate.Year  := 1900;
    LunarDate.Month := 12;
    LunarDate.Day   := 30;
    LunarDate.IsLeapMonth := False;
    mnLunarToDate(LunarDate);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SLunarToDateOutOfRange);
  end;

  try
    LunarDate.Year  := 2050;
    LunarDate.Month := 11;
    LunarDate.Day   := 19;
    LunarDate.IsLeapMonth := False;
    mnLunarToDate(LunarDate);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SLunarToDateOutOfRange);
  end;

  for i := Low(Dates) to High(Dates) do
  begin
    LunarDate.Year  := Dates[i, 4];
    LunarDate.Month := Dates[i, 5];
    LunarDate.Day   := Dates[i, 6];
    LunarDate.IsLeapMonth := mnIntToBool(Dates[i, 7]);
    Date := mnLunarToDate(LunarDate);
    CheckEquals(YearOf(Date),  Dates[i, 1]);
    CheckEquals(MonthOf(Date), Dates[i, 2]);
    CheckEquals(DayOf(Date),   Dates[i, 3]);
  end;
end;

procedure TmnDateTimeTestCase.testDateToLunarToDate;
var
  Date: TDateTime;
  LunarDate: mnTLunarDate;
  ConvertedDate: TDateTime;
begin
  Date := EncodeDate(1901, 2, 19);
  while Date <= EncodeDate(2050, 12, 31) do
  begin
    LunarDate := mnDateToLunar(Date);
    ConvertedDate := mnLunarToDate(LunarDate);
    CheckEquals(Date, ConvertedDate);
    Date := Date + 1;
  end;
end;

procedure TmnDateTimeTestCase.testDateToConstellation12;
begin
  Check(mnDateToConstellation12(8, 29) = ctVirgo);
  Check(mnDateToConstellation12(2, 18) = ctAquarius);
  Check(mnDateToConstellation12(1, 10) = ctCapricorn);
  Check(mnDateToConstellation12(3, 13) = ctPisces);
  Check(mnDateToConstellation12(5, 9)  = ctTaurus);

  try
    mnDateToConstellation12(0, 1);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(SIllegalMonth, [0]));
  end;
end;

procedure TmnDateTimeTestCase.testDateToAnimal12;
begin
  Check(mnDateToAnimal12(1900) = atRat);
  Check(mnDateToAnimal12(1982) = atDog);
  Check(mnDateToAnimal12(1984) = atRat);
  Check(mnDateToAnimal12(2010) = atTiger);

  try
    mnDateToAnimal12(-9);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SGoesToNeverGoesHere);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnDateTimeTestCase.Suite);
end.


