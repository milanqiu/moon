unit mnMathTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnMathTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testFloatCompareSeries;
    procedure testCompareValue2D;
    procedure testChineseRound;
    procedure testSingleDigit;
    procedure testAlignInt;
    procedure testReverseIntSeries;
    procedure testCount1InBinary;
    procedure testBitIsInBinarySeries;
    procedure testSetBitInBinarySeries;
    procedure testLocateInSections;
    procedure testPC;
    procedure testProbability;
    procedure testCombination;
  end;

implementation

uses mnMath, Types, mnSystem, mnDebug, SysUtils, mnResStrsU;

{ TmnMathTestCase }

procedure TmnMathTestCase.SetUp;
begin
end;

procedure TmnMathTestCase.TearDown;
begin
end;

procedure TmnMathTestCase.testFloatCompareSeries;
begin
  Check(mnFloatEQ(1.234, 1.234));
  CheckFalse(mnFloatEQ(1.234, 1.2340001));

  Check(mnFloatNE(1.234, 1.2340001));
  CheckFalse(mnFloatNE(1.234, 1.234));

  Check(mnFloatLT(1.234, 1.2340001));
  CheckFalse(mnFloatLT(1.234, 1.234));
  CheckFalse(mnFloatLT(1.234, 1.2339999));

  Check(mnFloatLE(1.234, 1.2340001));
  Check(mnFloatLE(1.234, 1.234));
  CheckFalse(mnFloatLE(1.234, 1.2339999));

  Check(mnFloatGT(1.234, 1.2339999));
  CheckFalse(mnFloatGT(1.234, 1.234));
  CheckFalse(mnFloatGT(1.234, 1.2340001));

  Check(mnFloatGE(1.234, 1.2339999));
  Check(mnFloatGE(1.234, 1.234));
  CheckFalse(mnFloatGE(1.234, 1.2340001));
end;

procedure TmnMathTestCase.testCompareValue2D;
begin
  Check(mnCompareValue2D(1, 2, 3, 4) = LessThanValue);
  Check(mnCompareValue2D(3, 4, 1, 2) = GreaterThanValue);
  Check(mnCompareValue2D(1, 2, 1, 4) = LessThanValue);
  Check(mnCompareValue2D(1, 4, 1, 2) = GreaterThanValue);
  Check(mnCompareValue2D(1, 2, 1, 2) = EqualsValue);
end;

procedure TmnMathTestCase.testChineseRound;
begin
  CheckEquals(mnChineseRound(4041.5), 4042);
  CheckEquals(mnChineseRound(4042.5), 4043);
  CheckEquals(mnChineseRound(4043.5), 4044);
  CheckEquals(mnChineseRound(4041.4999), 4041);
  CheckEquals(mnChineseRound(4042.4999), 4042);
  CheckEquals(mnChineseRound(4043.4999), 4043);
  CheckEquals(mnChineseRound(4041.5001), 4042);
  CheckEquals(mnChineseRound(4042.5001), 4043);
  CheckEquals(mnChineseRound(4043.5001), 4044);

  CheckEquals(mnChineseRound(40.415, -2), 40.42, mnParticle);
  CheckEquals(mnChineseRound(40.425, -2), 40.43, mnParticle);
  CheckEquals(mnChineseRound(40.435, -2), 40.44, mnParticle);
  CheckEquals(mnChineseRound(40.414999, -2), 40.41, mnParticle);
  CheckEquals(mnChineseRound(40.424999, -2), 40.42, mnParticle);
  CheckEquals(mnChineseRound(40.434999, -2), 40.43, mnParticle);
  CheckEquals(mnChineseRound(40.415001, -2), 40.42, mnParticle);
  CheckEquals(mnChineseRound(40.425001, -2), 40.43, mnParticle);
  CheckEquals(mnChineseRound(40.435001, -2), 40.44, mnParticle);

  CheckEquals(mnChineseRound(40415, 1), 40420);
  CheckEquals(mnChineseRound(40425, 1), 40430);
  CheckEquals(mnChineseRound(40435, 1), 40440);
  CheckEquals(mnChineseRound(40414.999, 1), 40410);
  CheckEquals(mnChineseRound(40424.999, 1), 40420);
  CheckEquals(mnChineseRound(40434.999, 1), 40430);
  CheckEquals(mnChineseRound(40415.001, 1), 40420);
  CheckEquals(mnChineseRound(40425.001, 1), 40430);
  CheckEquals(mnChineseRound(40435.001, 1), 40440);

  CheckEquals(mnChineseRound(-4041.5), -4042);
  CheckEquals(mnChineseRound(-4042.5), -4043);
  CheckEquals(mnChineseRound(-4043.5), -4044);
  CheckEquals(mnChineseRound(-4041.4999), -4041);
  CheckEquals(mnChineseRound(-4042.4999), -4042);
  CheckEquals(mnChineseRound(-4043.4999), -4043);
  CheckEquals(mnChineseRound(-4041.5001), -4042);
  CheckEquals(mnChineseRound(-4042.5001), -4043);
  CheckEquals(mnChineseRound(-4043.5001), -4044);

  CheckEquals(mnChineseRound(-40.415, -2), -40.42, mnParticle);
  CheckEquals(mnChineseRound(-40.425, -2), -40.43, mnParticle);
  CheckEquals(mnChineseRound(-40.435, -2), -40.44, mnParticle);
  CheckEquals(mnChineseRound(-40.414999, -2), -40.41, mnParticle);
  CheckEquals(mnChineseRound(-40.424999, -2), -40.42, mnParticle);
  CheckEquals(mnChineseRound(-40.434999, -2), -40.43, mnParticle);
  CheckEquals(mnChineseRound(-40.415001, -2), -40.42, mnParticle);
  CheckEquals(mnChineseRound(-40.425001, -2), -40.43, mnParticle);
  CheckEquals(mnChineseRound(-40.435001, -2), -40.44, mnParticle);

  CheckEquals(mnChineseRound(-40415, 1), -40420);
  CheckEquals(mnChineseRound(-40425, 1), -40430);
  CheckEquals(mnChineseRound(-40435, 1), -40440);
  CheckEquals(mnChineseRound(-40414.999, 1), -40410);
  CheckEquals(mnChineseRound(-40424.999, 1), -40420);
  CheckEquals(mnChineseRound(-40434.999, 1), -40430);
  CheckEquals(mnChineseRound(-40415.001, 1), -40420);
  CheckEquals(mnChineseRound(-40425.001, 1), -40430);
  CheckEquals(mnChineseRound(-40435.001, 1), -40440);
end;

procedure TmnMathTestCase.testSingleDigit;
begin
  CheckEquals(mnSingleDigit(0), 0);
  CheckEquals(mnSingleDigit(9), 9);
  CheckEquals(mnSingleDigit(1234567890), 9);
  CheckEquals(mnSingleDigit(1234567891), 1);
  CheckEquals(mnSingleDigit(1234567892), 2);
end;

procedure TmnMathTestCase.testAlignInt;
begin
  CheckEquals(mnAlignInt(25, 0), 25);
  CheckEquals(mnAlignInt(25, 1), 25);
  CheckEquals(mnAlignInt(25, 2), 26);
  CheckEquals(mnAlignInt(25, 3), 27);
  CheckEquals(mnAlignInt(25, 4), 28);
  CheckEquals(mnAlignInt(25, 5), 25);
  CheckEquals(mnAlignInt(25, 6), 30);

  CheckEquals(mnAlignInt(25, -1), 25);
  CheckEquals(mnAlignInt(25, -2), 26);

  CheckEquals(mnAlignInt(-25, 1), -25);
  CheckEquals(mnAlignInt(-25, 2), -26);

  CheckEquals(mnAlignInt(-25, -1), -25);
  CheckEquals(mnAlignInt(-25, -2), -26);
end;

procedure TmnMathTestCase.testReverseIntSeries;
begin
  // mnReverseInt16
  Check(mnReverseInt16($1234) = $3412);
  Check(mnReverseInt16(High(Int16)) = Int16($FF7F));
  Check(mnReverseInt16(Low(Int16)) = Int16($0080));

  // mnReverseInt32
  Check(mnReverseInt32($12345678) = $78563412);
  Check(mnReverseInt32(High(Int32)) = Int32($FFFFFF7F));
  Check(mnReverseInt32(Low(Int32)) = Int32($00000080));

  // mnReverseInt64
  Check(mnReverseInt64($1234567890ABCDEF) = $EFCDAB9078563412);
  Check(mnReverseInt64(High(Int64)) = Int64($FFFFFFFFFFFFFF7F));
  Check(mnReverseInt64(Low(Int64)) = Int64($0000000000000080));

  // mnReverseUInt16
  Check(mnReverseUInt16($1234) = $3412);
  Check(mnReverseUInt16(High(UInt16)) = UInt16($FFFF));
  Check(mnReverseUInt16(Low(UInt16)) = UInt16($0000));

  // mnReverseUInt32
  Check(mnReverseUInt32($12345678) = $78563412);
  Check(mnReverseUInt32(High(UInt32)) = UInt32($FFFFFFFF));
  Check(mnReverseUInt32(Low(UInt32)) = UInt32($00000000));
end;

procedure TmnMathTestCase.testCount1InBinary;
begin
  CheckEquals(mnCount1InBinary($00000001), 1);
  CheckEquals(mnCount1InBinary($00F00030), 6);
  CheckEquals(mnCount1InBinary($F0000000), 4);
  CheckEquals(mnCount1InBinary(High(UInt32)), 32);
  CheckEquals(mnCount1InBinary(Low(UInt32)), 0);
end;

procedure TmnMathTestCase.testBitIsInBinarySeries;
begin
  // mnBitIs1InBinary
  Check(mnBitIs1InBinary($00000002, 1));
  Check(mnBitIs1InBinary($F0000000, 31));

  // mnBitIs0InBinary
  Check(mnBitIs0InBinary($00000002, 0));
  Check(mnBitIs0InBinary($00000002, 31));
end;

procedure TmnMathTestCase.testSetBitInBinarySeries;
begin
  // mnSetBit1InBinary
  CheckEquals(mnSetBit1InBinary($00000002, 0), $00000003);
  CheckEquals(mnSetBit1InBinary($00000002, 1), $00000002);
  CheckEquals(mnSetBit1InBinary($00000002, 31), $80000002);

  // mnSetBit0InBinary
  CheckEquals(mnSetBit0InBinary($00000002, 0), $00000002);
  CheckEquals(mnSetBit0InBinary($00000002, 1), $00000000);
  CheckEquals(mnSetBit0InBinary($80000002, 31), $00000002);

  // mnSetBitInBinary
  CheckEquals(mnSetBitInBinary($00000002, 0, True), $00000003);
  CheckEquals(mnSetBitInBinary($00000002, 1, True), $00000002);
  CheckEquals(mnSetBitInBinary($00000002, 31, True), $80000002);
  CheckEquals(mnSetBitInBinary($00000002, 0, False), $00000002);
  CheckEquals(mnSetBitInBinary($00000002, 1, False), $00000000);
  CheckEquals(mnSetBitInBinary($80000002, 31, False), $00000002);
end;

procedure TmnMathTestCase.testLocateInSections;
var
  SectionIndex, ItemIndex: Integer;
  IntList: mnTIntList;
begin
  // overload form 1
  try
    mnLocateInSections(0, [], SectionIndex, ItemIndex);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SSectionsTooShort);
  end;

  try
    mnLocateInSections(10, [1, 2, 3, 4], SectionIndex, ItemIndex);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SSectionsTooShort);
  end;

  mnLocateInSections(9, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 3);
  CheckEquals(ItemIndex, 3);

  mnLocateInSections(6, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 3);
  CheckEquals(ItemIndex, 0);

  mnLocateInSections(5, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 2);
  CheckEquals(ItemIndex, 2);

  mnLocateInSections(3, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 2);
  CheckEquals(ItemIndex, 0);

  mnLocateInSections(2, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 1);
  CheckEquals(ItemIndex, 1);

  mnLocateInSections(1, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 1);
  CheckEquals(ItemIndex, 0);

  mnLocateInSections(0, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 0);
  CheckEquals(ItemIndex, 0);

  mnLocateInSections(-1, [1, 2, 3, 4], SectionIndex, ItemIndex);
  CheckEquals(SectionIndex, 0);
  CheckEquals(ItemIndex, -1);

  // overload form 2
  IntList := mnTIntList.Create;
  try
    IntList.Clear;
    try
      mnLocateInSections(0, IntList, SectionIndex, ItemIndex);
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, SSectionsTooShort);
    end;

    IntList.LoadFromArray([1, 2, 3, 4]);
    try
      mnLocateInSections(10, IntList, SectionIndex, ItemIndex);
      mnNeverGoesHere;
    except
      on E: Exception do CheckEquals(E.Message, SSectionsTooShort);
    end;

    mnLocateInSections(9, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 3);
    CheckEquals(ItemIndex, 3);

    mnLocateInSections(6, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 3);
    CheckEquals(ItemIndex, 0);

    mnLocateInSections(5, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 2);
    CheckEquals(ItemIndex, 2);

    mnLocateInSections(3, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 2);
    CheckEquals(ItemIndex, 0);

    mnLocateInSections(2, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 1);
    CheckEquals(ItemIndex, 1);

    mnLocateInSections(1, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 1);
    CheckEquals(ItemIndex, 0);

    mnLocateInSections(0, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 0);
    CheckEquals(ItemIndex, 0);

    mnLocateInSections(-1, IntList, SectionIndex, ItemIndex);
    CheckEquals(SectionIndex, 0);
    CheckEquals(ItemIndex, -1);
  finally
    IntList.Free;
  end;
end;

procedure TmnMathTestCase.testPC;
begin
  // mnP
  CheckEquals(mnP(5, 1), 5);
  CheckEquals(mnP(5, 2), 20);
  CheckEquals(mnP(5, 3), 60);
  CheckEquals(mnP(5, 4), 120);
  CheckEquals(mnP(5, 5), 120);

  CheckEquals(mnP(10, 7), 604800);
  CheckEquals(mnP(20, 5), 1860480);

  // mnC
  CheckEquals(mnC(5, 1), 5);
  CheckEquals(mnC(5, 2), 10);
  CheckEquals(mnC(5, 3), 10);
  CheckEquals(mnC(5, 4), 5);
  CheckEquals(mnC(5, 5), 1);

  CheckEquals(mnC(10, 7), 120);
  CheckEquals(mnC(20, 5), 15504);
end;

procedure TmnMathTestCase.testProbability;
var
  FullProb: mnTIntArrayDim2;
begin
  mnProbability(5, 2, FullProb);

  CheckEquals(Low(FullProb), 0);
  CheckEquals(High(FullProb), mnP(5, 2)-1);
  CheckEquals(Low(FullProb[0]), 0);
  CheckEquals(High(FullProb[0]), 2-1);

  CheckEquals(FullProb[ 0, 0], 0);
  CheckEquals(FullProb[ 0, 1], 1);
  CheckEquals(FullProb[ 1, 0], 0);
  CheckEquals(FullProb[ 1, 1], 2);
  CheckEquals(FullProb[ 2, 0], 0);
  CheckEquals(FullProb[ 2, 1], 3);
  CheckEquals(FullProb[ 3, 0], 0);
  CheckEquals(FullProb[ 3, 1], 4);
  CheckEquals(FullProb[ 4, 0], 1);
  CheckEquals(FullProb[ 4, 1], 0);
  CheckEquals(FullProb[ 5, 0], 1);
  CheckEquals(FullProb[ 5, 1], 2);
  CheckEquals(FullProb[ 6, 0], 1);
  CheckEquals(FullProb[ 6, 1], 3);
  CheckEquals(FullProb[ 7, 0], 1);
  CheckEquals(FullProb[ 7, 1], 4);
  CheckEquals(FullProb[ 8, 0], 2);
  CheckEquals(FullProb[ 8, 1], 0);
  CheckEquals(FullProb[ 9, 0], 2);
  CheckEquals(FullProb[ 9, 1], 1);
  CheckEquals(FullProb[10, 0], 2);
  CheckEquals(FullProb[10, 1], 3);
  CheckEquals(FullProb[11, 0], 2);
  CheckEquals(FullProb[11, 1], 4);
  CheckEquals(FullProb[12, 0], 3);
  CheckEquals(FullProb[12, 1], 0);
  CheckEquals(FullProb[13, 0], 3);
  CheckEquals(FullProb[13, 1], 1);
  CheckEquals(FullProb[14, 0], 3);
  CheckEquals(FullProb[14, 1], 2);
  CheckEquals(FullProb[15, 0], 3);
  CheckEquals(FullProb[15, 1], 4);
  CheckEquals(FullProb[16, 0], 4);
  CheckEquals(FullProb[16, 1], 0);
  CheckEquals(FullProb[17, 0], 4);
  CheckEquals(FullProb[17, 1], 1);
  CheckEquals(FullProb[18, 0], 4);
  CheckEquals(FullProb[18, 1], 2);
  CheckEquals(FullProb[19, 0], 4);
  CheckEquals(FullProb[19, 1], 3);
end;

procedure TmnMathTestCase.testCombination;
var
  FullComb: mnTIntArrayDim2;
begin
  mnCombination(5, 2, FullComb);

  CheckEquals(Low(FullComb), 0);
  CheckEquals(High(FullComb), mnC(5, 2)-1);
  CheckEquals(Low(FullComb[0]), 0);
  CheckEquals(High(FullComb[0]), 2-1);

  CheckEquals(FullComb[0, 0], 0);
  CheckEquals(FullComb[0, 1], 1);
  CheckEquals(FullComb[1, 0], 0);
  CheckEquals(FullComb[1, 1], 2);
  CheckEquals(FullComb[2, 0], 0);
  CheckEquals(FullComb[2, 1], 3);
  CheckEquals(FullComb[3, 0], 0);
  CheckEquals(FullComb[3, 1], 4);
  CheckEquals(FullComb[4, 0], 1);
  CheckEquals(FullComb[4, 1], 2);
  CheckEquals(FullComb[5, 0], 1);
  CheckEquals(FullComb[5, 1], 3);
  CheckEquals(FullComb[6, 0], 1);
  CheckEquals(FullComb[6, 1], 4);
  CheckEquals(FullComb[7, 0], 2);
  CheckEquals(FullComb[7, 1], 3);
  CheckEquals(FullComb[8, 0], 2);
  CheckEquals(FullComb[8, 1], 4);
  CheckEquals(FullComb[9, 0], 3);
  CheckEquals(FullComb[9, 1], 4);


  mnCombination(7, 3, FullComb);

  CheckEquals(Low(FullComb), 0);
  CheckEquals(High(FullComb), mnC(7, 3)-1);
  CheckEquals(Low(FullComb[0]), 0);
  CheckEquals(High(FullComb[0]), 3-1);

  CheckEquals(FullComb[ 0, 0], 0);
  CheckEquals(FullComb[ 0, 1], 1);
  CheckEquals(FullComb[ 0, 2], 2);
  CheckEquals(FullComb[ 1, 0], 0);
  CheckEquals(FullComb[ 1, 1], 1);
  CheckEquals(FullComb[ 1, 2], 3);
  CheckEquals(FullComb[ 2, 0], 0);
  CheckEquals(FullComb[ 2, 1], 1);
  CheckEquals(FullComb[ 2, 2], 4);
  CheckEquals(FullComb[ 3, 0], 0);
  CheckEquals(FullComb[ 3, 1], 1);
  CheckEquals(FullComb[ 3, 2], 5);
  CheckEquals(FullComb[ 4, 0], 0);
  CheckEquals(FullComb[ 4, 1], 1);
  CheckEquals(FullComb[ 4, 2], 6);
  CheckEquals(FullComb[ 5, 0], 0);
  CheckEquals(FullComb[ 5, 1], 2);
  CheckEquals(FullComb[ 5, 2], 3);
  CheckEquals(FullComb[ 6, 0], 0);
  CheckEquals(FullComb[ 6, 1], 2);
  CheckEquals(FullComb[ 6, 2], 4);
  CheckEquals(FullComb[ 7, 0], 0);
  CheckEquals(FullComb[ 7, 1], 2);
  CheckEquals(FullComb[ 7, 2], 5);
  CheckEquals(FullComb[ 8, 0], 0);
  CheckEquals(FullComb[ 8, 1], 2);
  CheckEquals(FullComb[ 8, 2], 6);
  CheckEquals(FullComb[ 9, 0], 0);
  CheckEquals(FullComb[ 9, 1], 3);
  CheckEquals(FullComb[ 9, 2], 4);
  CheckEquals(FullComb[10, 0], 0);
  CheckEquals(FullComb[10, 1], 3);
  CheckEquals(FullComb[10, 2], 5);
  CheckEquals(FullComb[11, 0], 0);
  CheckEquals(FullComb[11, 1], 3);
  CheckEquals(FullComb[11, 2], 6);
  CheckEquals(FullComb[12, 0], 0);
  CheckEquals(FullComb[12, 1], 4);
  CheckEquals(FullComb[12, 2], 5);
  CheckEquals(FullComb[13, 0], 0);
  CheckEquals(FullComb[13, 1], 4);
  CheckEquals(FullComb[13, 2], 6);
  CheckEquals(FullComb[14, 0], 0);
  CheckEquals(FullComb[14, 1], 5);
  CheckEquals(FullComb[14, 2], 6);
  CheckEquals(FullComb[15, 0], 1);
  CheckEquals(FullComb[15, 1], 2);
  CheckEquals(FullComb[15, 2], 3);
  CheckEquals(FullComb[16, 0], 1);
  CheckEquals(FullComb[16, 1], 2);
  CheckEquals(FullComb[16, 2], 4);
  CheckEquals(FullComb[17, 0], 1);
  CheckEquals(FullComb[17, 1], 2);
  CheckEquals(FullComb[17, 2], 5);
  CheckEquals(FullComb[18, 0], 1);
  CheckEquals(FullComb[18, 1], 2);
  CheckEquals(FullComb[18, 2], 6);
  CheckEquals(FullComb[19, 0], 1);
  CheckEquals(FullComb[19, 1], 3);
  CheckEquals(FullComb[19, 2], 4);
  CheckEquals(FullComb[20, 0], 1);
  CheckEquals(FullComb[20, 1], 3);
  CheckEquals(FullComb[20, 2], 5);
  CheckEquals(FullComb[21, 0], 1);
  CheckEquals(FullComb[21, 1], 3);
  CheckEquals(FullComb[21, 2], 6);
  CheckEquals(FullComb[22, 0], 1);
  CheckEquals(FullComb[22, 1], 4);
  CheckEquals(FullComb[22, 2], 5);
  CheckEquals(FullComb[23, 0], 1);
  CheckEquals(FullComb[23, 1], 4);
  CheckEquals(FullComb[23, 2], 6);
  CheckEquals(FullComb[24, 0], 1);
  CheckEquals(FullComb[24, 1], 5);
  CheckEquals(FullComb[24, 2], 6);
  CheckEquals(FullComb[25, 0], 2);
  CheckEquals(FullComb[25, 1], 3);
  CheckEquals(FullComb[25, 2], 4);
  CheckEquals(FullComb[26, 0], 2);
  CheckEquals(FullComb[26, 1], 3);
  CheckEquals(FullComb[26, 2], 5);
  CheckEquals(FullComb[27, 0], 2);
  CheckEquals(FullComb[27, 1], 3);
  CheckEquals(FullComb[27, 2], 6);
  CheckEquals(FullComb[28, 0], 2);
  CheckEquals(FullComb[28, 1], 4);
  CheckEquals(FullComb[28, 2], 5);
  CheckEquals(FullComb[29, 0], 2);
  CheckEquals(FullComb[29, 1], 4);
  CheckEquals(FullComb[29, 2], 6);
  CheckEquals(FullComb[30, 0], 2);
  CheckEquals(FullComb[30, 1], 5);
  CheckEquals(FullComb[30, 2], 6);
  CheckEquals(FullComb[31, 0], 3);
  CheckEquals(FullComb[31, 1], 4);
  CheckEquals(FullComb[31, 2], 5);
  CheckEquals(FullComb[32, 0], 3);
  CheckEquals(FullComb[32, 1], 4);
  CheckEquals(FullComb[32, 2], 6);
  CheckEquals(FullComb[33, 0], 3);
  CheckEquals(FullComb[33, 1], 5);
  CheckEquals(FullComb[33, 2], 6);
  CheckEquals(FullComb[34, 0], 4);
  CheckEquals(FullComb[34, 1], 5);
  CheckEquals(FullComb[34, 2], 6);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnMathTestCase.Suite);
end.