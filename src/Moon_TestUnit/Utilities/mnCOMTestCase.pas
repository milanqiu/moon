unit mnCOMTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, mnCOM;

type
  TmnCOMTestCase = class(TTestCase)
  strict private
    Excel: mnTExcel;
    Word: mnTWord;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testExcel_AreaSeries;
    procedure testExcel_FileSeries;
    procedure testExcel_AppSeries;
    procedure testExcel_SheetSeries;
    procedure testExcel_IsSameAs;
    procedure testExcel_CountSeries;
    procedure testExcelArea_AnchorRowAndColumnIndex;
    procedure testExcelArea_ColumnWidth;
    procedure testExcelArea_RowHeight;
    procedure testExcelArea_ClearContents;
    procedure testExcelArea_Clear;
    procedure testExcelArea_CopyAndPaste;
    procedure testExcelCell_Value;
    procedure testExcelCell_AsSeries;
    procedure testExcelCell_LoadFromArrayOverload1;
    procedure testExcelCell_LoadFromArrayOverload2;
    procedure testExcelRow_LoadSaveArrayOverload1;
    procedure testExcelRow_LoadSaveArrayOverload2;
    procedure testExcelRow_LoadSaveArrayOverload3;
    procedure testExcelRow_LoadSaveArrayOverload4;
    procedure testExcelRow_LoadSaveArrayOverload5;
    procedure testExcelRow_LoadSaveArrayOverload6;
    procedure testExcelColumn_LoadSaveArrayOverload1;
    procedure testExcelColumn_LoadSaveArrayOverload2;
    procedure testExcelColumn_LoadSaveArrayOverload3;
    procedure testExcelColumn_LoadSaveArrayOverload4;
    procedure testExcelColumn_LoadSaveArrayOverload5;
    procedure testExcelColumn_LoadSaveArrayOverload6;
    procedure testExcelRange_LoadSaveVA;
    procedure testExcelRange_LoadSaveArrayOverload1;
    procedure testExcelRange_LoadSaveArrayOverload2;
    procedure testExcelRange_IsSameAs;

    procedure testWord_AreaSeries;
    procedure testWord_FileSeries;
    procedure testWord_AppSeries;
    procedure testWord_IsSameAs;
    procedure testWord_CountSeries;
    procedure testWordArea_Text;
    procedure testWordArea_Replace;
    procedure testWordArea_ReplaceAll;
    procedure testWordSelection_TextSeries;
    procedure testWordSelection_InsertTable;
    procedure testWordTable_RowColumnSeries;
    procedure testWordCell_ActualText;
  end;

implementation

uses mnSystem, SysUtils, mnResStrsU, Variants, Windows, mnDebug, mnMath, StrUtils, UTestConsts, mnFile;

{ TmnCOMTestCase }

procedure TmnCOMTestCase.SetUp;
begin
  Excel := mnTExcel.Create;
  Word := mnTWord.Create;
end;

procedure TmnCOMTestCase.TearDown;
begin
  Excel.Free;
  Excel := nil;
  Word.Free;
  Word := nil;
end;

procedure TmnCOMTestCase.testExcel_AreaSeries;
var
  Times: Integer;
  i, j, m, n: Integer;
begin
  Excel.New;

  // Cells
  for Times := 1 to 2 do
    for i := 1 to 10 do
      for j := 1 to 10 do
      begin
        CheckEquals(Excel.Cells[i, j].RowIndex, i);
        CheckEquals(Excel.Cells[i, j].ColumnIndex, j);
      end;

  // Rows
  for Times := 1 to 2 do
    for i := 1 to 10 do
      CheckEquals(Excel.Rows[i].RowIndex, i);

  // Columns
  for Times := 1 to 2 do
    for i := 1 to 10 do
      CheckEquals(Excel.Columns[i].ColumnIndex, i);

  // Range
  for Times := 1 to 2 do
    for i := 1 to 10 do
      for j := 1 to 10 do
        for m := i to 10 do
          for n := j to 10 do
          begin
            CheckEquals(Excel.Range[i, j, m, n].TopRowIndex, i);
            CheckEquals(Excel.Range[i, j, m, n].LeftColumnIndex, j);
            CheckEquals(Excel.Range[i, j, m, n].BottomRowIndex, m);
            CheckEquals(Excel.Range[i, j, m, n].RightColumnIndex, n);
          end;
end;

procedure TmnCOMTestCase.testExcel_FileSeries;
var
  FileName: string;
begin
  FileName := mnTProjectConvention.GetTestTempPathSub('temp.xlsx');

  // New
  Excel.New;
  Excel.Cells[1, 2].Value := Str_0;
  Excel.Cells[4, 3].Value := Str_1;
  Excel.Cells[3, 5].Value := Str_2;

  // Save, SaveAs and Close
  try
    Excel.Save;
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SExcelFileNameNotAssigned);
  end;
  Excel.SaveAs(FileName);
  Excel.Close;

  // Open, Save and Close
  Excel.Open(FileName);
  Check(Excel.Cells[1, 2].Value = Str_0);
  Check(Excel.Cells[4, 3].Value = Str_1);
  Check(Excel.Cells[3, 5].Value = Str_2);
  Excel.Cells[1, 2].Value := Str_3;
  Excel.Save;
  Excel.Open(FileName);
  Check(Excel.Cells[1, 2].Value = Str_3);
  Excel.Close;

  Check(mnDeleteFile(FileName));
end;

procedure TmnCOMTestCase.testExcel_AppSeries;
begin
  Excel.New;

  // Visible
  Excel.Visible := True;
  CheckEquals(Excel.Visible, True);
  Excel.Visible := False;
end;

procedure TmnCOMTestCase.testExcel_SheetSeries;
begin
  Excel.New;

  // SheetCount
  CheckEquals(Excel.SheetCount, 3);

  // SheetNames
  CheckEquals(Excel.SheetNames[1], 'Sheet1');
  CheckEquals(Excel.SheetNames[2], 'Sheet2');
  CheckEquals(Excel.SheetNames[3], 'Sheet3');
  Excel.SheetNames[2] := 'qiugc';
  CheckEquals(Excel.SheetNames[2], 'qiugc');
  Excel.SheetNames[2] := 'Sheet2';

  // ActiveSheetIndex and SetActiveSheet
  try
    Excel.SetActiveSheet(0);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, Format(SSheetIndexError, [0, Excel.SheetCount]));
  end;
  Excel.SetActiveSheet(2);
  CheckEquals(Excel.ActiveSheetIndex, 2);

  // AddSheet
  Excel.AddSheet;
  CheckEquals(Excel.SheetCount, 4);
  CheckEquals(Excel.SheetNames[1], 'Sheet1');
  CheckEquals(Excel.SheetNames[2], 'Sheet4');
  CheckEquals(Excel.SheetNames[3], 'Sheet2');
  CheckEquals(Excel.SheetNames[4], 'Sheet3');
  CheckEquals(Excel.ActiveSheetIndex, 2);

  // DeleteSheet
  Excel.SetActiveSheet(3);
  Excel.DeleteSheet(2);
  CheckEquals(Excel.SheetCount, 3);
  CheckEquals(Excel.SheetNames[1], 'Sheet1');
  CheckEquals(Excel.SheetNames[2], 'Sheet2');
  CheckEquals(Excel.SheetNames[3], 'Sheet3');
  CheckEquals(Excel.ActiveSheetIndex, 2);

  Excel.DeleteSheet(2);
  CheckEquals(Excel.SheetNames[1], 'Sheet1');
  CheckEquals(Excel.SheetNames[2], 'Sheet3');
  CheckEquals(Excel.ActiveSheetIndex, 2);

  Excel.DeleteSheet(2);
  CheckEquals(Excel.SheetNames[1], 'Sheet1');
  CheckEquals(Excel.ActiveSheetIndex, 1);
end;

procedure TmnCOMTestCase.testExcel_IsSameAs;
var
  AnotherExcel: mnTExcel;
begin
  AnotherExcel := mnTExcel.Create;
  try
    Excel.New;
    AnotherExcel.New;
    Check(Excel.IsSameAs(AnotherExcel));

    Excel.Cells[2, 3].Value := Str_0;
    Excel.Cells[2, 4].Value := Int_0;
    Excel.Cells[2, 5].Value := Float_0;
    Excel.Cells[3, 3].Value := DT_0;
    Excel.Cells[3, 4].Value := Curr_0;
    Excel.Cells[3, 5].Value := Bool_0;

    AnotherExcel.Cells[2, 3].Value := Str_0;
    AnotherExcel.Cells[2, 4].Value := Int_0;
    AnotherExcel.Cells[2, 5].Value := Float_0;
    AnotherExcel.Cells[3, 3].Value := DT_0;
    AnotherExcel.Cells[3, 4].Value := Curr_0;
    AnotherExcel.Cells[3, 5].Value := Bool_0;

    Check(Excel.IsSameAs(AnotherExcel));

    Excel.Cells[2, 3].Value := Str_1;
    CheckFalse(Excel.IsSameAs(AnotherExcel));

    Excel.Cells[2, 3].Value := Str_0;
    Check(Excel.IsSameAs(AnotherExcel));
    Excel.SheetNames[1] := Str_4;
    CheckFalse(Excel.IsSameAs(AnotherExcel));

    Excel.SheetNames[1] := 'Sheet1';
    Check(Excel.IsSameAs(AnotherExcel));
    Excel.AddSheet;
    CheckFalse(Excel.IsSameAs(AnotherExcel));
  finally
    AnotherExcel.Free;
  end;
end;

procedure TmnCOMTestCase.testExcel_CountSeries;
begin
  Excel.New;
  CheckEquals(Excel.SimpleRowCount, 1);
  CheckEquals(Excel.SimpleColumnCount, 1);
  CheckEquals(Excel.RowCount, 1);
  CheckEquals(Excel.ColumnCount, 1);

  Excel.Cells[1, 2].Value := Var_0;
  Excel.Cells[4, 3].Value := Var_1;
  Excel.Cells[3, 5].Value := Var_2;
  CheckEquals(Excel.SimpleRowCount, 4);
  CheckEquals(Excel.SimpleColumnCount, 5);
  CheckEquals(Excel.RowCount, 4);
  CheckEquals(Excel.ColumnCount, 5);

  Excel.Cells[4, 3].Value := Null;
  Excel.Cells[3, 5].ClearContents;
  CheckEquals(Excel.SimpleRowCount, 4);
  CheckEquals(Excel.SimpleColumnCount, 5);
  CheckEquals(Excel.RowCount, 1);
  CheckEquals(Excel.ColumnCount, 2);
end;

procedure TmnCOMTestCase.testExcelArea_AnchorRowAndColumnIndex;
begin
  Excel.New;

  CheckEquals(Excel.Global.AnchorRowIndex, 1);
  CheckEquals(Excel.Global.AnchorColumnIndex, 1);

  CheckEquals(Excel.UsedRange.AnchorRowIndex, 1);
  CheckEquals(Excel.UsedRange.AnchorColumnIndex, 1);

  CheckEquals(Excel.Cells[1, 2].AnchorRowIndex, 1);
  CheckEquals(Excel.Cells[1, 2].AnchorColumnIndex, 2);

  CheckEquals(Excel.Rows[3].AnchorRowIndex, 3);
  CheckEquals(Excel.Rows[3].AnchorColumnIndex, 1);

  CheckEquals(Excel.Columns[4].AnchorRowIndex, 1);
  CheckEquals(Excel.Columns[4].AnchorColumnIndex, 4);

  CheckEquals(Excel.Range[5, 6, 7, 8].AnchorRowIndex, 5);
  CheckEquals(Excel.Range[5, 6, 7, 8].AnchorColumnIndex, 6);
end;

procedure TmnCOMTestCase.testExcelArea_ColumnWidth;
begin
  Excel.New;

  Excel.Global.ColumnWidth := 1;
  CheckEquals(Excel.Global.ColumnWidth, 1);

  Excel.UsedRange.ColumnWidth := 2;
  CheckEquals(Excel.UsedRange.ColumnWidth, 2);

  Excel.Cells[1, 2].ColumnWidth := 3;
  CheckEquals(Excel.Cells[1, 2].ColumnWidth, 3);

  Excel.Rows[3].ColumnWidth := 4;
  CheckEquals(Excel.Rows[3].ColumnWidth, 4);

  Excel.Columns[4].ColumnWidth := 5;
  CheckEquals(Excel.Columns[4].ColumnWidth, 5);

  Excel.Range[5, 6, 7, 8].ColumnWidth := 6;
  CheckEquals(Excel.Range[5, 6, 7, 8].ColumnWidth, 6);
end;

procedure TmnCOMTestCase.testExcelArea_RowHeight;
begin
  Excel.New;

  Excel.Global.RowHeight := 1;
  CheckEquals(Excel.Global.RowHeight, 1);

  Excel.UsedRange.RowHeight := 2;
  CheckEquals(Excel.UsedRange.RowHeight, 2);

  Excel.Cells[1, 2].RowHeight := 3;
  CheckEquals(Excel.Cells[1, 2].RowHeight, 3);

  Excel.Rows[3].RowHeight := 4;
  CheckEquals(Excel.Rows[3].RowHeight, 4);

  Excel.Columns[4].RowHeight := 5;
  CheckEquals(Excel.Columns[4].RowHeight, 5);

  Excel.Range[5, 6, 7, 8].RowHeight := 6;
  CheckEquals(Excel.Range[5, 6, 7, 8].RowHeight, 6);
end;

procedure TmnCOMTestCase.testExcelArea_ClearContents;
begin
  Excel.New;
  Excel.Cells[1, 2].Value := 2;
  Check(Excel.Cells[1, 2].Value = 2);
  Excel.Cells[1, 2].ClearContents;
  Check(Excel.Cells[1, 2].Value = Unassigned);
end;

procedure TmnCOMTestCase.testExcelArea_Clear;
begin
  Excel.New;
  Excel.Cells[1, 2].Value := 2;
  Check(Excel.Cells[1, 2].Value = 2);
  Excel.Cells[1, 2].Clear;
  Check(Excel.Cells[1, 2].Value = Unassigned);
end;

procedure TmnCOMTestCase.testExcelArea_CopyAndPaste;
begin
  Excel.New;

  // Global ->, Preparing
  Excel.SetActiveSheet(1);
  Excel.Cells[2, 3].AsString := 'AA';
  Excel.Cells[2, 4].AsString := 'AB';
  Excel.Cells[3, 3].AsString := 'BA';
  Excel.Cells[3, 4].AsString := 'BB';

  // Global -> Global
  Excel.Global.Copy;
  Excel.SetActiveSheet(2);
  Excel.Global.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[2, 4].AsString, 'AB');
  CheckEquals(Excel.Cells[3, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[3, 4].AsString, 'BB');
  Excel.Global.Clear;

  // Global -> UsedRange
  Excel.SetActiveSheet(1);
  Excel.Global.Copy;
  Excel.SetActiveSheet(2);
  Excel.UsedRange.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[2, 4].AsString, 'AB');
  CheckEquals(Excel.Cells[3, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[3, 4].AsString, 'BB');
  Excel.Global.Clear;


  // Cell ->, Preparing
  Excel.SetActiveSheet(1);
  Excel.Global.Clear;
  Excel.Cells[1, 2].AsString := 'DD';

  // Cell -> Global
  {
  DISABLED IN EXCEL 2010
  Excel.Cells[1, 2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Global.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, 'DD');
  CheckEquals(Excel.Cells[1, 2].AsString, 'DD');
  CheckEquals(Excel.Cells[2, 1].AsString, 'DD');
  Excel.Global.Clear;
  }

  // Cell -> UsedRange
  Excel.SetActiveSheet(1);
  Excel.Cells[1, 2].Copy;
  Excel.SetActiveSheet(2);
  Excel.UsedRange.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, 'DD');
  CheckEquals(Excel.Cells[1, 2].AsString, '');
  CheckEquals(Excel.Cells[2, 1].AsString, '');
  Excel.Global.Clear;

  // Cell -> Cell
  Excel.SetActiveSheet(1);
  Excel.Cells[1, 2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Cells[3, 4].Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[3, 4].AsString, 'DD');
  Excel.Global.Clear;

  // Cell -> Row
  Excel.SetActiveSheet(1);
  Excel.Cells[1, 2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Rows[3].Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[3, 1].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 2].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 3].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 99].AsString, 'DD');
  Excel.Global.Clear;

  // Cell -> Column
  Excel.SetActiveSheet(1);
  Excel.Cells[1, 2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Columns[4].Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[1, 4].AsString, 'DD');
  CheckEquals(Excel.Cells[2, 4].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 4].AsString, 'DD');
  CheckEquals(Excel.Cells[99, 4].AsString, 'DD');
  Excel.Global.Clear;

  // Cell -> Range
  Excel.SetActiveSheet(1);
  Excel.Cells[1, 2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Range[2, 3, 3, 4].Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, 'DD');
  CheckEquals(Excel.Cells[2, 4].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 3].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 4].AsString, 'DD');
  CheckEquals(Excel.Cells[3, 5].AsString, '');
  CheckEquals(Excel.Cells[4, 4].AsString, '');
  Excel.Global.Clear;


  // UsedRange / Range ->, Preparing
  Excel.SetActiveSheet(1);
  Excel.Global.Clear;
  Excel.Cells[2, 3].AsString := 'AA';
  Excel.Cells[2, 4].AsString := 'AB';
  Excel.Cells[3, 3].AsString := 'BA';
  Excel.Cells[3, 4].AsString := 'BB';

  // UsedRange / Range -> Global
  {
  DISABLED IN EXCEL 2010
  Excel.UsedRange.Copy;
  Excel.SetActiveSheet(2);
  Excel.Global.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, 'AA');
  CheckEquals(Excel.Cells[1, 2].AsString, 'AB');
  CheckEquals(Excel.Cells[2, 1].AsString, 'BA');
  CheckEquals(Excel.Cells[2, 2].AsString, 'BB');
  CheckEquals(Excel.Cells[1, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[1, 4].AsString, 'AB');
  CheckEquals(Excel.Cells[3, 1].AsString, 'AA');
  CheckEquals(Excel.Cells[4, 1].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 4].AsString, 'BB');
  Excel.Global.Clear;
  }

  // UsedRange / Range -> UsedRange
  Excel.SetActiveSheet(1);
  Excel.Range[2, 3, 3, 4].Copy;
  Excel.SetActiveSheet(2);
  Excel.UsedRange.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, 'AA');
  CheckEquals(Excel.Cells[1, 2].AsString, 'AB');
  CheckEquals(Excel.Cells[2, 1].AsString, 'BA');
  CheckEquals(Excel.Cells[2, 2].AsString, 'BB');
  CheckEquals(Excel.Cells[1, 3].AsString, '');
  CheckEquals(Excel.Cells[3, 1].AsString, '');
  Excel.Global.Clear;

  // UsedRange / Range -> Cell
  Excel.SetActiveSheet(1);
  Excel.UsedRange.Copy;
  Excel.SetActiveSheet(2);
  Excel.Cells[4, 5].Paste;
  CheckEquals(Excel.Cells[4, 5].AsString, 'AA');
  CheckEquals(Excel.Cells[4, 6].AsString, 'AB');
  CheckEquals(Excel.Cells[5, 5].AsString, 'BA');
  CheckEquals(Excel.Cells[5, 6].AsString, 'BB');
  CheckEquals(Excel.Cells[4, 7].AsString, '');
  CheckEquals(Excel.Cells[6, 5].AsString, '');
  Excel.Global.Clear;

  // UsedRange / Range -> Row
  Excel.SetActiveSheet(1);
  Excel.Range[2, 3, 3, 4].Copy;
  Excel.SetActiveSheet(2);
  Excel.Rows[3].Paste;
  CheckEquals(Excel.Cells[3, 1].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 2].AsString, 'AB');
  CheckEquals(Excel.Cells[4, 1].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 2].AsString, 'BB');
  CheckEquals(Excel.Cells[3, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 4].AsString, 'AB');
  CheckEquals(Excel.Cells[4, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 4].AsString, 'BB');
  CheckEquals(Excel.Cells[5, 1].AsString, '');
  Excel.Global.Clear;

  // UsedRange / Range -> Column
  Excel.SetActiveSheet(1);
  Excel.UsedRange.Copy;
  Excel.SetActiveSheet(2);
  Excel.Columns[3].Paste;
  CheckEquals(Excel.Cells[1, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[1, 4].AsString, 'AB');
  CheckEquals(Excel.Cells[2, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[2, 4].AsString, 'BB');
  CheckEquals(Excel.Cells[3, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 4].AsString, 'AB');
  CheckEquals(Excel.Cells[4, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 4].AsString, 'BB');
  CheckEquals(Excel.Cells[1, 5].AsString, '');
  Excel.Global.Clear;

  // UsedRange / Range -> Range, divisible
  Excel.SetActiveSheet(1);
  Excel.Range[2, 3, 3, 4].Copy;
  Excel.SetActiveSheet(2);
  Excel.Range[5, 6, 8, 9].Paste;
  CheckEquals(Excel.Cells[5, 6].AsString, 'AA');
  CheckEquals(Excel.Cells[5, 7].AsString, 'AB');
  CheckEquals(Excel.Cells[6, 6].AsString, 'BA');
  CheckEquals(Excel.Cells[6, 7].AsString, 'BB');
  CheckEquals(Excel.Cells[5, 8].AsString, 'AA');
  CheckEquals(Excel.Cells[5, 9].AsString, 'AB');
  CheckEquals(Excel.Cells[6, 8].AsString, 'BA');
  CheckEquals(Excel.Cells[6, 9].AsString, 'BB');
  CheckEquals(Excel.Cells[7, 6].AsString, 'AA');
  CheckEquals(Excel.Cells[7, 7].AsString, 'AB');
  CheckEquals(Excel.Cells[8, 6].AsString, 'BA');
  CheckEquals(Excel.Cells[8, 7].AsString, 'BB');
  CheckEquals(Excel.Cells[7, 8].AsString, 'AA');
  CheckEquals(Excel.Cells[7, 9].AsString, 'AB');
  CheckEquals(Excel.Cells[8, 8].AsString, 'BA');
  CheckEquals(Excel.Cells[8, 9].AsString, 'BB');
  CheckEquals(Excel.Cells[5, 10].AsString, '');
  CheckEquals(Excel.Cells[9, 6].AsString, '');
  Excel.Global.Clear;

  // UsedRange / Range -> Range, indivisible
  Excel.SetActiveSheet(1);
  Excel.Range[2, 3, 3, 4].Copy;
  Excel.SetActiveSheet(2);
  Excel.Range[5, 6, 7, 8].Paste;
  CheckEquals(Excel.Cells[5, 6].AsString, 'AA');
  CheckEquals(Excel.Cells[5, 7].AsString, 'AB');
  CheckEquals(Excel.Cells[6, 6].AsString, 'BA');
  CheckEquals(Excel.Cells[6, 7].AsString, 'BB');
  CheckEquals(Excel.Cells[5, 8].AsString, '');
  CheckEquals(Excel.Cells[5, 9].AsString, '');
  CheckEquals(Excel.Cells[7, 6].AsString, '');
  CheckEquals(Excel.Cells[7, 7].AsString, '');
  Excel.Global.Clear;

  // UsedRange / Range -> Range, less range
  Excel.SetActiveSheet(1);
  Excel.Range[2, 3, 3, 4].Copy;
  Excel.SetActiveSheet(2);
  Excel.Range[5, 6, 5, 6].Paste;
  CheckEquals(Excel.Cells[5, 6].AsString, 'AA');
  CheckEquals(Excel.Cells[5, 7].AsString, 'AB');
  CheckEquals(Excel.Cells[6, 6].AsString, 'BA');
  CheckEquals(Excel.Cells[6, 7].AsString, 'BB');
  CheckEquals(Excel.Cells[5, 8].AsString, '');
  CheckEquals(Excel.Cells[5, 9].AsString, '');
  CheckEquals(Excel.Cells[7, 6].AsString, '');
  CheckEquals(Excel.Cells[7, 7].AsString, '');
  Excel.Global.Clear;


  // Row ->, Preparing
  Excel.SetActiveSheet(1);
  Excel.Global.Clear;
  Excel.Cells[2, 2].AsString := 'AA';
  Excel.Cells[2, 3].AsString := 'AB';

  // Row -> Global
  {
  DISABLED IN EXCEL 2010
  Excel.Rows[2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Global.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[1, 2].AsString, 'AA');
  CheckEquals(Excel.Cells[1, 3].AsString, 'AB');
  CheckEquals(Excel.Cells[1, 4].AsString, '');
  CheckEquals(Excel.Cells[2, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 2].AsString, 'AA');
  CheckEquals(Excel.Cells[2, 3].AsString, 'AB');
  CheckEquals(Excel.Cells[2, 4].AsString, '');
  CheckEquals(Excel.Cells[3, 1].AsString, '');
  CheckEquals(Excel.Cells[3, 2].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 3].AsString, 'AB');
  CheckEquals(Excel.Cells[3, 4].AsString, '');
  Excel.Global.Clear;
  }

  // Row -> UsedRange
  Excel.SetActiveSheet(1);
  Excel.Rows[2].Copy;
  Excel.SetActiveSheet(2);
  Excel.UsedRange.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[1, 2].AsString, 'AA');
  CheckEquals(Excel.Cells[1, 3].AsString, 'AB');
  CheckEquals(Excel.Cells[1, 4].AsString, '');
  CheckEquals(Excel.Cells[2, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 2].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, '');
  CheckEquals(Excel.Cells[2, 4].AsString, '');
  Excel.Global.Clear;

  // Row -> Row
  Excel.SetActiveSheet(1);
  Excel.Rows[2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Rows[3].Paste;
  CheckEquals(Excel.Cells[3, 1].AsString, '');
  CheckEquals(Excel.Cells[3, 2].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 3].AsString, 'AB');
  CheckEquals(Excel.Cells[3, 4].AsString, '');
  CheckEquals(Excel.Cells[2, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 2].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, '');
  CheckEquals(Excel.Cells[2, 4].AsString, '');
  CheckEquals(Excel.Cells[4, 1].AsString, '');
  CheckEquals(Excel.Cells[4, 2].AsString, '');
  CheckEquals(Excel.Cells[4, 3].AsString, '');
  CheckEquals(Excel.Cells[4, 4].AsString, '');
  Excel.Global.Clear;


  // Column ->, Preparing
  Excel.SetActiveSheet(1);
  Excel.Global.Clear;
  Excel.Cells[2, 2].AsString := 'AA';
  Excel.Cells[3, 2].AsString := 'BA';

  // Column -> Global
  Excel.Columns[2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Global.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 1].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 1].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 1].AsString, '');
  CheckEquals(Excel.Cells[1, 2].AsString, '');
  CheckEquals(Excel.Cells[2, 2].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 2].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 2].AsString, '');
  CheckEquals(Excel.Cells[1, 3].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 3].AsString, '');
  Excel.Global.Clear;

  // Column -> UsedRange
  Excel.SetActiveSheet(1);
  Excel.Columns[2].Copy;
  Excel.SetActiveSheet(2);
  Excel.UsedRange.Paste;
  CheckEquals(Excel.Cells[1, 1].AsString, '');
  CheckEquals(Excel.Cells[2, 1].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 1].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 1].AsString, '');
  CheckEquals(Excel.Cells[1, 2].AsString, '');
  CheckEquals(Excel.Cells[2, 2].AsString, '');
  CheckEquals(Excel.Cells[3, 2].AsString, '');
  CheckEquals(Excel.Cells[4, 2].AsString, '');
  Excel.Global.Clear;

  // Column -> Column
  Excel.SetActiveSheet(1);
  Excel.Columns[2].Copy;
  Excel.SetActiveSheet(2);
  Excel.Columns[3].Paste;
  CheckEquals(Excel.Cells[1, 3].AsString, '');
  CheckEquals(Excel.Cells[2, 3].AsString, 'AA');
  CheckEquals(Excel.Cells[3, 3].AsString, 'BA');
  CheckEquals(Excel.Cells[4, 3].AsString, '');
  CheckEquals(Excel.Cells[1, 2].AsString, '');
  CheckEquals(Excel.Cells[2, 2].AsString, '');
  CheckEquals(Excel.Cells[3, 2].AsString, '');
  CheckEquals(Excel.Cells[4, 2].AsString, '');
  CheckEquals(Excel.Cells[1, 4].AsString, '');
  CheckEquals(Excel.Cells[2, 4].AsString, '');
  CheckEquals(Excel.Cells[3, 4].AsString, '');
  CheckEquals(Excel.Cells[4, 4].AsString, '');
  Excel.Global.Clear;
end;

procedure TmnCOMTestCase.testExcelCell_Value;
begin
  Excel.New;

  Excel.Cells[1, 2].Value := Var_0;
  Excel.Cells[4, 3].Value := Var_1;
  Excel.Cells[3, 5].Value := Var_4;
  Check(Excel.Cells[1, 2].Value = Var_0);
  Check(Excel.Cells[4, 3].Value = Var_1);
  Check(Excel.Cells[3, 5].Value = Var_4);

  Check(Excel.Cells[1, 1].Value = Unassigned);
end;

procedure TmnCOMTestCase.testExcelCell_AsSeries;
begin
  Excel.New;

  // AsString
  Excel.Cells[1, 2].AsString := Str_0;
  CheckEquals(Excel.Cells[1, 2].AsString, Str_0);
  Check(Excel.Cells[1, 2].Value = Str_0);
  Check(Excel.Cells[1, 1].AsString = '');

  // AsInteger
  Excel.Cells[1, 2].AsInteger := Int_0;
  CheckEquals(Excel.Cells[1, 2].AsInteger, Int_0);
  Check(Excel.Cells[1, 2].Value = Int_0);
  Check(Excel.Cells[1, 1].AsInteger = 0);

  // AsFloat
  Excel.Cells[1, 2].AsFloat := Float_0;
  CheckEquals(Excel.Cells[1, 2].AsFloat, Float_0, mnParticle);
  Check(Excel.Cells[1, 2].Value = Float_0);
  Check(Excel.Cells[1, 1].AsFloat = 0);

  // AsDateTime
  Excel.Cells[1, 2].AsDateTime := DT_0;
  CheckEquals(Excel.Cells[1, 2].AsDateTime, DT_0, mnParticle);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[1, 2].Value), DT_0));
  Check(Excel.Cells[1, 1].AsDateTime = 0);

  // AsCurrency
  Excel.Cells[1, 2].AsCurrency := Curr_0;
  CheckEquals(Excel.Cells[1, 2].AsCurrency, Curr_0, mnParticle);
  Check(Excel.Cells[1, 2].Value = Curr_0);
  Check(Excel.Cells[1, 1].AsCurrency = 0);
end;

procedure TmnCOMTestCase.testExcelCell_LoadFromArrayOverload1;
var
  SrcArr: mnTVarArrayDim2;
begin
  Excel.New;

  SetLength(SrcArr, 2, 3);
  SrcArr[0][0] := Str_0;
  SrcArr[0][1] := Str_1;
  SrcArr[0][2] := Str_2;
  SrcArr[1][0] := Int_0;
  SrcArr[1][1] := Int_1;
  SrcArr[1][2] := Int_2;

  Excel.Cells[2, 3].LoadFromArray(SrcArr);
  Check(Excel.Cells[2, 3].Value = Str_0);
  Check(Excel.Cells[2, 4].Value = Str_1);
  Check(Excel.Cells[2, 5].Value = Str_2);
  Check(Excel.Cells[2, 6].Value = Unassigned);
  Check(Excel.Cells[3, 3].Value = Int_0);
  Check(Excel.Cells[3, 4].Value = Int_1);
  Check(Excel.Cells[3, 5].Value = Int_2);
  Check(Excel.Cells[3, 6].Value = Unassigned);
  Check(Excel.Cells[4, 3].Value = Unassigned);
  Check(Excel.Cells[4, 4].Value = Unassigned);
  Check(Excel.Cells[4, 5].Value = Unassigned);
  Check(Excel.Cells[4, 6].Value = Unassigned);
end;

procedure TmnCOMTestCase.testExcelCell_LoadFromArrayOverload2;
var
  SrcArr: mnTStrArrayDim2;
begin
  Excel.New;

  SetLength(SrcArr, 2, 3);
  SrcArr[0][0] := Str_0;
  SrcArr[0][1] := Str_1;
  SrcArr[0][2] := Str_2;
  SrcArr[1][0] := IntToStr(Int_0);
  SrcArr[1][1] := IntToStr(Int_1);
  SrcArr[1][2] := IntToStr(Int_2);

  Excel.Cells[2, 3].LoadFromArray(SrcArr);
  Check(Excel.Cells[2, 3].Value = Str_0);
  Check(Excel.Cells[2, 4].Value = Str_1);
  Check(Excel.Cells[2, 5].Value = Str_2);
  Check(Excel.Cells[2, 6].Value = Unassigned);
  Check(Excel.Cells[3, 3].Value = IntToStr(Int_0));
  Check(Excel.Cells[3, 4].Value = IntToStr(Int_1));
  Check(Excel.Cells[3, 5].Value = IntToStr(Int_2));
  Check(Excel.Cells[3, 6].Value = Unassigned);
  Check(Excel.Cells[4, 3].Value = Unassigned);
  Check(Excel.Cells[4, 4].Value = Unassigned);
  Check(Excel.Cells[4, 5].Value = Unassigned);
  Check(Excel.Cells[4, 6].Value = Unassigned);
end;

procedure TmnCOMTestCase.testExcelRow_LoadSaveArrayOverload1;
var
  SrcArr, DstArray: array of Variant;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Var_0;
  SrcArr[1] := Var_1;
  SrcArr[2] := Var_4;

  Excel.Rows[1].LoadFromArray(2, 4, SrcArr);
  Check(Excel.Cells[1, 2].Value = Var_0);
  Check(Excel.Cells[1, 3].Value = Var_1);
  Check(Excel.Cells[1, 4].Value = Var_4);
  Check(Excel.Cells[1, 5].Value = Unassigned);

  Excel.Rows[2].LoadFromArray(2, 3, SrcArr);
  Check(Excel.Cells[2, 2].Value = Var_0);
  Check(Excel.Cells[2, 3].Value = Var_1);
  Check(Excel.Cells[2, 4].Value = Unassigned);

  Excel.Rows[3].LoadFromArray(2, 8, SrcArr);
  Check(Excel.Cells[3, 2].Value = Var_0);
  Check(Excel.Cells[3, 3].Value = Var_1);
  Check(Excel.Cells[3, 4].Value = Var_4);
  Check(Excel.Cells[3, 5].Value = Var_0);
  Check(Excel.Cells[3, 6].Value = Var_1);
  Check(Excel.Cells[3, 7].Value = Var_4);
  Check(Excel.Cells[3, 8].Value = Var_0);
  Check(Excel.Cells[3, 9].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Rows[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Rows[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Var_1);
  CheckEquals(DstArray[1], Var_4);
  CheckEquals(DstArray[2], 0);
  CheckEquals(DstArray[3], 0);
  CheckEquals(DstArray[4], 0);
end;

procedure TmnCOMTestCase.testExcelRow_LoadSaveArrayOverload2;
var
  SrcArr, DstArray: array of string;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Str_0;
  SrcArr[1] := Str_1;
  SrcArr[2] := Str_2;

  Excel.Rows[1].LoadFromArray(2, 4, SrcArr);
  Check(Excel.Cells[1, 2].Value = Str_0);
  Check(Excel.Cells[1, 3].Value = Str_1);
  Check(Excel.Cells[1, 4].Value = Str_2);
  Check(Excel.Cells[1, 5].Value = Unassigned);

  Excel.Rows[2].LoadFromArray(2, 3, SrcArr);
  Check(Excel.Cells[2, 2].Value = Str_0);
  Check(Excel.Cells[2, 3].Value = Str_1);
  Check(Excel.Cells[2, 4].Value = Unassigned);

  Excel.Rows[3].LoadFromArray(2, 8, SrcArr);
  Check(Excel.Cells[3, 2].Value = Str_0);
  Check(Excel.Cells[3, 3].Value = Str_1);
  Check(Excel.Cells[3, 4].Value = Str_2);
  Check(Excel.Cells[3, 5].Value = Str_0);
  Check(Excel.Cells[3, 6].Value = Str_1);
  Check(Excel.Cells[3, 7].Value = Str_2);
  Check(Excel.Cells[3, 8].Value = Str_0);
  Check(Excel.Cells[3, 9].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := '';

  try
    Excel.Rows[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Rows[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Str_1);
  CheckEquals(DstArray[1], Str_2);
  CheckEquals(DstArray[2], '');
  CheckEquals(DstArray[3], '');
  CheckEquals(DstArray[4], '');
end;

procedure TmnCOMTestCase.testExcelRow_LoadSaveArrayOverload3;
var
  SrcArr, DstArray: array of Integer;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Int_0;
  SrcArr[1] := Int_1;
  SrcArr[2] := Int_2;

  Excel.Rows[1].LoadFromArray(2, 4, SrcArr);
  Check(Excel.Cells[1, 2].Value = Int_0);
  Check(Excel.Cells[1, 3].Value = Int_1);
  Check(Excel.Cells[1, 4].Value = Int_2);
  Check(Excel.Cells[1, 5].Value = Unassigned);

  Excel.Rows[2].LoadFromArray(2, 3, SrcArr);
  Check(Excel.Cells[2, 2].Value = Int_0);
  Check(Excel.Cells[2, 3].Value = Int_1);
  Check(Excel.Cells[2, 4].Value = Unassigned);

  Excel.Rows[3].LoadFromArray(2, 8, SrcArr);
  Check(Excel.Cells[3, 2].Value = Int_0);
  Check(Excel.Cells[3, 3].Value = Int_1);
  Check(Excel.Cells[3, 4].Value = Int_2);
  Check(Excel.Cells[3, 5].Value = Int_0);
  Check(Excel.Cells[3, 6].Value = Int_1);
  Check(Excel.Cells[3, 7].Value = Int_2);
  Check(Excel.Cells[3, 8].Value = Int_0);
  Check(Excel.Cells[3, 9].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Rows[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Rows[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Int_1);
  CheckEquals(DstArray[1], Int_2);
  CheckEquals(DstArray[2], 0);
  CheckEquals(DstArray[3], 0);
  CheckEquals(DstArray[4], 0);
end;

procedure TmnCOMTestCase.testExcelRow_LoadSaveArrayOverload4;
var
  SrcArr, DstArray: array of Extended;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Float_0;
  SrcArr[1] := Float_1;
  SrcArr[2] := Float_2;

  Excel.Rows[1].LoadFromArray(2, 4, SrcArr);
  Check(mnFloatEQ(Excel.Cells[1, 2].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[1, 3].Value, Float_1));
  Check(mnFloatEQ(Excel.Cells[1, 4].Value, Float_2));
  Check(Excel.Cells[1, 5].Value = Unassigned);

  Excel.Rows[2].LoadFromArray(2, 3, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 2].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[2, 3].Value, Float_1));
  Check(Excel.Cells[2, 4].Value = Unassigned);

  Excel.Rows[3].LoadFromArray(2, 8, SrcArr);
  Check(mnFloatEQ(Excel.Cells[3, 2].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[3, 3].Value, Float_1));
  Check(mnFloatEQ(Excel.Cells[3, 4].Value, Float_2));
  Check(mnFloatEQ(Excel.Cells[3, 5].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[3, 6].Value, Float_1));
  Check(mnFloatEQ(Excel.Cells[3, 7].Value, Float_2));
  Check(mnFloatEQ(Excel.Cells[3, 8].Value, Float_0));
  Check(Excel.Cells[3, 9].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Rows[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Rows[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Float_1, mnParticle);
  CheckEquals(DstArray[1], Float_2, mnParticle);
  CheckEquals(DstArray[2], 0,       mnParticle);
  CheckEquals(DstArray[3], 0,       mnParticle);
  CheckEquals(DstArray[4], 0,       mnParticle);
end;

procedure TmnCOMTestCase.testExcelRow_LoadSaveArrayOverload5;
var
  SrcArr, DstArray: array of TDateTime;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := DT_0;
  SrcArr[1] := DT_1;
  SrcArr[2] := DT_2;

  Excel.Rows[1].LoadFromArray(2, 4, SrcArr);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[1, 2].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[1, 3].Value), DT_1));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[1, 4].Value), DT_2));
  Check(Excel.Cells[1, 5].Value = Unassigned);

  Excel.Rows[2].LoadFromArray(2, 3, SrcArr);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[2, 2].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[2, 3].Value), DT_1));
  Check(Excel.Cells[2, 4].Value = Unassigned);

  Excel.Rows[3].LoadFromArray(2, 8, SrcArr);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 2].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 3].Value), DT_1));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 4].Value), DT_2));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 5].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 6].Value), DT_1));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 7].Value), DT_2));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 8].Value), DT_0));
  Check(Excel.Cells[3, 9].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Rows[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Rows[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], DT_1, mnParticle);
  CheckEquals(DstArray[1], DT_2, mnParticle);
  CheckEquals(DstArray[2], 0);
  CheckEquals(DstArray[3], 0);
  CheckEquals(DstArray[4], 0);
end;

procedure TmnCOMTestCase.testExcelRow_LoadSaveArrayOverload6;
var
  SrcArr, DstArray: array of Currency;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Curr_0;
  SrcArr[1] := Curr_1;
  SrcArr[2] := Curr_4;

  Excel.Rows[1].LoadFromArray(2, 4, SrcArr);
  Check(mnFloatEQ(Excel.Cells[1, 2].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[1, 3].Value, Curr_1));
  Check(mnFloatEQ(Excel.Cells[1, 4].Value, Curr_4));
  Check(Excel.Cells[1, 5].Value = Unassigned);

  Excel.Rows[2].LoadFromArray(2, 3, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 2].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[2, 3].Value, Curr_1));
  Check(Excel.Cells[2, 4].Value = Unassigned);

  Excel.Rows[3].LoadFromArray(2, 8, SrcArr);
  Check(mnFloatEQ(Excel.Cells[3, 2].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[3, 3].Value, Curr_1));
  Check(mnFloatEQ(Excel.Cells[3, 4].Value, Curr_4));
  Check(mnFloatEQ(Excel.Cells[3, 5].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[3, 6].Value, Curr_1));
  Check(mnFloatEQ(Excel.Cells[3, 7].Value, Curr_4));
  Check(mnFloatEQ(Excel.Cells[3, 8].Value, Curr_0));
  Check(Excel.Cells[3, 9].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Rows[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Rows[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Curr_1, mnParticle);
  CheckEquals(DstArray[1], Curr_4, mnParticle);
  CheckEquals(DstArray[2], 0,      mnParticle);
  CheckEquals(DstArray[3], 0,      mnParticle);
  CheckEquals(DstArray[4], 0,      mnParticle);
end;

procedure TmnCOMTestCase.testExcelColumn_LoadSaveArrayOverload1;
var
  SrcArr, DstArray: array of Variant;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Var_0;
  SrcArr[1] := Var_1;
  SrcArr[2] := Var_4;

  Excel.Columns[1].LoadFromArray(2, 4, SrcArr);
  Check(Excel.Cells[2, 1].Value = Var_0);
  Check(Excel.Cells[3, 1].Value = Var_1);
  Check(Excel.Cells[4, 1].Value = Var_4);
  Check(Excel.Cells[5, 1].Value = Unassigned);

  Excel.Columns[2].LoadFromArray(2, 3, SrcArr);
  Check(Excel.Cells[2, 2].Value = Var_0);
  Check(Excel.Cells[3, 2].Value = Var_1);
  Check(Excel.Cells[4, 2].Value = Unassigned);

  Excel.Columns[3].LoadFromArray(2, 8, SrcArr);
  Check(Excel.Cells[2, 3].Value = Var_0);
  Check(Excel.Cells[3, 3].Value = Var_1);
  Check(Excel.Cells[4, 3].Value = Var_4);
  Check(Excel.Cells[5, 3].Value = Var_0);
  Check(Excel.Cells[6, 3].Value = Var_1);
  Check(Excel.Cells[7, 3].Value = Var_4);
  Check(Excel.Cells[8, 3].Value = Var_0);
  Check(Excel.Cells[9, 3].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Columns[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Columns[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Var_1);
  CheckEquals(DstArray[1], Var_4);
  CheckEquals(DstArray[2], 0);
  CheckEquals(DstArray[3], 0);
  CheckEquals(DstArray[4], 0);
end;

procedure TmnCOMTestCase.testExcelColumn_LoadSaveArrayOverload2;
var
  SrcArr, DstArray: array of string;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Str_0;
  SrcArr[1] := Str_1;
  SrcArr[2] := Str_2;

  Excel.Columns[1].LoadFromArray(2, 4, SrcArr);
  Check(Excel.Cells[2, 1].Value = Str_0);
  Check(Excel.Cells[3, 1].Value = Str_1);
  Check(Excel.Cells[4, 1].Value = Str_2);
  Check(Excel.Cells[5, 1].Value = Unassigned);

  Excel.Columns[2].LoadFromArray(2, 3, SrcArr);
  Check(Excel.Cells[2, 2].Value = Str_0);
  Check(Excel.Cells[3, 2].Value = Str_1);
  Check(Excel.Cells[4, 2].Value = Unassigned);

  Excel.Columns[3].LoadFromArray(2, 8, SrcArr);
  Check(Excel.Cells[2, 3].Value = Str_0);
  Check(Excel.Cells[3, 3].Value = Str_1);
  Check(Excel.Cells[4, 3].Value = Str_2);
  Check(Excel.Cells[5, 3].Value = Str_0);
  Check(Excel.Cells[6, 3].Value = Str_1);
  Check(Excel.Cells[7, 3].Value = Str_2);
  Check(Excel.Cells[8, 3].Value = Str_0);
  Check(Excel.Cells[9, 3].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := '';

  try
    Excel.Columns[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Columns[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Str_1);
  CheckEquals(DstArray[1], Str_2);
  CheckEquals(DstArray[2], '');
  CheckEquals(DstArray[3], '');
  CheckEquals(DstArray[4], '');
end;

procedure TmnCOMTestCase.testExcelColumn_LoadSaveArrayOverload3;
var
  SrcArr, DstArray: array of Integer;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Int_0;
  SrcArr[1] := Int_1;
  SrcArr[2] := Int_2;

  Excel.Columns[1].LoadFromArray(2, 4, SrcArr);
  Check(Excel.Cells[2, 1].Value = Int_0);
  Check(Excel.Cells[3, 1].Value = Int_1);
  Check(Excel.Cells[4, 1].Value = Int_2);
  Check(Excel.Cells[5, 1].Value = Unassigned);

  Excel.Columns[2].LoadFromArray(2, 3, SrcArr);
  Check(Excel.Cells[2, 2].Value = Int_0);
  Check(Excel.Cells[3, 2].Value = Int_1);
  Check(Excel.Cells[4, 2].Value = Unassigned);

  Excel.Columns[3].LoadFromArray(2, 8, SrcArr);
  Check(Excel.Cells[2, 3].Value = Int_0);
  Check(Excel.Cells[3, 3].Value = Int_1);
  Check(Excel.Cells[4, 3].Value = Int_2);
  Check(Excel.Cells[5, 3].Value = Int_0);
  Check(Excel.Cells[6, 3].Value = Int_1);
  Check(Excel.Cells[7, 3].Value = Int_2);
  Check(Excel.Cells[8, 3].Value = Int_0);
  Check(Excel.Cells[9, 3].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Columns[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Columns[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Int_1);
  CheckEquals(DstArray[1], Int_2);
  CheckEquals(DstArray[2], 0);
  CheckEquals(DstArray[3], 0);
  CheckEquals(DstArray[4], 0);
end;

procedure TmnCOMTestCase.testExcelColumn_LoadSaveArrayOverload4;
var
  SrcArr, DstArray: array of Extended;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Float_0;
  SrcArr[1] := Float_1;
  SrcArr[2] := Float_2;

  Excel.Columns[1].LoadFromArray(2, 4, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 1].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[3, 1].Value, Float_1));
  Check(mnFloatEQ(Excel.Cells[4, 1].Value, Float_2));
  Check(Excel.Cells[5, 1].Value = Unassigned);

  Excel.Columns[2].LoadFromArray(2, 3, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 2].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[3, 2].Value, Float_1));
  Check(Excel.Cells[4, 2].Value = Unassigned);

  Excel.Columns[3].LoadFromArray(2, 8, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 3].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[3, 3].Value, Float_1));
  Check(mnFloatEQ(Excel.Cells[4, 3].Value, Float_2));
  Check(mnFloatEQ(Excel.Cells[5, 3].Value, Float_0));
  Check(mnFloatEQ(Excel.Cells[6, 3].Value, Float_1));
  Check(mnFloatEQ(Excel.Cells[7, 3].Value, Float_2));
  Check(mnFloatEQ(Excel.Cells[8, 3].Value, Float_0));
  Check(Excel.Cells[9, 3].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Columns[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Columns[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Float_1, mnParticle);
  CheckEquals(DstArray[1], Float_2, mnParticle);
  CheckEquals(DstArray[2], 0,       mnParticle);
  CheckEquals(DstArray[3], 0,       mnParticle);
  CheckEquals(DstArray[4], 0,       mnParticle);
end;

procedure TmnCOMTestCase.testExcelColumn_LoadSaveArrayOverload5;
var
  SrcArr, DstArray: array of TDateTime;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := DT_0;
  SrcArr[1] := DT_1;
  SrcArr[2] := DT_2;

  Excel.Columns[1].LoadFromArray(2, 4, SrcArr);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[2, 1].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 1].Value), DT_1));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[4, 1].Value), DT_2));
  Check(Excel.Cells[5, 1].Value = Unassigned);

  Excel.Columns[2].LoadFromArray(2, 3, SrcArr);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[2, 2].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 2].Value), DT_1));
  Check(Excel.Cells[4, 2].Value = Unassigned);

  Excel.Columns[3].LoadFromArray(2, 8, SrcArr);
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[2, 3].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[3, 3].Value), DT_1));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[4, 3].Value), DT_2));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[5, 3].Value), DT_0));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[6, 3].Value), DT_1));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[7, 3].Value), DT_2));
  Check(mnFloatEQ(StrToDateTime(Excel.Cells[8, 3].Value), DT_0));
  Check(Excel.Cells[9, 3].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Columns[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Columns[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], DT_1, mnParticle);
  CheckEquals(DstArray[1], DT_2, mnParticle);
  CheckEquals(DstArray[2], 0);
  CheckEquals(DstArray[3], 0);
  CheckEquals(DstArray[4], 0);
end;

procedure TmnCOMTestCase.testExcelColumn_LoadSaveArrayOverload6;
var
  SrcArr, DstArray: array of Currency;
  i: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 3);
  SrcArr[0] := Curr_0;
  SrcArr[1] := Curr_1;
  SrcArr[2] := Curr_4;

  Excel.Columns[1].LoadFromArray(2, 4, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 1].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[3, 1].Value, Curr_1));
  Check(mnFloatEQ(Excel.Cells[4, 1].Value, Curr_4));
  Check(Excel.Cells[5, 1].Value = Unassigned);

  Excel.Columns[2].LoadFromArray(2, 3, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 2].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[3, 2].Value, Curr_1));
  Check(Excel.Cells[4, 2].Value = Unassigned);

  Excel.Columns[3].LoadFromArray(2, 8, SrcArr);
  Check(mnFloatEQ(Excel.Cells[2, 3].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[3, 3].Value, Curr_1));
  Check(mnFloatEQ(Excel.Cells[4, 3].Value, Curr_4));
  Check(mnFloatEQ(Excel.Cells[5, 3].Value, Curr_0));
  Check(mnFloatEQ(Excel.Cells[6, 3].Value, Curr_1));
  Check(mnFloatEQ(Excel.Cells[7, 3].Value, Curr_4));
  Check(mnFloatEQ(Excel.Cells[8, 3].Value, Curr_0));
  Check(Excel.Cells[9, 3].Value = Unassigned);

  SetLength(DstArray, 5);
  for i := Low(DstArray) to High(DstArray) do DstArray[i] := 0;

  try
    Excel.Columns[1].SaveToArray(3, 10, DstArray);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Columns[1].SaveToArray(3, 5, DstArray);
  CheckEquals(DstArray[0], Curr_1, mnParticle);
  CheckEquals(DstArray[1], Curr_4, mnParticle);
  CheckEquals(DstArray[2], 0,      mnParticle);
  CheckEquals(DstArray[3], 0,      mnParticle);
  CheckEquals(DstArray[4], 0,      mnParticle);
end;

procedure TmnCOMTestCase.testExcelRange_LoadSaveVA;
var
  VA: Variant;
begin
  Excel.New;

  VA := VarArrayCreate([5, 6, 7, 9], varVariant);
  VarArrayPut(VA, Str_0, [5, 7]);
  VarArrayPut(VA, Str_1, [5, 8]);
  VarArrayPut(VA, Str_2, [5, 9]);
  VarArrayPut(VA, Int_0, [6, 7]);
  VarArrayPut(VA, Int_1, [6, 8]);
  VarArrayPut(VA, Int_2, [6, 9]);

  Excel.Range[2, 3, 3, 5].LoadFromVA(VA);
  Check(Excel.Cells[2, 3].Value = Str_0);
  Check(Excel.Cells[2, 4].Value = Str_1);
  Check(Excel.Cells[2, 5].Value = Str_2);
  Check(Excel.Cells[2, 6].Value = Unassigned);
  Check(Excel.Cells[3, 3].Value = Int_0);
  Check(Excel.Cells[3, 4].Value = Int_1);
  Check(Excel.Cells[3, 5].Value = Int_2);
  Check(Excel.Cells[3, 6].Value = Unassigned);
  Check(Excel.Cells[4, 3].Value = Unassigned);
  Check(Excel.Cells[4, 4].Value = Unassigned);
  Check(Excel.Cells[4, 5].Value = Unassigned);
  Check(Excel.Cells[4, 6].Value = Unassigned);

  Excel.Range[12, 13, 12, 14].LoadFromVA(VA);
  Check(Excel.Cells[12, 13].Value = Str_0);
  Check(Excel.Cells[12, 14].Value = Str_1);
  Check(Excel.Cells[12, 15].Value = Unassigned);
  Check(Excel.Cells[13, 13].Value = Unassigned);
  Check(Excel.Cells[13, 14].Value = Unassigned);
  Check(Excel.Cells[13, 15].Value = Unassigned);

  Excel.Range[22, 23, 24, 26].LoadFromVA(VA);
  Check(Excel.Cells[22, 23].Value = Str_0);
  Check(Excel.Cells[22, 24].Value = Str_1);
  Check(Excel.Cells[22, 25].Value = Str_2);
  Check(Excel.Cells[22, 26].Value = Str_0);
  Check(Excel.Cells[22, 27].Value = Unassigned);
  Check(Excel.Cells[23, 23].Value = Int_0);
  Check(Excel.Cells[23, 24].Value = Int_1);
  Check(Excel.Cells[23, 25].Value = Int_2);
  Check(Excel.Cells[23, 26].Value = Int_0);
  Check(Excel.Cells[23, 27].Value = Unassigned);
  Check(Excel.Cells[24, 23].Value = Str_0);
  Check(Excel.Cells[24, 24].Value = Str_1);
  Check(Excel.Cells[24, 25].Value = Str_2);
  Check(Excel.Cells[24, 26].Value = Str_0);
  Check(Excel.Cells[24, 27].Value = Unassigned);
  Check(Excel.Cells[25, 23].Value = Unassigned);
  Check(Excel.Cells[25, 24].Value = Unassigned);
  Check(Excel.Cells[25, 25].Value = Unassigned);
  Check(Excel.Cells[25, 26].Value = Unassigned);
  Check(Excel.Cells[25, 27].Value = Unassigned);

  VA := Excel.Range[3, 4, 4, 6].SaveToVA;
  Check(VarArrayDimCount(VA) = 2);
  Check(VarArrayLowBound(VA, 1) = 1);
  Check(VarArrayHighBound(VA, 1) = 2);
  Check(VarArrayLowBound(VA, 2) = 1);
  Check(VarArrayHighBound(VA, 2) = 3);
  Check(VarArrayGet(VA, [1, 1]) = Int_1);
  Check(VarArrayGet(VA, [1, 2]) = Int_2);
  Check(VarArrayGet(VA, [1, 3]) = Unassigned);
  Check(VarArrayGet(VA, [2, 1]) = Unassigned);
  Check(VarArrayGet(VA, [2, 2]) = Unassigned);
  Check(VarArrayGet(VA, [2, 3]) = Unassigned);
end;

procedure TmnCOMTestCase.testExcelRange_LoadSaveArrayOverload1;
var
  SrcArr, DstArr: mnTVarArrayDim2;
  i, j: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 2, 3);
  SrcArr[0][0] := Str_0;
  SrcArr[0][1] := Str_1;
  SrcArr[0][2] := Str_2;
  SrcArr[1][0] := Int_0;
  SrcArr[1][1] := Int_1;
  SrcArr[1][2] := Int_2;

  Excel.Range[2, 3, 3, 5].LoadFromArray(SrcArr);
  Check(Excel.Cells[2, 3].Value = Str_0);
  Check(Excel.Cells[2, 4].Value = Str_1);
  Check(Excel.Cells[2, 5].Value = Str_2);
  Check(Excel.Cells[2, 6].Value = Unassigned);
  Check(Excel.Cells[3, 3].Value = Int_0);
  Check(Excel.Cells[3, 4].Value = Int_1);
  Check(Excel.Cells[3, 5].Value = Int_2);
  Check(Excel.Cells[3, 6].Value = Unassigned);
  Check(Excel.Cells[4, 3].Value = Unassigned);
  Check(Excel.Cells[4, 4].Value = Unassigned);
  Check(Excel.Cells[4, 5].Value = Unassigned);
  Check(Excel.Cells[4, 6].Value = Unassigned);

  Excel.Range[12, 13, 12, 14].LoadFromArray(SrcArr);
  Check(Excel.Cells[12, 13].Value = Str_0);
  Check(Excel.Cells[12, 14].Value = Str_1);
  Check(Excel.Cells[12, 15].Value = Unassigned);
  Check(Excel.Cells[13, 13].Value = Unassigned);
  Check(Excel.Cells[13, 14].Value = Unassigned);
  Check(Excel.Cells[13, 15].Value = Unassigned);

  Excel.Range[22, 23, 24, 26].LoadFromArray(SrcArr);
  Check(Excel.Cells[22, 23].Value = Str_0);
  Check(Excel.Cells[22, 24].Value = Str_1);
  Check(Excel.Cells[22, 25].Value = Str_2);
  Check(Excel.Cells[22, 26].Value = Str_0);
  Check(Excel.Cells[22, 27].Value = Unassigned);
  Check(Excel.Cells[23, 23].Value = Int_0);
  Check(Excel.Cells[23, 24].Value = Int_1);
  Check(Excel.Cells[23, 25].Value = Int_2);
  Check(Excel.Cells[23, 26].Value = Int_0);
  Check(Excel.Cells[23, 27].Value = Unassigned);
  Check(Excel.Cells[24, 23].Value = Str_0);
  Check(Excel.Cells[24, 24].Value = Str_1);
  Check(Excel.Cells[24, 25].Value = Str_2);
  Check(Excel.Cells[24, 26].Value = Str_0);
  Check(Excel.Cells[24, 27].Value = Unassigned);
  Check(Excel.Cells[25, 23].Value = Unassigned);
  Check(Excel.Cells[25, 24].Value = Unassigned);
  Check(Excel.Cells[25, 25].Value = Unassigned);
  Check(Excel.Cells[25, 26].Value = Unassigned);
  Check(Excel.Cells[25, 27].Value = Unassigned);

  SetLength(DstArr, 3, 5);
  for i := Low(DstArr) to High(DstArr) do
    for j := Low(DstArr[0]) to High(DstArr[0]) do
      DstArr[i][j] := 0;

  try
    Excel.Range[3, 4, 4, 9].SaveToArray(DstArr);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Range[3, 4, 4, 6].SaveToArray(DstArr);
  CheckEquals(DstArr[0][0], Int_1);
  CheckEquals(DstArr[0][1], Int_2);
  CheckEquals(DstArr[0][2], 0);
  CheckEquals(DstArr[0][3], 0);
  CheckEquals(DstArr[0][4], 0);

  SetLength(DstArr, 0, 0);
  Excel.Range[3, 4, 4, 6].SaveToArray_A(DstArr);
  CheckEquals(Length(DstArr), 2);
  CheckEquals(Length(DstArr[0]), 3);
  CheckEquals(DstArr[0][0], Int_1);
  CheckEquals(DstArr[0][1], Int_2);
  CheckEquals(DstArr[0][2], 0);
end;

procedure TmnCOMTestCase.testExcelRange_LoadSaveArrayOverload2;
var
  SrcArr, DstArr: mnTStrArrayDim2;
  i, j: Integer;
begin
  Excel.New;

  SetLength(SrcArr, 2, 3);
  SrcArr[0][0] := Str_0;
  SrcArr[0][1] := Str_1;
  SrcArr[0][2] := Str_2;
  SrcArr[1][0] := IntToStr(Int_0);
  SrcArr[1][1] := IntToStr(Int_1);
  SrcArr[1][2] := IntToStr(Int_2);

  Excel.Range[2, 3, 3, 5].LoadFromArray(SrcArr);
  Check(Excel.Cells[2, 3].Value = Str_0);
  Check(Excel.Cells[2, 4].Value = Str_1);
  Check(Excel.Cells[2, 5].Value = Str_2);
  Check(Excel.Cells[2, 6].Value = Unassigned);
  Check(Excel.Cells[3, 3].Value = IntToStr(Int_0));
  Check(Excel.Cells[3, 4].Value = IntToStr(Int_1));
  Check(Excel.Cells[3, 5].Value = IntToStr(Int_2));
  Check(Excel.Cells[3, 6].Value = Unassigned);
  Check(Excel.Cells[4, 3].Value = Unassigned);
  Check(Excel.Cells[4, 4].Value = Unassigned);
  Check(Excel.Cells[4, 5].Value = Unassigned);
  Check(Excel.Cells[4, 6].Value = Unassigned);

  Excel.Range[12, 13, 12, 14].LoadFromArray(SrcArr);
  Check(Excel.Cells[12, 13].Value = Str_0);
  Check(Excel.Cells[12, 14].Value = Str_1);
  Check(Excel.Cells[12, 15].Value = Unassigned);
  Check(Excel.Cells[13, 13].Value = Unassigned);
  Check(Excel.Cells[13, 14].Value = Unassigned);
  Check(Excel.Cells[13, 15].Value = Unassigned);

  Excel.Range[22, 23, 24, 26].LoadFromArray(SrcArr);
  Check(Excel.Cells[22, 23].Value = Str_0);
  Check(Excel.Cells[22, 24].Value = Str_1);
  Check(Excel.Cells[22, 25].Value = Str_2);
  Check(Excel.Cells[22, 26].Value = Str_0);
  Check(Excel.Cells[22, 27].Value = Unassigned);
  Check(Excel.Cells[23, 23].Value = IntToStr(Int_0));
  Check(Excel.Cells[23, 24].Value = IntToStr(Int_1));
  Check(Excel.Cells[23, 25].Value = IntToStr(Int_2));
  Check(Excel.Cells[23, 26].Value = IntToStr(Int_0));
  Check(Excel.Cells[23, 27].Value = Unassigned);
  Check(Excel.Cells[24, 23].Value = Str_0);
  Check(Excel.Cells[24, 24].Value = Str_1);
  Check(Excel.Cells[24, 25].Value = Str_2);
  Check(Excel.Cells[24, 26].Value = Str_0);
  Check(Excel.Cells[24, 27].Value = Unassigned);
  Check(Excel.Cells[25, 23].Value = Unassigned);
  Check(Excel.Cells[25, 24].Value = Unassigned);
  Check(Excel.Cells[25, 25].Value = Unassigned);
  Check(Excel.Cells[25, 26].Value = Unassigned);
  Check(Excel.Cells[25, 27].Value = Unassigned);

  SetLength(DstArr, 3, 5);
  for i := Low(DstArr) to High(DstArr) do
    for j := Low(DstArr[0]) to High(DstArr[0]) do
      DstArr[i][j] := '';

  try
    Excel.Range[3, 4, 4, 9].SaveToArray(DstArr);
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SArrayTooShortForExcelRange);
  end;

  Excel.Range[3, 4, 4, 6].SaveToArray(DstArr);
  CheckEquals(DstArr[0][0], IntToStr(Int_1));
  CheckEquals(DstArr[0][1], IntToStr(Int_2));
  CheckEquals(DstArr[0][2], '');
  CheckEquals(DstArr[0][3], '');
  CheckEquals(DstArr[0][4], '');

  SetLength(DstArr, 0, 0);
  Excel.Range[3, 4, 4, 6].SaveToArray_A(DstArr);
  CheckEquals(Length(DstArr), 2);
  CheckEquals(Length(DstArr[0]), 3);
  CheckEquals(DstArr[0][0], IntToStr(Int_1));
  CheckEquals(DstArr[0][1], IntToStr(Int_2));
  CheckEquals(DstArr[0][2], '');
end;

procedure TmnCOMTestCase.testExcelRange_IsSameAs;
begin
  Excel.New;

  Excel.Cells[2, 3].Value := Str_0;
  Excel.Cells[2, 4].Value := Int_0;
  Excel.Cells[2, 5].Value := Float_0;
  Excel.Cells[3, 3].Value := DT_0;
  Excel.Cells[3, 4].Value := Curr_0;
  Excel.Cells[3, 5].Value := Bool_0;

  Excel.Cells[7, 7].Value := Str_0;
  Excel.Cells[7, 8].Value := Int_0;
  Excel.Cells[7, 9].Value := Float_0;
  Excel.Cells[8, 7].Value := DT_0;
  Excel.Cells[8, 8].Value := Curr_0;
  Excel.Cells[8, 9].Value := Bool_0;

  Check(Excel.Range[2, 3, 3, 5].IsSameAs(Excel.Range[7, 7, 8, 9]));

  CheckFalse(Excel.Range[2, 3, 3, 5].IsSameAs(Excel.Range[7, 7, 8, 10]));

  Excel.Cells[7, 7].Value := Str_1;
  CheckFalse(Excel.Range[2, 3, 3, 5].IsSameAs(Excel.Range[7, 7, 8, 9]));
end;

procedure TmnCOMTestCase.testWord_AreaSeries;
var
  Times: Integer;
  i, j, k: Integer;
begin
  Word.New;

  // Paragraphs
  for Times := 1 to 2 do
    for i := 1 to 10 do
      CheckEquals(Word.Paragraphs[i].ParagraphIndex, i);

  // Tables
  for Times := 1 to 2 do
    for i := 1 to 10 do
      CheckEquals(Word.Tables[i].TableIndex, i);

  // Cells
  for Times := 1 to 2 do
    for i := 1 to 10 do
      for j := 1 to 10 do
        for k := 1 to 10 do
        begin
          CheckEquals(Word.Cells[i, j, k].TableIndex, i);
          CheckEquals(Word.Cells[i, j, k].RowIndex, j);
          CheckEquals(Word.Cells[i, j, k].ColumnIndex, k);
        end;
end;

procedure TmnCOMTestCase.testWord_FileSeries;
var
  FileName: string;
begin
  FileName := mnTProjectConvention.GetTestTempPathSub('temp.docx');

  // New
  Word.New;
  Word.Global.Text := Str_0;

  // Save, SaveAs and Close
  try
    Word.Save;
    mnNeverGoesHere;
  except
    on E: Exception do CheckEquals(E.Message, SWordFileNameNotAssigned);
  end;
  Word.SaveAs(FileName);
  Word.Close;

  // Open, Save and Close
  Word.Open(FileName);
  Check(Word.Global.Text = Str_0 + #13);
  Word.Global.Text := Str_1;
  Word.Save;
  Word.Open(FileName);
  Check(Word.Global.Text = Str_1 + #13);
  Word.Close;

  Check(mnDeleteFile(FileName));
end;

procedure TmnCOMTestCase.testWord_AppSeries;
begin
  Word.New;

  // Visible
  Word.Visible := True;
  CheckEquals(Word.Visible, True);
  Word.Visible := False;
end;

procedure TmnCOMTestCase.testWord_IsSameAs;
var
  AnotherWord: mnTWord;
begin
  AnotherWord := mnTWord.Create;
  try
    Word.New;
    AnotherWord.New;
    Check(Word.IsSameAs(AnotherWord));

    Word.Global.Text := Str_0;
    AnotherWord.Global.Text := Str_0;

    Check(Word.IsSameAs(AnotherWord));

    Word.Global.Text := Str_4;
    CheckFalse(Word.IsSameAs(AnotherWord));
  finally
    AnotherWord.Free;
  end;
end;

procedure TmnCOMTestCase.testWord_CountSeries;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  CheckEquals(Word.ParagraphCount, 3 + (4+1)*5 + 1);
  CheckEquals(Word.TableCount, 1);
end;

procedure TmnCOMTestCase.testWordArea_Text;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  Word.Selection.Text := 'Selection.Text';
  CheckEquals(Word.Selection.Text, 'Selection.Text');

  Word.Paragraphs[2].Text := 'Paragraphs[2].Text';
  CheckEquals(Word.Paragraphs[2].Text, 'Paragraphs[2].Text' + '2' + #13);

  Word.Tables[1].Text := 'Tables[1].Text';
  CheckEquals(Word.Tables[1].Text, 'Tables[1].Text' + #13#7 + DupeString(#13#7, (4+1)*5 - 1));

  Word.Cells[1, 2, 3].Text := 'Cells[1, 2, 3].Text';
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].Text' + #13#7);

  Word.Header.Text := 'Header.Text';
  CheckEquals(Word.Header.Text, 'Header.Text' + #13);

  Word.Footer.Text := 'Footer.Text';
  CheckEquals(Word.Footer.Text, 'Footer.Text' + #13);

  Word.Global.Text := 'Global.Text';
  CheckEquals(Word.Global.Text, 'Global.Text' + #13);
end;

procedure TmnCOMTestCase.testWordArea_Replace;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  Word.Selection.Text := 'Selection.text1.text.Text1.Text.Text';
  Check(Word.Selection.Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Selection.Text, 'xxx');
  CheckEquals(Word.Paragraphs[1].Text, 'Selection.text1.text.Text1.xxx.Text' + #13);

  Word.Paragraphs[2].Text := 'Paragraphs[2].text1.text.Text1.Text.Text';
  Check(Word.Paragraphs[2].Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Paragraphs[2].Text, 'Paragraphs[2].text1.text.Text1.xxx.Text' + '2' + #13);
  Check(Word.Paragraphs[2].Replace('Text', 'xxx', True, False));
  CheckEquals(Word.Paragraphs[2].Text, 'Paragraphs[2].text1.text.xxx1.xxx.Text' + '2' + #13);
  Check(Word.Paragraphs[2].Replace('Text', 'xxx', False, True));
  CheckEquals(Word.Paragraphs[2].Text, 'Paragraphs[2].text1.xxx.xxx1.xxx.Text' + '2' + #13);
  Check(Word.Paragraphs[2].Replace('Text', 'xxx', False, False));
  CheckEquals(Word.Paragraphs[2].Text, 'Paragraphs[2].xxx1.xxx.xxx1.xxx.Text' + '2' + #13);
  CheckFalse(Word.Paragraphs[2].Replace('yyy', 'xxx'));

  Word.Tables[1].Text := 'Tables[1].text1.text.Text1.Text.Text';
  Check(Word.Tables[1].Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Tables[1].Text, 'Tables[1].text1.text.Text1.xxx.Text' + #13#7 + DupeString(#13#7, (4+1)*5 - 1));
  Check(Word.Tables[1].Replace('Text', 'xxx', True, False));
  CheckEquals(Word.Tables[1].Text, 'Tables[1].text1.text.xxx1.xxx.Text' + #13#7 + DupeString(#13#7, (4+1)*5 - 1));
  Check(Word.Tables[1].Replace('Text', 'xxx', False, True));
  CheckEquals(Word.Tables[1].Text, 'Tables[1].text1.xxx.xxx1.xxx.Text' + #13#7 + DupeString(#13#7, (4+1)*5 - 1));
  Check(Word.Tables[1].Replace('Text', 'xxx', False, False));
  CheckEquals(Word.Tables[1].Text, 'Tables[1].xxx1.xxx.xxx1.xxx.Text' + #13#7 + DupeString(#13#7, (4+1)*5 - 1));
  CheckFalse(Word.Tables[1].Replace('yyy', 'xxx'));

  Word.Cells[1, 2, 3].Text := 'Cells[1, 2, 3].text1.text.Text1.Text.Text';
  Check(Word.Cells[1, 2, 3].Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].text1.text.Text1.xxx.Text' + #13#7);
  Check(Word.Cells[1, 2, 3].Replace('Text', 'xxx', True, False));
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].text1.text.xxx1.xxx.Text' + #13#7);
  Check(Word.Cells[1, 2, 3].Replace('Text', 'xxx', False, True));
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].text1.xxx.xxx1.xxx.Text' + #13#7);
  Check(Word.Cells[1, 2, 3].Replace('Text', 'xxx', False, False));
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].xxx1.xxx.xxx1.xxx.Text' + #13#7);
  CheckFalse(Word.Cells[1, 2, 3].Replace('yyy', 'xxx'));

  Word.Header.Text := 'Header.text1.text.Text1.Text.Text';
  Check(Word.Header.Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Header.Text, 'Header.text1.text.Text1.xxx.Text' + #13);
  Check(Word.Header.Replace('Text', 'xxx', True, False));
  CheckEquals(Word.Header.Text, 'Header.text1.text.xxx1.xxx.Text' + #13);
  Check(Word.Header.Replace('Text', 'xxx', False, True));
  CheckEquals(Word.Header.Text, 'Header.text1.xxx.xxx1.xxx.Text' + #13);
  Check(Word.Header.Replace('Text', 'xxx', False, False));
  CheckEquals(Word.Header.Text, 'Header.xxx1.xxx.xxx1.xxx.Text' + #13);
  CheckFalse(Word.Header.Replace('yyy', 'xxx'));

  Word.Footer.Text := 'Footer.text1.text.Text1.Text.Text';
  Check(Word.Footer.Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Footer.Text, 'Footer.text1.text.Text1.xxx.Text' + #13);
  Check(Word.Footer.Replace('Text', 'xxx', True, False));
  CheckEquals(Word.Footer.Text, 'Footer.text1.text.xxx1.xxx.Text' + #13);
  Check(Word.Footer.Replace('Text', 'xxx', False, True));
  CheckEquals(Word.Footer.Text, 'Footer.text1.xxx.xxx1.xxx.Text' + #13);
  Check(Word.Footer.Replace('Text', 'xxx', False, False));
  CheckEquals(Word.Footer.Text, 'Footer.xxx1.xxx.xxx1.xxx.Text' + #13);
  CheckFalse(Word.Footer.Replace('yyy', 'xxx'));

  Word.Global.Text := 'Global.text1.text.Text1.Text.Text';
  Check(Word.Global.Replace('Text', 'xxx', True, True));
  CheckEquals(Word.Global.Text, 'Global.text1.text.Text1.xxx.Text' + #13);
  Check(Word.Global.Replace('Text', 'xxx', True, False));
  CheckEquals(Word.Global.Text, 'Global.text1.text.xxx1.xxx.Text' + #13);
  Check(Word.Global.Replace('Text', 'xxx', False, True));
  CheckEquals(Word.Global.Text, 'Global.text1.xxx.xxx1.xxx.Text' + #13);
  Check(Word.Global.Replace('Text', 'xxx', False, False));
  CheckEquals(Word.Global.Text, 'Global.xxx1.xxx.xxx1.xxx.Text' + #13);
  CheckFalse(Word.Global.Replace('yyy', 'xxx'));
end;

procedure TmnCOMTestCase.testWordArea_ReplaceAll;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  Word.Selection.Text := 'Selection.text1.text.Text1.Text.Text';
  Word.Selection.ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Selection.Text, 'xxx');
  CheckEquals(Word.Paragraphs[1].Text, 'Selection.text1.text.xxx1.xxx.xxx' + #13);

  Word.Paragraphs[2].Text := 'Paragraphs[2].text1.text.Text1.Text.Text';
  Word.Paragraphs[2].ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Paragraphs[2].Text, 'Paragraphs[2].text1.text.xxx1.xxx.xxx' + '2' + #13);

  Word.Tables[1].Text := 'Tables[1].text1.text.Text1.Text.Text';
  Word.Tables[1].ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Tables[1].Text, 'Tables[1].text1.text.xxx1.xxx.xxx' + #13#7 + DupeString(#13#7, (4+1)*5 - 1));

  Word.Cells[1, 2, 3].Text := 'Cells[1, 2, 3].text1.text.Text1.Text.Text';
  Word.Cells[1, 2, 3].ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].text1.text.xxx1.xxx.xxx' + #13#7);

  Word.Header.Text := 'Header.text1.text.Text1.Text.Text';
  Word.Header.ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Header.Text, 'Header.text1.text.xxx1.xxx.xxx' + #13);

  Word.Footer.Text := 'Footer.text1.text.Text1.Text.Text';
  Word.Footer.ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Footer.Text, 'Footer.text1.text.xxx1.xxx.xxx' + #13);

  Word.Global.Text := 'Global.text1.text.Text1.Text.Text';
  Word.Global.ReplaceAll('Text', 'xxx');
  CheckEquals(Word.Global.Text, 'Global.text1.text.xxx1.xxx.xxx' + #13);
end;

procedure TmnCOMTestCase.testWordSelection_TextSeries;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  Word.Selection.TypeText('aa');
  Word.Selection.TypeText('bb');
  CheckEquals(Word.Selection.Text, '' + #13);
  CheckEquals(Word.Paragraphs[1].Text, 'aabb' + #13);

  Word.Paragraphs[1].Text := '' + #13;
  Word.Selection.InsertText('aa');
  Word.Selection.InsertText('bb');
  CheckEquals(Word.Selection.Text, 'b');
  CheckEquals(Word.Paragraphs[1].Text, 'bbaa' + #13);

  Word.Paragraphs[1].Text := '' + #13;
  Word.Selection.Text := 'aa';
  Word.Selection.Text := 'bb';
  CheckEquals(Word.Selection.Text, 'bb');
  CheckEquals(Word.Paragraphs[1].Text, 'bb' + #13);
end;

procedure TmnCOMTestCase.testWordSelection_InsertTable;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  CheckEquals(Word.TableCount, 1);
  Word.Selection.InsertTable(10, 8);
  CheckEquals(Word.TableCount, 2);
  CheckEquals(Word.Tables[1].RowCount, 10);
  CheckEquals(Word.Tables[1].ColumnCount, 8);
  CheckEquals(Word.Tables[2].RowCount, 5);
  CheckEquals(Word.Tables[2].ColumnCount, 4);
end;

procedure TmnCOMTestCase.testWordTable_RowColumnSeries;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  // RowCount and ColumnCount
  CheckEquals(Word.Tables[1].RowCount, 5);
  CheckEquals(Word.Tables[1].ColumnCount, 4);

  Word.Tables[1].RowCount := 3;
  Word.Tables[1].ColumnCount := 2;
  CheckEquals(Word.Tables[1].RowCount, 3);
  CheckEquals(Word.Tables[1].ColumnCount, 2);

  Word.Tables[1].RowCount := 7;
  Word.Tables[1].ColumnCount := 6;
  CheckEquals(Word.Tables[1].RowCount, 7);
  CheckEquals(Word.Tables[1].ColumnCount, 6);

  // AddRow and AddColumn
  Word.Tables[1].AddRow;
  Word.Tables[1].AddColumn;
  CheckEquals(Word.Tables[1].RowCount, 8);
  CheckEquals(Word.Tables[1].ColumnCount, 7);

  // DeleteRow and DeleteColumn
  Word.Tables[1].DeleteRow(3);
  Word.Tables[1].DeleteColumn(4);
  CheckEquals(Word.Tables[1].RowCount, 7);
  CheckEquals(Word.Tables[1].ColumnCount, 6);
end;

procedure TmnCOMTestCase.testWordCell_ActualText;
begin
  Word.New;
  Word.Selection.TypeText(mnNewLine + '1' + mnNewLine + '2' + mnNewLine);
  Word.Selection.InsertTable(5, 4);
  Word.Selection.GotoBegin;

  Word.Cells[1, 2, 3].Text := 'Cells[1, 2, 3].Text';
  CheckEquals(Word.Cells[1, 2, 3].Text, 'Cells[1, 2, 3].Text' + #13#7);

  Word.Cells[1, 2, 3].Text := 'Cells[1, 2, 3].Text';
  CheckEquals(Word.Cells[1, 2, 3].ActualText, 'Cells[1, 2, 3].Text');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnCOMTestCase.Suite);
end.


