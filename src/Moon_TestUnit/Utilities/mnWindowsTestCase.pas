unit mnWindowsTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnWindowsTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testHWNDArrayListConvertors;
    procedure testLoadResAsStr;
  end;

implementation

uses mnWindows, UTestConsts, Classes, mnSystem;

{$R ..\..\..\files\Strings\TestUnit\TestUnit.res}

{ TmnWindowsTestCase }

procedure TmnWindowsTestCase.SetUp;
begin
end;

procedure TmnWindowsTestCase.TearDown;
begin
end;

procedure TmnWindowsTestCase.testHWNDArrayListConvertors;
var
  Arr, Arr2: mnTHWNDArray;
  List: TList;
begin
  SetLength(Arr, 3);
  Arr[0] := Int_0;
  Arr[1] := Int_2;
  Arr[2] := Int_3;

  // mnHWNDArrayToList
  List := mnHWNDArrayToList(Arr);
  CheckEquals(List.Count, 3);
  CheckEquals(mnPHWND(List[0])^, Int_0);
  CheckEquals(mnPHWND(List[1])^, Int_2);
  CheckEquals(mnPHWND(List[2])^, Int_3);

  // mnHWNDListToArray
  Arr2 := mnHWNDListToArray(List);
  CheckEquals(Length(Arr2), 3);
  CheckEquals(Arr2[0], Int_0);
  CheckEquals(Arr2[1], Int_2);
  CheckEquals(Arr2[2], Int_3);

  mnClearList(List);
  List.Free;
end;

procedure TmnWindowsTestCase.testLoadResAsStr;
begin
  CheckEquals(mnLoadResAsStr('Res_RCDATA'), 'I am a Res_RCDATA');
  CheckEquals(mnLoadResAsStr(HInstance, 'Res_RCDATA'), 'I am a Res_RCDATA');

  CheckEquals(mnLoadResAsStr('NoExists'), '');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnWindowsTestCase.Suite);
end.