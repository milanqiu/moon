unit mnDialogTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnDialogTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testInfoBox;
    procedure testErrorBox;
    procedure testWarningBox;
    procedure testWarningBoxEx;
    procedure testConfirmBox;
    procedure testConfirmBoxEx;
    procedure testShouldBeBox;
    procedure testMemoBox;
    procedure testEditDialog;
    procedure testComboBoxDialog;
    procedure testCheckListBoxDialog;
  end;

implementation

uses mnDialog, UTestConsts, SysUtils, Variants, mnResStrsU, mnSystem;

{ TmnDialogTestCase }

procedure TmnDialogTestCase.SetUp;
begin
end;

procedure TmnDialogTestCase.TearDown;
begin
end;

procedure TmnDialogTestCase.testInfoBox;
begin
  mnInfoBox('This is an info.');
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, 'This is an info.');

  mnInfoBox(Int_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Str_Of_Int_0);

  mnInfoBox(Float_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Str_Of_Float_0);

  mnInfoBox(Bool_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Str_Of_Bool_0);

  mnInfoBox(DT_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, FloatToStr(DT_0));

  mnInfoBoxDT(DT_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, DateTimeToStr(DT_0));

  mnInfoBoxVar(Var_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Str_Of_Var_0);
end;

procedure TmnDialogTestCase.testErrorBox;
begin
  mnErrorBox('This is an error.', 'Errorrrrrrrrrrrr!');
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, 'This is an error.');
end;

procedure TmnDialogTestCase.testWarningBox;
begin
  mnWarningBox('This is a warning.');
  CheckEquals(mnLastDialogInfo.Kind, 'mnWarningBox');
  CheckEquals(mnLastDialogInfo.Msg, 'This is a warning.');
end;

procedure TmnDialogTestCase.testWarningBoxEx;
begin
  mnWarningBoxEx('Warning need to be responded.', 'Warnnnnnnnnnning');
  CheckEquals(mnLastDialogInfo.Kind, 'mnWarningBoxEx');
  CheckEquals(mnLastDialogInfo.Msg, 'Warning need to be responded.');
end;

procedure TmnDialogTestCase.testConfirmBox;
begin
  mnConfirmBox('Question need to be confirmed by yes or no.');
  CheckEquals(mnLastDialogInfo.Kind, 'mnConfirmBox');
  CheckEquals(mnLastDialogInfo.Msg, 'Question need to be confirmed by yes or no.');
end;

procedure TmnDialogTestCase.testConfirmBoxEx;
begin
  mnConfirmBoxEx('Question need to be confirmed by yes, no or cancel.');
  CheckEquals(mnLastDialogInfo.Kind, 'mnConfirmBoxEx');
  CheckEquals(mnLastDialogInfo.Msg, 'Question need to be confirmed by yes, no or cancel.');
end;

procedure TmnDialogTestCase.testShouldBeBox;
begin
  mnShouldBeBox(Str_0, Str_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeCorrect, [Str_0]));

  mnShouldBeBox(Str_0, Str_1);
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeWrong, [Str_0, Str_1]));

  mnShouldBeBox(Int_0, Int_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeCorrect, [Str_Of_Int_0]));

  mnShouldBeBox(Int_0, Int_1);
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeWrong, [Str_Of_Int_0, Str_Of_Int_1]));

  mnShouldBeBox(Float_0, Float_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeCorrect, [Str_Of_Float_0]));

  mnShouldBeBox(Float_0, Float_1);
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeWrong, [Str_Of_Float_0, Str_Of_Float_1]));

  mnShouldBeBox(Bool_0, Bool_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeCorrect, [Str_Of_Bool_0]));

  mnShouldBeBox(Bool_0, Bool_1);
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeWrong, [Str_Of_Bool_0, Str_Of_Bool_1]));

  mnShouldBeBox(DT_0, DT_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeCorrect, [FloatToStr(DT_0)]));

  mnShouldBeBox(DT_0, DT_1);
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeWrong, [FloatToStr(DT_0), FloatToStr(DT_1)]));

  mnShouldBeBoxDT(DT_0, DT_0);
  CheckEquals(mnLastDialogInfo.Kind, 'mnInfoBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeCorrect, [DateTimeToStr(DT_0)]));

  mnShouldBeBoxDT(DT_0, DT_1);
  CheckEquals(mnLastDialogInfo.Kind, 'mnErrorBox');
  CheckEquals(mnLastDialogInfo.Msg, Format(SShouldBeWrong, [DateTimeToStr(DT_0), DateTimeToStr(DT_1)]));
end;

procedure TmnDialogTestCase.testMemoBox;
var
  strs: mnTStrList;
begin
  strs := mnTStrList.Create;
  try
    strs.LoadFromFile(mnAppPathSub('dunit.ini'));
    mnMemoBox(strs.Text);
    CheckEquals(mnLastDialogInfo.Kind, 'mnMemoBox');
    CheckEquals(mnLastDialogInfo.Msg, strs.Text);
  finally
    strs.Free;
  end;
end;

procedure TmnDialogTestCase.testEditDialog;
var
  Value: string;
begin
  mnEditDialog('Input string', 'Please input a string:', 'default sring', Value);
  CheckEquals(mnLastDialogInfo.Kind, 'mnEditDialog');
  CheckEquals(mnLastDialogInfo.Msg, '');
  CheckEquals(Value, 'default sring');
end;

procedure TmnDialogTestCase.testComboBoxDialog;
var
  SelectedIndex: Integer;
  ComboItems: mnTStrList;
begin
  ComboItems := mnTStrList.Create;
  try
    ComboItems.Append(Str_0);
    ComboItems.Append(Str_1);
    ComboItems.Append(Str_2);
    ComboItems.Append(Str_3);
    ComboItems.Append(Str_4);

    SelectedIndex := 3;
    mnComboBoxDialog('Choose string', 'Please choose a string:', ComboItems, SelectedIndex);
    CheckEquals(mnLastDialogInfo.Kind, 'mnComboBoxDialog');
    CheckEquals(mnLastDialogInfo.Msg, '');
    CheckEquals(SelectedIndex, 3);
  finally
    ComboItems.Free;
  end;
end;

procedure TmnDialogTestCase.testCheckListBoxDialog;
var
  CheckedResult: mnTBoolList;
  CheckItems: mnTStrList;
begin
  CheckedResult := mnTBoolList.Create;
  CheckItems := mnTStrList.Create;
  try
    CheckItems.Append(Str_0);
    CheckItems.Append(Str_1);
    CheckItems.Append(Str_2);
    CheckItems.Append(Str_3);
    CheckItems.Append(Str_4);

    mnCheckListBoxDialog('Check items', 'Please check some items:', CheckItems, CheckedResult);
    CheckEquals(mnLastDialogInfo.Kind, 'mnCheckListBoxDialog');
    CheckEquals(mnLastDialogInfo.Msg, '');
    CheckEquals(CheckedResult.Count, 0);
  finally
    CheckItems.Free;
    CheckedResult.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnDialogTestCase.Suite);
end.


