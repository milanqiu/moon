unit mnTPLTestCase;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework;

type
  TmnTPLTestCase = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testParseJsonToStrArray;
    procedure testParseJsonObjectNames;
    procedure testParseJsonObjectValue;
  end;

implementation

uses mnTPL, mnSystem, mnDebug;

{ TmnTPLTestCase }

procedure TmnTPLTestCase.SetUp;
begin
end;

procedure TmnTPLTestCase.TearDown;
begin
end;

procedure TmnTPLTestCase.testParseJsonToStrArray;
var
  Arr: mnTStrArray;
begin
  // overload form 1 (implicited overload form 2)
  Arr := mnParseJsonToStrArray('["aaa", bbb, 111]');
  CheckEquals(Length(Arr), 3);
  CheckEquals(Arr[0], 'aaa');
  CheckEquals(Arr[1], 'bbb');
  CheckEquals(Arr[2], '111');

  Arr := mnParseJsonToStrArray('[]');
  CheckEquals(Length(Arr), 0);

  try
    mnParseJsonToStrArray('["aaa"');
    mnNeverGoesHere;
  except
  end;
end;

procedure TmnTPLTestCase.testParseJsonObjectNames;
var
  Arr: mnTStrArray;
begin
  // overload form 1 (implicited overload form 2)
  Arr := mnParseJsonObjectNames('{Name1:Value1,"Name2":"Value2"}');
  CheckEquals(Length(Arr), 2);
  CheckEquals(Arr[0], 'Name2');
  CheckEquals(Arr[1], 'Name1');

  Arr := mnParseJsonObjectNames('{}');
  CheckEquals(Length(Arr), 0);

  try
    mnParseJsonObjectNames('{Name1:Value1');
    mnNeverGoesHere;
  except
  end;
end;

procedure TmnTPLTestCase.testParseJsonObjectValue;
begin
  // overload form 1 (implicited overload form 2)
  CheckEquals(mnParseJsonObjectValue('{Name1:Value1,"Name2":"Value2"}', 'Name1'), 'Value1');
  CheckEquals(mnParseJsonObjectValue('{Name1:Value1,"Name2":"Value2"}', 'Name2'), 'Value2');
  CheckEquals(mnParseJsonObjectValue('{Name1:Value1,"Name2":"Value2"}', 'Name3'), '');

  try
    mnParseJsonObjectValue('{Name1:Value1', 'Name1');
    mnNeverGoesHere;
  except
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TmnTPLTestCase.Suite);
end.